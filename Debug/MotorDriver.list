
MotorDriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055c4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000334  08005684  08005684  00006684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059b8  080059b8  0000706c  2**0
                  CONTENTS
  4 .ARM          00000000  080059b8  080059b8  0000706c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080059b8  080059b8  0000706c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059b8  080059b8  000069b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080059bc  080059bc  000069bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080059c0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000035c  20000070  08005a2c  00007070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200003cc  08005a2c  000073cc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a997  00000000  00000000  00007094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003490  00000000  00000000  00021a2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000bde2  00000000  00000000  00024ebb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001110  00000000  00000000  00030ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001152  00000000  00000000  00031db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015c26  00000000  00000000  00032f02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001cd81  00000000  00000000  00048b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00084a59  00000000  00000000  000658a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000ea302  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003b3c  00000000  00000000  000ea348  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  000ede84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800566c 	.word	0x0800566c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	0800566c 	.word	0x0800566c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f806 	bl	8000254 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__aeabi_idiv0>:
 8000254:	4770      	bx	lr
 8000256:	46c0      	nop			@ (mov r8, r8)

08000258 <__aeabi_cdrcmple>:
 8000258:	4684      	mov	ip, r0
 800025a:	0010      	movs	r0, r2
 800025c:	4662      	mov	r2, ip
 800025e:	468c      	mov	ip, r1
 8000260:	0019      	movs	r1, r3
 8000262:	4663      	mov	r3, ip
 8000264:	e000      	b.n	8000268 <__aeabi_cdcmpeq>
 8000266:	46c0      	nop			@ (mov r8, r8)

08000268 <__aeabi_cdcmpeq>:
 8000268:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800026a:	f000 fc83 	bl	8000b74 <__ledf2>
 800026e:	2800      	cmp	r0, #0
 8000270:	d401      	bmi.n	8000276 <__aeabi_cdcmpeq+0xe>
 8000272:	2100      	movs	r1, #0
 8000274:	42c8      	cmn	r0, r1
 8000276:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000278 <__aeabi_dcmpeq>:
 8000278:	b510      	push	{r4, lr}
 800027a:	f000 fbc3 	bl	8000a04 <__eqdf2>
 800027e:	4240      	negs	r0, r0
 8000280:	3001      	adds	r0, #1
 8000282:	bd10      	pop	{r4, pc}

08000284 <__aeabi_dcmplt>:
 8000284:	b510      	push	{r4, lr}
 8000286:	f000 fc75 	bl	8000b74 <__ledf2>
 800028a:	2800      	cmp	r0, #0
 800028c:	db01      	blt.n	8000292 <__aeabi_dcmplt+0xe>
 800028e:	2000      	movs	r0, #0
 8000290:	bd10      	pop	{r4, pc}
 8000292:	2001      	movs	r0, #1
 8000294:	bd10      	pop	{r4, pc}
 8000296:	46c0      	nop			@ (mov r8, r8)

08000298 <__aeabi_dcmple>:
 8000298:	b510      	push	{r4, lr}
 800029a:	f000 fc6b 	bl	8000b74 <__ledf2>
 800029e:	2800      	cmp	r0, #0
 80002a0:	dd01      	ble.n	80002a6 <__aeabi_dcmple+0xe>
 80002a2:	2000      	movs	r0, #0
 80002a4:	bd10      	pop	{r4, pc}
 80002a6:	2001      	movs	r0, #1
 80002a8:	bd10      	pop	{r4, pc}
 80002aa:	46c0      	nop			@ (mov r8, r8)

080002ac <__aeabi_dcmpgt>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	f000 fbed 	bl	8000a8c <__gedf2>
 80002b2:	2800      	cmp	r0, #0
 80002b4:	dc01      	bgt.n	80002ba <__aeabi_dcmpgt+0xe>
 80002b6:	2000      	movs	r0, #0
 80002b8:	bd10      	pop	{r4, pc}
 80002ba:	2001      	movs	r0, #1
 80002bc:	bd10      	pop	{r4, pc}
 80002be:	46c0      	nop			@ (mov r8, r8)

080002c0 <__aeabi_dcmpge>:
 80002c0:	b510      	push	{r4, lr}
 80002c2:	f000 fbe3 	bl	8000a8c <__gedf2>
 80002c6:	2800      	cmp	r0, #0
 80002c8:	da01      	bge.n	80002ce <__aeabi_dcmpge+0xe>
 80002ca:	2000      	movs	r0, #0
 80002cc:	bd10      	pop	{r4, pc}
 80002ce:	2001      	movs	r0, #1
 80002d0:	bd10      	pop	{r4, pc}
 80002d2:	46c0      	nop			@ (mov r8, r8)

080002d4 <__aeabi_d2uiz>:
 80002d4:	b570      	push	{r4, r5, r6, lr}
 80002d6:	2200      	movs	r2, #0
 80002d8:	4b0c      	ldr	r3, [pc, #48]	@ (800030c <__aeabi_d2uiz+0x38>)
 80002da:	0004      	movs	r4, r0
 80002dc:	000d      	movs	r5, r1
 80002de:	f7ff ffef 	bl	80002c0 <__aeabi_dcmpge>
 80002e2:	2800      	cmp	r0, #0
 80002e4:	d104      	bne.n	80002f0 <__aeabi_d2uiz+0x1c>
 80002e6:	0020      	movs	r0, r4
 80002e8:	0029      	movs	r1, r5
 80002ea:	f001 fb19 	bl	8001920 <__aeabi_d2iz>
 80002ee:	bd70      	pop	{r4, r5, r6, pc}
 80002f0:	4b06      	ldr	r3, [pc, #24]	@ (800030c <__aeabi_d2uiz+0x38>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	0020      	movs	r0, r4
 80002f6:	0029      	movs	r1, r5
 80002f8:	f000 ff76 	bl	80011e8 <__aeabi_dsub>
 80002fc:	f001 fb10 	bl	8001920 <__aeabi_d2iz>
 8000300:	2380      	movs	r3, #128	@ 0x80
 8000302:	061b      	lsls	r3, r3, #24
 8000304:	469c      	mov	ip, r3
 8000306:	4460      	add	r0, ip
 8000308:	e7f1      	b.n	80002ee <__aeabi_d2uiz+0x1a>
 800030a:	46c0      	nop			@ (mov r8, r8)
 800030c:	41e00000 	.word	0x41e00000

08000310 <__aeabi_l2d>:
 8000310:	b570      	push	{r4, r5, r6, lr}
 8000312:	0006      	movs	r6, r0
 8000314:	0008      	movs	r0, r1
 8000316:	f001 fb3f 	bl	8001998 <__aeabi_i2d>
 800031a:	2200      	movs	r2, #0
 800031c:	4b06      	ldr	r3, [pc, #24]	@ (8000338 <__aeabi_l2d+0x28>)
 800031e:	f000 fc9b 	bl	8000c58 <__aeabi_dmul>
 8000322:	000d      	movs	r5, r1
 8000324:	0004      	movs	r4, r0
 8000326:	0030      	movs	r0, r6
 8000328:	f001 fb64 	bl	80019f4 <__aeabi_ui2d>
 800032c:	002b      	movs	r3, r5
 800032e:	0022      	movs	r2, r4
 8000330:	f000 f804 	bl	800033c <__aeabi_dadd>
 8000334:	bd70      	pop	{r4, r5, r6, pc}
 8000336:	46c0      	nop			@ (mov r8, r8)
 8000338:	41f00000 	.word	0x41f00000

0800033c <__aeabi_dadd>:
 800033c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800033e:	4657      	mov	r7, sl
 8000340:	464e      	mov	r6, r9
 8000342:	4645      	mov	r5, r8
 8000344:	46de      	mov	lr, fp
 8000346:	b5e0      	push	{r5, r6, r7, lr}
 8000348:	b083      	sub	sp, #12
 800034a:	9000      	str	r0, [sp, #0]
 800034c:	9101      	str	r1, [sp, #4]
 800034e:	030c      	lsls	r4, r1, #12
 8000350:	004f      	lsls	r7, r1, #1
 8000352:	0fce      	lsrs	r6, r1, #31
 8000354:	0a61      	lsrs	r1, r4, #9
 8000356:	9c00      	ldr	r4, [sp, #0]
 8000358:	031d      	lsls	r5, r3, #12
 800035a:	0f64      	lsrs	r4, r4, #29
 800035c:	430c      	orrs	r4, r1
 800035e:	9900      	ldr	r1, [sp, #0]
 8000360:	9200      	str	r2, [sp, #0]
 8000362:	9301      	str	r3, [sp, #4]
 8000364:	00c8      	lsls	r0, r1, #3
 8000366:	0059      	lsls	r1, r3, #1
 8000368:	0d4b      	lsrs	r3, r1, #21
 800036a:	4699      	mov	r9, r3
 800036c:	9a00      	ldr	r2, [sp, #0]
 800036e:	9b01      	ldr	r3, [sp, #4]
 8000370:	0a6d      	lsrs	r5, r5, #9
 8000372:	0fd9      	lsrs	r1, r3, #31
 8000374:	0f53      	lsrs	r3, r2, #29
 8000376:	432b      	orrs	r3, r5
 8000378:	469a      	mov	sl, r3
 800037a:	9b00      	ldr	r3, [sp, #0]
 800037c:	0d7f      	lsrs	r7, r7, #21
 800037e:	00da      	lsls	r2, r3, #3
 8000380:	4694      	mov	ip, r2
 8000382:	464a      	mov	r2, r9
 8000384:	46b0      	mov	r8, r6
 8000386:	1aba      	subs	r2, r7, r2
 8000388:	428e      	cmp	r6, r1
 800038a:	d100      	bne.n	800038e <__aeabi_dadd+0x52>
 800038c:	e0b0      	b.n	80004f0 <__aeabi_dadd+0x1b4>
 800038e:	2a00      	cmp	r2, #0
 8000390:	dc00      	bgt.n	8000394 <__aeabi_dadd+0x58>
 8000392:	e078      	b.n	8000486 <__aeabi_dadd+0x14a>
 8000394:	4649      	mov	r1, r9
 8000396:	2900      	cmp	r1, #0
 8000398:	d100      	bne.n	800039c <__aeabi_dadd+0x60>
 800039a:	e0e9      	b.n	8000570 <__aeabi_dadd+0x234>
 800039c:	49c9      	ldr	r1, [pc, #804]	@ (80006c4 <__aeabi_dadd+0x388>)
 800039e:	428f      	cmp	r7, r1
 80003a0:	d100      	bne.n	80003a4 <__aeabi_dadd+0x68>
 80003a2:	e195      	b.n	80006d0 <__aeabi_dadd+0x394>
 80003a4:	2501      	movs	r5, #1
 80003a6:	2a38      	cmp	r2, #56	@ 0x38
 80003a8:	dc16      	bgt.n	80003d8 <__aeabi_dadd+0x9c>
 80003aa:	2180      	movs	r1, #128	@ 0x80
 80003ac:	4653      	mov	r3, sl
 80003ae:	0409      	lsls	r1, r1, #16
 80003b0:	430b      	orrs	r3, r1
 80003b2:	469a      	mov	sl, r3
 80003b4:	2a1f      	cmp	r2, #31
 80003b6:	dd00      	ble.n	80003ba <__aeabi_dadd+0x7e>
 80003b8:	e1e7      	b.n	800078a <__aeabi_dadd+0x44e>
 80003ba:	2120      	movs	r1, #32
 80003bc:	4655      	mov	r5, sl
 80003be:	1a8b      	subs	r3, r1, r2
 80003c0:	4661      	mov	r1, ip
 80003c2:	409d      	lsls	r5, r3
 80003c4:	40d1      	lsrs	r1, r2
 80003c6:	430d      	orrs	r5, r1
 80003c8:	4661      	mov	r1, ip
 80003ca:	4099      	lsls	r1, r3
 80003cc:	1e4b      	subs	r3, r1, #1
 80003ce:	4199      	sbcs	r1, r3
 80003d0:	4653      	mov	r3, sl
 80003d2:	40d3      	lsrs	r3, r2
 80003d4:	430d      	orrs	r5, r1
 80003d6:	1ae4      	subs	r4, r4, r3
 80003d8:	1b45      	subs	r5, r0, r5
 80003da:	42a8      	cmp	r0, r5
 80003dc:	4180      	sbcs	r0, r0
 80003de:	4240      	negs	r0, r0
 80003e0:	1a24      	subs	r4, r4, r0
 80003e2:	0223      	lsls	r3, r4, #8
 80003e4:	d400      	bmi.n	80003e8 <__aeabi_dadd+0xac>
 80003e6:	e10f      	b.n	8000608 <__aeabi_dadd+0x2cc>
 80003e8:	0264      	lsls	r4, r4, #9
 80003ea:	0a64      	lsrs	r4, r4, #9
 80003ec:	2c00      	cmp	r4, #0
 80003ee:	d100      	bne.n	80003f2 <__aeabi_dadd+0xb6>
 80003f0:	e139      	b.n	8000666 <__aeabi_dadd+0x32a>
 80003f2:	0020      	movs	r0, r4
 80003f4:	f001 fb22 	bl	8001a3c <__clzsi2>
 80003f8:	0003      	movs	r3, r0
 80003fa:	3b08      	subs	r3, #8
 80003fc:	2120      	movs	r1, #32
 80003fe:	0028      	movs	r0, r5
 8000400:	1aca      	subs	r2, r1, r3
 8000402:	40d0      	lsrs	r0, r2
 8000404:	409c      	lsls	r4, r3
 8000406:	0002      	movs	r2, r0
 8000408:	409d      	lsls	r5, r3
 800040a:	4322      	orrs	r2, r4
 800040c:	429f      	cmp	r7, r3
 800040e:	dd00      	ble.n	8000412 <__aeabi_dadd+0xd6>
 8000410:	e173      	b.n	80006fa <__aeabi_dadd+0x3be>
 8000412:	1bd8      	subs	r0, r3, r7
 8000414:	3001      	adds	r0, #1
 8000416:	1a09      	subs	r1, r1, r0
 8000418:	002c      	movs	r4, r5
 800041a:	408d      	lsls	r5, r1
 800041c:	40c4      	lsrs	r4, r0
 800041e:	1e6b      	subs	r3, r5, #1
 8000420:	419d      	sbcs	r5, r3
 8000422:	0013      	movs	r3, r2
 8000424:	40c2      	lsrs	r2, r0
 8000426:	408b      	lsls	r3, r1
 8000428:	4325      	orrs	r5, r4
 800042a:	2700      	movs	r7, #0
 800042c:	0014      	movs	r4, r2
 800042e:	431d      	orrs	r5, r3
 8000430:	076b      	lsls	r3, r5, #29
 8000432:	d009      	beq.n	8000448 <__aeabi_dadd+0x10c>
 8000434:	230f      	movs	r3, #15
 8000436:	402b      	ands	r3, r5
 8000438:	2b04      	cmp	r3, #4
 800043a:	d005      	beq.n	8000448 <__aeabi_dadd+0x10c>
 800043c:	1d2b      	adds	r3, r5, #4
 800043e:	42ab      	cmp	r3, r5
 8000440:	41ad      	sbcs	r5, r5
 8000442:	426d      	negs	r5, r5
 8000444:	1964      	adds	r4, r4, r5
 8000446:	001d      	movs	r5, r3
 8000448:	0223      	lsls	r3, r4, #8
 800044a:	d400      	bmi.n	800044e <__aeabi_dadd+0x112>
 800044c:	e12d      	b.n	80006aa <__aeabi_dadd+0x36e>
 800044e:	4a9d      	ldr	r2, [pc, #628]	@ (80006c4 <__aeabi_dadd+0x388>)
 8000450:	3701      	adds	r7, #1
 8000452:	4297      	cmp	r7, r2
 8000454:	d100      	bne.n	8000458 <__aeabi_dadd+0x11c>
 8000456:	e0d3      	b.n	8000600 <__aeabi_dadd+0x2c4>
 8000458:	4646      	mov	r6, r8
 800045a:	499b      	ldr	r1, [pc, #620]	@ (80006c8 <__aeabi_dadd+0x38c>)
 800045c:	08ed      	lsrs	r5, r5, #3
 800045e:	4021      	ands	r1, r4
 8000460:	074a      	lsls	r2, r1, #29
 8000462:	432a      	orrs	r2, r5
 8000464:	057c      	lsls	r4, r7, #21
 8000466:	024d      	lsls	r5, r1, #9
 8000468:	0b2d      	lsrs	r5, r5, #12
 800046a:	0d64      	lsrs	r4, r4, #21
 800046c:	0524      	lsls	r4, r4, #20
 800046e:	432c      	orrs	r4, r5
 8000470:	07f6      	lsls	r6, r6, #31
 8000472:	4334      	orrs	r4, r6
 8000474:	0010      	movs	r0, r2
 8000476:	0021      	movs	r1, r4
 8000478:	b003      	add	sp, #12
 800047a:	bcf0      	pop	{r4, r5, r6, r7}
 800047c:	46bb      	mov	fp, r7
 800047e:	46b2      	mov	sl, r6
 8000480:	46a9      	mov	r9, r5
 8000482:	46a0      	mov	r8, r4
 8000484:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000486:	2a00      	cmp	r2, #0
 8000488:	d100      	bne.n	800048c <__aeabi_dadd+0x150>
 800048a:	e084      	b.n	8000596 <__aeabi_dadd+0x25a>
 800048c:	464a      	mov	r2, r9
 800048e:	1bd2      	subs	r2, r2, r7
 8000490:	2f00      	cmp	r7, #0
 8000492:	d000      	beq.n	8000496 <__aeabi_dadd+0x15a>
 8000494:	e16d      	b.n	8000772 <__aeabi_dadd+0x436>
 8000496:	0025      	movs	r5, r4
 8000498:	4305      	orrs	r5, r0
 800049a:	d100      	bne.n	800049e <__aeabi_dadd+0x162>
 800049c:	e127      	b.n	80006ee <__aeabi_dadd+0x3b2>
 800049e:	1e56      	subs	r6, r2, #1
 80004a0:	2a01      	cmp	r2, #1
 80004a2:	d100      	bne.n	80004a6 <__aeabi_dadd+0x16a>
 80004a4:	e23b      	b.n	800091e <__aeabi_dadd+0x5e2>
 80004a6:	4d87      	ldr	r5, [pc, #540]	@ (80006c4 <__aeabi_dadd+0x388>)
 80004a8:	42aa      	cmp	r2, r5
 80004aa:	d100      	bne.n	80004ae <__aeabi_dadd+0x172>
 80004ac:	e26a      	b.n	8000984 <__aeabi_dadd+0x648>
 80004ae:	2501      	movs	r5, #1
 80004b0:	2e38      	cmp	r6, #56	@ 0x38
 80004b2:	dc12      	bgt.n	80004da <__aeabi_dadd+0x19e>
 80004b4:	0032      	movs	r2, r6
 80004b6:	2a1f      	cmp	r2, #31
 80004b8:	dd00      	ble.n	80004bc <__aeabi_dadd+0x180>
 80004ba:	e1f8      	b.n	80008ae <__aeabi_dadd+0x572>
 80004bc:	2620      	movs	r6, #32
 80004be:	0025      	movs	r5, r4
 80004c0:	1ab6      	subs	r6, r6, r2
 80004c2:	0007      	movs	r7, r0
 80004c4:	4653      	mov	r3, sl
 80004c6:	40b0      	lsls	r0, r6
 80004c8:	40d4      	lsrs	r4, r2
 80004ca:	40b5      	lsls	r5, r6
 80004cc:	40d7      	lsrs	r7, r2
 80004ce:	1e46      	subs	r6, r0, #1
 80004d0:	41b0      	sbcs	r0, r6
 80004d2:	1b1b      	subs	r3, r3, r4
 80004d4:	469a      	mov	sl, r3
 80004d6:	433d      	orrs	r5, r7
 80004d8:	4305      	orrs	r5, r0
 80004da:	4662      	mov	r2, ip
 80004dc:	1b55      	subs	r5, r2, r5
 80004de:	45ac      	cmp	ip, r5
 80004e0:	4192      	sbcs	r2, r2
 80004e2:	4653      	mov	r3, sl
 80004e4:	4252      	negs	r2, r2
 80004e6:	000e      	movs	r6, r1
 80004e8:	464f      	mov	r7, r9
 80004ea:	4688      	mov	r8, r1
 80004ec:	1a9c      	subs	r4, r3, r2
 80004ee:	e778      	b.n	80003e2 <__aeabi_dadd+0xa6>
 80004f0:	2a00      	cmp	r2, #0
 80004f2:	dc00      	bgt.n	80004f6 <__aeabi_dadd+0x1ba>
 80004f4:	e08e      	b.n	8000614 <__aeabi_dadd+0x2d8>
 80004f6:	4649      	mov	r1, r9
 80004f8:	2900      	cmp	r1, #0
 80004fa:	d175      	bne.n	80005e8 <__aeabi_dadd+0x2ac>
 80004fc:	4661      	mov	r1, ip
 80004fe:	4653      	mov	r3, sl
 8000500:	4319      	orrs	r1, r3
 8000502:	d100      	bne.n	8000506 <__aeabi_dadd+0x1ca>
 8000504:	e0f6      	b.n	80006f4 <__aeabi_dadd+0x3b8>
 8000506:	1e51      	subs	r1, r2, #1
 8000508:	2a01      	cmp	r2, #1
 800050a:	d100      	bne.n	800050e <__aeabi_dadd+0x1d2>
 800050c:	e191      	b.n	8000832 <__aeabi_dadd+0x4f6>
 800050e:	4d6d      	ldr	r5, [pc, #436]	@ (80006c4 <__aeabi_dadd+0x388>)
 8000510:	42aa      	cmp	r2, r5
 8000512:	d100      	bne.n	8000516 <__aeabi_dadd+0x1da>
 8000514:	e0dc      	b.n	80006d0 <__aeabi_dadd+0x394>
 8000516:	2501      	movs	r5, #1
 8000518:	2938      	cmp	r1, #56	@ 0x38
 800051a:	dc14      	bgt.n	8000546 <__aeabi_dadd+0x20a>
 800051c:	000a      	movs	r2, r1
 800051e:	2a1f      	cmp	r2, #31
 8000520:	dd00      	ble.n	8000524 <__aeabi_dadd+0x1e8>
 8000522:	e1a2      	b.n	800086a <__aeabi_dadd+0x52e>
 8000524:	2120      	movs	r1, #32
 8000526:	4653      	mov	r3, sl
 8000528:	1a89      	subs	r1, r1, r2
 800052a:	408b      	lsls	r3, r1
 800052c:	001d      	movs	r5, r3
 800052e:	4663      	mov	r3, ip
 8000530:	40d3      	lsrs	r3, r2
 8000532:	431d      	orrs	r5, r3
 8000534:	4663      	mov	r3, ip
 8000536:	408b      	lsls	r3, r1
 8000538:	0019      	movs	r1, r3
 800053a:	1e4b      	subs	r3, r1, #1
 800053c:	4199      	sbcs	r1, r3
 800053e:	4653      	mov	r3, sl
 8000540:	40d3      	lsrs	r3, r2
 8000542:	430d      	orrs	r5, r1
 8000544:	18e4      	adds	r4, r4, r3
 8000546:	182d      	adds	r5, r5, r0
 8000548:	4285      	cmp	r5, r0
 800054a:	4180      	sbcs	r0, r0
 800054c:	4240      	negs	r0, r0
 800054e:	1824      	adds	r4, r4, r0
 8000550:	0223      	lsls	r3, r4, #8
 8000552:	d559      	bpl.n	8000608 <__aeabi_dadd+0x2cc>
 8000554:	4b5b      	ldr	r3, [pc, #364]	@ (80006c4 <__aeabi_dadd+0x388>)
 8000556:	3701      	adds	r7, #1
 8000558:	429f      	cmp	r7, r3
 800055a:	d051      	beq.n	8000600 <__aeabi_dadd+0x2c4>
 800055c:	2101      	movs	r1, #1
 800055e:	4b5a      	ldr	r3, [pc, #360]	@ (80006c8 <__aeabi_dadd+0x38c>)
 8000560:	086a      	lsrs	r2, r5, #1
 8000562:	401c      	ands	r4, r3
 8000564:	4029      	ands	r1, r5
 8000566:	430a      	orrs	r2, r1
 8000568:	07e5      	lsls	r5, r4, #31
 800056a:	4315      	orrs	r5, r2
 800056c:	0864      	lsrs	r4, r4, #1
 800056e:	e75f      	b.n	8000430 <__aeabi_dadd+0xf4>
 8000570:	4661      	mov	r1, ip
 8000572:	4653      	mov	r3, sl
 8000574:	4319      	orrs	r1, r3
 8000576:	d100      	bne.n	800057a <__aeabi_dadd+0x23e>
 8000578:	e0bc      	b.n	80006f4 <__aeabi_dadd+0x3b8>
 800057a:	1e51      	subs	r1, r2, #1
 800057c:	2a01      	cmp	r2, #1
 800057e:	d100      	bne.n	8000582 <__aeabi_dadd+0x246>
 8000580:	e164      	b.n	800084c <__aeabi_dadd+0x510>
 8000582:	4d50      	ldr	r5, [pc, #320]	@ (80006c4 <__aeabi_dadd+0x388>)
 8000584:	42aa      	cmp	r2, r5
 8000586:	d100      	bne.n	800058a <__aeabi_dadd+0x24e>
 8000588:	e16a      	b.n	8000860 <__aeabi_dadd+0x524>
 800058a:	2501      	movs	r5, #1
 800058c:	2938      	cmp	r1, #56	@ 0x38
 800058e:	dd00      	ble.n	8000592 <__aeabi_dadd+0x256>
 8000590:	e722      	b.n	80003d8 <__aeabi_dadd+0x9c>
 8000592:	000a      	movs	r2, r1
 8000594:	e70e      	b.n	80003b4 <__aeabi_dadd+0x78>
 8000596:	4a4d      	ldr	r2, [pc, #308]	@ (80006cc <__aeabi_dadd+0x390>)
 8000598:	1c7d      	adds	r5, r7, #1
 800059a:	4215      	tst	r5, r2
 800059c:	d000      	beq.n	80005a0 <__aeabi_dadd+0x264>
 800059e:	e0d0      	b.n	8000742 <__aeabi_dadd+0x406>
 80005a0:	0025      	movs	r5, r4
 80005a2:	4662      	mov	r2, ip
 80005a4:	4653      	mov	r3, sl
 80005a6:	4305      	orrs	r5, r0
 80005a8:	431a      	orrs	r2, r3
 80005aa:	2f00      	cmp	r7, #0
 80005ac:	d000      	beq.n	80005b0 <__aeabi_dadd+0x274>
 80005ae:	e137      	b.n	8000820 <__aeabi_dadd+0x4e4>
 80005b0:	2d00      	cmp	r5, #0
 80005b2:	d100      	bne.n	80005b6 <__aeabi_dadd+0x27a>
 80005b4:	e1a8      	b.n	8000908 <__aeabi_dadd+0x5cc>
 80005b6:	2a00      	cmp	r2, #0
 80005b8:	d100      	bne.n	80005bc <__aeabi_dadd+0x280>
 80005ba:	e16a      	b.n	8000892 <__aeabi_dadd+0x556>
 80005bc:	4663      	mov	r3, ip
 80005be:	1ac5      	subs	r5, r0, r3
 80005c0:	4653      	mov	r3, sl
 80005c2:	1ae2      	subs	r2, r4, r3
 80005c4:	42a8      	cmp	r0, r5
 80005c6:	419b      	sbcs	r3, r3
 80005c8:	425b      	negs	r3, r3
 80005ca:	1ad3      	subs	r3, r2, r3
 80005cc:	021a      	lsls	r2, r3, #8
 80005ce:	d400      	bmi.n	80005d2 <__aeabi_dadd+0x296>
 80005d0:	e203      	b.n	80009da <__aeabi_dadd+0x69e>
 80005d2:	4663      	mov	r3, ip
 80005d4:	1a1d      	subs	r5, r3, r0
 80005d6:	45ac      	cmp	ip, r5
 80005d8:	4192      	sbcs	r2, r2
 80005da:	4653      	mov	r3, sl
 80005dc:	4252      	negs	r2, r2
 80005de:	1b1c      	subs	r4, r3, r4
 80005e0:	000e      	movs	r6, r1
 80005e2:	4688      	mov	r8, r1
 80005e4:	1aa4      	subs	r4, r4, r2
 80005e6:	e723      	b.n	8000430 <__aeabi_dadd+0xf4>
 80005e8:	4936      	ldr	r1, [pc, #216]	@ (80006c4 <__aeabi_dadd+0x388>)
 80005ea:	428f      	cmp	r7, r1
 80005ec:	d070      	beq.n	80006d0 <__aeabi_dadd+0x394>
 80005ee:	2501      	movs	r5, #1
 80005f0:	2a38      	cmp	r2, #56	@ 0x38
 80005f2:	dca8      	bgt.n	8000546 <__aeabi_dadd+0x20a>
 80005f4:	2180      	movs	r1, #128	@ 0x80
 80005f6:	4653      	mov	r3, sl
 80005f8:	0409      	lsls	r1, r1, #16
 80005fa:	430b      	orrs	r3, r1
 80005fc:	469a      	mov	sl, r3
 80005fe:	e78e      	b.n	800051e <__aeabi_dadd+0x1e2>
 8000600:	003c      	movs	r4, r7
 8000602:	2500      	movs	r5, #0
 8000604:	2200      	movs	r2, #0
 8000606:	e731      	b.n	800046c <__aeabi_dadd+0x130>
 8000608:	2307      	movs	r3, #7
 800060a:	402b      	ands	r3, r5
 800060c:	2b00      	cmp	r3, #0
 800060e:	d000      	beq.n	8000612 <__aeabi_dadd+0x2d6>
 8000610:	e710      	b.n	8000434 <__aeabi_dadd+0xf8>
 8000612:	e093      	b.n	800073c <__aeabi_dadd+0x400>
 8000614:	2a00      	cmp	r2, #0
 8000616:	d074      	beq.n	8000702 <__aeabi_dadd+0x3c6>
 8000618:	464a      	mov	r2, r9
 800061a:	1bd2      	subs	r2, r2, r7
 800061c:	2f00      	cmp	r7, #0
 800061e:	d100      	bne.n	8000622 <__aeabi_dadd+0x2e6>
 8000620:	e0c7      	b.n	80007b2 <__aeabi_dadd+0x476>
 8000622:	4928      	ldr	r1, [pc, #160]	@ (80006c4 <__aeabi_dadd+0x388>)
 8000624:	4589      	cmp	r9, r1
 8000626:	d100      	bne.n	800062a <__aeabi_dadd+0x2ee>
 8000628:	e185      	b.n	8000936 <__aeabi_dadd+0x5fa>
 800062a:	2501      	movs	r5, #1
 800062c:	2a38      	cmp	r2, #56	@ 0x38
 800062e:	dc12      	bgt.n	8000656 <__aeabi_dadd+0x31a>
 8000630:	2180      	movs	r1, #128	@ 0x80
 8000632:	0409      	lsls	r1, r1, #16
 8000634:	430c      	orrs	r4, r1
 8000636:	2a1f      	cmp	r2, #31
 8000638:	dd00      	ble.n	800063c <__aeabi_dadd+0x300>
 800063a:	e1ab      	b.n	8000994 <__aeabi_dadd+0x658>
 800063c:	2120      	movs	r1, #32
 800063e:	0025      	movs	r5, r4
 8000640:	1a89      	subs	r1, r1, r2
 8000642:	0007      	movs	r7, r0
 8000644:	4088      	lsls	r0, r1
 8000646:	408d      	lsls	r5, r1
 8000648:	40d7      	lsrs	r7, r2
 800064a:	1e41      	subs	r1, r0, #1
 800064c:	4188      	sbcs	r0, r1
 800064e:	40d4      	lsrs	r4, r2
 8000650:	433d      	orrs	r5, r7
 8000652:	4305      	orrs	r5, r0
 8000654:	44a2      	add	sl, r4
 8000656:	4465      	add	r5, ip
 8000658:	4565      	cmp	r5, ip
 800065a:	4192      	sbcs	r2, r2
 800065c:	4252      	negs	r2, r2
 800065e:	4452      	add	r2, sl
 8000660:	0014      	movs	r4, r2
 8000662:	464f      	mov	r7, r9
 8000664:	e774      	b.n	8000550 <__aeabi_dadd+0x214>
 8000666:	0028      	movs	r0, r5
 8000668:	f001 f9e8 	bl	8001a3c <__clzsi2>
 800066c:	0003      	movs	r3, r0
 800066e:	3318      	adds	r3, #24
 8000670:	2b1f      	cmp	r3, #31
 8000672:	dc00      	bgt.n	8000676 <__aeabi_dadd+0x33a>
 8000674:	e6c2      	b.n	80003fc <__aeabi_dadd+0xc0>
 8000676:	002a      	movs	r2, r5
 8000678:	3808      	subs	r0, #8
 800067a:	4082      	lsls	r2, r0
 800067c:	429f      	cmp	r7, r3
 800067e:	dd00      	ble.n	8000682 <__aeabi_dadd+0x346>
 8000680:	e0a9      	b.n	80007d6 <__aeabi_dadd+0x49a>
 8000682:	1bdb      	subs	r3, r3, r7
 8000684:	1c58      	adds	r0, r3, #1
 8000686:	281f      	cmp	r0, #31
 8000688:	dc00      	bgt.n	800068c <__aeabi_dadd+0x350>
 800068a:	e1ac      	b.n	80009e6 <__aeabi_dadd+0x6aa>
 800068c:	0015      	movs	r5, r2
 800068e:	3b1f      	subs	r3, #31
 8000690:	40dd      	lsrs	r5, r3
 8000692:	2820      	cmp	r0, #32
 8000694:	d005      	beq.n	80006a2 <__aeabi_dadd+0x366>
 8000696:	2340      	movs	r3, #64	@ 0x40
 8000698:	1a1b      	subs	r3, r3, r0
 800069a:	409a      	lsls	r2, r3
 800069c:	1e53      	subs	r3, r2, #1
 800069e:	419a      	sbcs	r2, r3
 80006a0:	4315      	orrs	r5, r2
 80006a2:	2307      	movs	r3, #7
 80006a4:	2700      	movs	r7, #0
 80006a6:	402b      	ands	r3, r5
 80006a8:	e7b0      	b.n	800060c <__aeabi_dadd+0x2d0>
 80006aa:	08ed      	lsrs	r5, r5, #3
 80006ac:	4b05      	ldr	r3, [pc, #20]	@ (80006c4 <__aeabi_dadd+0x388>)
 80006ae:	0762      	lsls	r2, r4, #29
 80006b0:	432a      	orrs	r2, r5
 80006b2:	08e4      	lsrs	r4, r4, #3
 80006b4:	429f      	cmp	r7, r3
 80006b6:	d00f      	beq.n	80006d8 <__aeabi_dadd+0x39c>
 80006b8:	0324      	lsls	r4, r4, #12
 80006ba:	0b25      	lsrs	r5, r4, #12
 80006bc:	057c      	lsls	r4, r7, #21
 80006be:	0d64      	lsrs	r4, r4, #21
 80006c0:	e6d4      	b.n	800046c <__aeabi_dadd+0x130>
 80006c2:	46c0      	nop			@ (mov r8, r8)
 80006c4:	000007ff 	.word	0x000007ff
 80006c8:	ff7fffff 	.word	0xff7fffff
 80006cc:	000007fe 	.word	0x000007fe
 80006d0:	08c0      	lsrs	r0, r0, #3
 80006d2:	0762      	lsls	r2, r4, #29
 80006d4:	4302      	orrs	r2, r0
 80006d6:	08e4      	lsrs	r4, r4, #3
 80006d8:	0013      	movs	r3, r2
 80006da:	4323      	orrs	r3, r4
 80006dc:	d100      	bne.n	80006e0 <__aeabi_dadd+0x3a4>
 80006de:	e186      	b.n	80009ee <__aeabi_dadd+0x6b2>
 80006e0:	2580      	movs	r5, #128	@ 0x80
 80006e2:	032d      	lsls	r5, r5, #12
 80006e4:	4325      	orrs	r5, r4
 80006e6:	032d      	lsls	r5, r5, #12
 80006e8:	4cc3      	ldr	r4, [pc, #780]	@ (80009f8 <__aeabi_dadd+0x6bc>)
 80006ea:	0b2d      	lsrs	r5, r5, #12
 80006ec:	e6be      	b.n	800046c <__aeabi_dadd+0x130>
 80006ee:	4660      	mov	r0, ip
 80006f0:	4654      	mov	r4, sl
 80006f2:	000e      	movs	r6, r1
 80006f4:	0017      	movs	r7, r2
 80006f6:	08c5      	lsrs	r5, r0, #3
 80006f8:	e7d8      	b.n	80006ac <__aeabi_dadd+0x370>
 80006fa:	4cc0      	ldr	r4, [pc, #768]	@ (80009fc <__aeabi_dadd+0x6c0>)
 80006fc:	1aff      	subs	r7, r7, r3
 80006fe:	4014      	ands	r4, r2
 8000700:	e696      	b.n	8000430 <__aeabi_dadd+0xf4>
 8000702:	4abf      	ldr	r2, [pc, #764]	@ (8000a00 <__aeabi_dadd+0x6c4>)
 8000704:	1c79      	adds	r1, r7, #1
 8000706:	4211      	tst	r1, r2
 8000708:	d16b      	bne.n	80007e2 <__aeabi_dadd+0x4a6>
 800070a:	0022      	movs	r2, r4
 800070c:	4302      	orrs	r2, r0
 800070e:	2f00      	cmp	r7, #0
 8000710:	d000      	beq.n	8000714 <__aeabi_dadd+0x3d8>
 8000712:	e0db      	b.n	80008cc <__aeabi_dadd+0x590>
 8000714:	2a00      	cmp	r2, #0
 8000716:	d100      	bne.n	800071a <__aeabi_dadd+0x3de>
 8000718:	e12d      	b.n	8000976 <__aeabi_dadd+0x63a>
 800071a:	4662      	mov	r2, ip
 800071c:	4653      	mov	r3, sl
 800071e:	431a      	orrs	r2, r3
 8000720:	d100      	bne.n	8000724 <__aeabi_dadd+0x3e8>
 8000722:	e0b6      	b.n	8000892 <__aeabi_dadd+0x556>
 8000724:	4663      	mov	r3, ip
 8000726:	18c5      	adds	r5, r0, r3
 8000728:	4285      	cmp	r5, r0
 800072a:	4180      	sbcs	r0, r0
 800072c:	4454      	add	r4, sl
 800072e:	4240      	negs	r0, r0
 8000730:	1824      	adds	r4, r4, r0
 8000732:	0223      	lsls	r3, r4, #8
 8000734:	d502      	bpl.n	800073c <__aeabi_dadd+0x400>
 8000736:	000f      	movs	r7, r1
 8000738:	4bb0      	ldr	r3, [pc, #704]	@ (80009fc <__aeabi_dadd+0x6c0>)
 800073a:	401c      	ands	r4, r3
 800073c:	003a      	movs	r2, r7
 800073e:	0028      	movs	r0, r5
 8000740:	e7d8      	b.n	80006f4 <__aeabi_dadd+0x3b8>
 8000742:	4662      	mov	r2, ip
 8000744:	1a85      	subs	r5, r0, r2
 8000746:	42a8      	cmp	r0, r5
 8000748:	4192      	sbcs	r2, r2
 800074a:	4653      	mov	r3, sl
 800074c:	4252      	negs	r2, r2
 800074e:	4691      	mov	r9, r2
 8000750:	1ae3      	subs	r3, r4, r3
 8000752:	001a      	movs	r2, r3
 8000754:	464b      	mov	r3, r9
 8000756:	1ad2      	subs	r2, r2, r3
 8000758:	0013      	movs	r3, r2
 800075a:	4691      	mov	r9, r2
 800075c:	021a      	lsls	r2, r3, #8
 800075e:	d454      	bmi.n	800080a <__aeabi_dadd+0x4ce>
 8000760:	464a      	mov	r2, r9
 8000762:	464c      	mov	r4, r9
 8000764:	432a      	orrs	r2, r5
 8000766:	d000      	beq.n	800076a <__aeabi_dadd+0x42e>
 8000768:	e640      	b.n	80003ec <__aeabi_dadd+0xb0>
 800076a:	2600      	movs	r6, #0
 800076c:	2400      	movs	r4, #0
 800076e:	2500      	movs	r5, #0
 8000770:	e67c      	b.n	800046c <__aeabi_dadd+0x130>
 8000772:	4da1      	ldr	r5, [pc, #644]	@ (80009f8 <__aeabi_dadd+0x6bc>)
 8000774:	45a9      	cmp	r9, r5
 8000776:	d100      	bne.n	800077a <__aeabi_dadd+0x43e>
 8000778:	e090      	b.n	800089c <__aeabi_dadd+0x560>
 800077a:	2501      	movs	r5, #1
 800077c:	2a38      	cmp	r2, #56	@ 0x38
 800077e:	dd00      	ble.n	8000782 <__aeabi_dadd+0x446>
 8000780:	e6ab      	b.n	80004da <__aeabi_dadd+0x19e>
 8000782:	2580      	movs	r5, #128	@ 0x80
 8000784:	042d      	lsls	r5, r5, #16
 8000786:	432c      	orrs	r4, r5
 8000788:	e695      	b.n	80004b6 <__aeabi_dadd+0x17a>
 800078a:	0011      	movs	r1, r2
 800078c:	4655      	mov	r5, sl
 800078e:	3920      	subs	r1, #32
 8000790:	40cd      	lsrs	r5, r1
 8000792:	46a9      	mov	r9, r5
 8000794:	2a20      	cmp	r2, #32
 8000796:	d006      	beq.n	80007a6 <__aeabi_dadd+0x46a>
 8000798:	2140      	movs	r1, #64	@ 0x40
 800079a:	4653      	mov	r3, sl
 800079c:	1a8a      	subs	r2, r1, r2
 800079e:	4093      	lsls	r3, r2
 80007a0:	4662      	mov	r2, ip
 80007a2:	431a      	orrs	r2, r3
 80007a4:	4694      	mov	ip, r2
 80007a6:	4665      	mov	r5, ip
 80007a8:	1e6b      	subs	r3, r5, #1
 80007aa:	419d      	sbcs	r5, r3
 80007ac:	464b      	mov	r3, r9
 80007ae:	431d      	orrs	r5, r3
 80007b0:	e612      	b.n	80003d8 <__aeabi_dadd+0x9c>
 80007b2:	0021      	movs	r1, r4
 80007b4:	4301      	orrs	r1, r0
 80007b6:	d100      	bne.n	80007ba <__aeabi_dadd+0x47e>
 80007b8:	e0c4      	b.n	8000944 <__aeabi_dadd+0x608>
 80007ba:	1e51      	subs	r1, r2, #1
 80007bc:	2a01      	cmp	r2, #1
 80007be:	d100      	bne.n	80007c2 <__aeabi_dadd+0x486>
 80007c0:	e0fb      	b.n	80009ba <__aeabi_dadd+0x67e>
 80007c2:	4d8d      	ldr	r5, [pc, #564]	@ (80009f8 <__aeabi_dadd+0x6bc>)
 80007c4:	42aa      	cmp	r2, r5
 80007c6:	d100      	bne.n	80007ca <__aeabi_dadd+0x48e>
 80007c8:	e0b5      	b.n	8000936 <__aeabi_dadd+0x5fa>
 80007ca:	2501      	movs	r5, #1
 80007cc:	2938      	cmp	r1, #56	@ 0x38
 80007ce:	dd00      	ble.n	80007d2 <__aeabi_dadd+0x496>
 80007d0:	e741      	b.n	8000656 <__aeabi_dadd+0x31a>
 80007d2:	000a      	movs	r2, r1
 80007d4:	e72f      	b.n	8000636 <__aeabi_dadd+0x2fa>
 80007d6:	4c89      	ldr	r4, [pc, #548]	@ (80009fc <__aeabi_dadd+0x6c0>)
 80007d8:	1aff      	subs	r7, r7, r3
 80007da:	4014      	ands	r4, r2
 80007dc:	0762      	lsls	r2, r4, #29
 80007de:	08e4      	lsrs	r4, r4, #3
 80007e0:	e76a      	b.n	80006b8 <__aeabi_dadd+0x37c>
 80007e2:	4a85      	ldr	r2, [pc, #532]	@ (80009f8 <__aeabi_dadd+0x6bc>)
 80007e4:	4291      	cmp	r1, r2
 80007e6:	d100      	bne.n	80007ea <__aeabi_dadd+0x4ae>
 80007e8:	e0e3      	b.n	80009b2 <__aeabi_dadd+0x676>
 80007ea:	4663      	mov	r3, ip
 80007ec:	18c2      	adds	r2, r0, r3
 80007ee:	4282      	cmp	r2, r0
 80007f0:	4180      	sbcs	r0, r0
 80007f2:	0023      	movs	r3, r4
 80007f4:	4240      	negs	r0, r0
 80007f6:	4453      	add	r3, sl
 80007f8:	181b      	adds	r3, r3, r0
 80007fa:	07dd      	lsls	r5, r3, #31
 80007fc:	085c      	lsrs	r4, r3, #1
 80007fe:	2307      	movs	r3, #7
 8000800:	0852      	lsrs	r2, r2, #1
 8000802:	4315      	orrs	r5, r2
 8000804:	000f      	movs	r7, r1
 8000806:	402b      	ands	r3, r5
 8000808:	e700      	b.n	800060c <__aeabi_dadd+0x2d0>
 800080a:	4663      	mov	r3, ip
 800080c:	1a1d      	subs	r5, r3, r0
 800080e:	45ac      	cmp	ip, r5
 8000810:	4192      	sbcs	r2, r2
 8000812:	4653      	mov	r3, sl
 8000814:	4252      	negs	r2, r2
 8000816:	1b1c      	subs	r4, r3, r4
 8000818:	000e      	movs	r6, r1
 800081a:	4688      	mov	r8, r1
 800081c:	1aa4      	subs	r4, r4, r2
 800081e:	e5e5      	b.n	80003ec <__aeabi_dadd+0xb0>
 8000820:	2d00      	cmp	r5, #0
 8000822:	d000      	beq.n	8000826 <__aeabi_dadd+0x4ea>
 8000824:	e091      	b.n	800094a <__aeabi_dadd+0x60e>
 8000826:	2a00      	cmp	r2, #0
 8000828:	d138      	bne.n	800089c <__aeabi_dadd+0x560>
 800082a:	2480      	movs	r4, #128	@ 0x80
 800082c:	2600      	movs	r6, #0
 800082e:	0324      	lsls	r4, r4, #12
 8000830:	e756      	b.n	80006e0 <__aeabi_dadd+0x3a4>
 8000832:	4663      	mov	r3, ip
 8000834:	18c5      	adds	r5, r0, r3
 8000836:	4285      	cmp	r5, r0
 8000838:	4180      	sbcs	r0, r0
 800083a:	4454      	add	r4, sl
 800083c:	4240      	negs	r0, r0
 800083e:	1824      	adds	r4, r4, r0
 8000840:	2701      	movs	r7, #1
 8000842:	0223      	lsls	r3, r4, #8
 8000844:	d400      	bmi.n	8000848 <__aeabi_dadd+0x50c>
 8000846:	e6df      	b.n	8000608 <__aeabi_dadd+0x2cc>
 8000848:	2702      	movs	r7, #2
 800084a:	e687      	b.n	800055c <__aeabi_dadd+0x220>
 800084c:	4663      	mov	r3, ip
 800084e:	1ac5      	subs	r5, r0, r3
 8000850:	42a8      	cmp	r0, r5
 8000852:	4180      	sbcs	r0, r0
 8000854:	4653      	mov	r3, sl
 8000856:	4240      	negs	r0, r0
 8000858:	1ae4      	subs	r4, r4, r3
 800085a:	2701      	movs	r7, #1
 800085c:	1a24      	subs	r4, r4, r0
 800085e:	e5c0      	b.n	80003e2 <__aeabi_dadd+0xa6>
 8000860:	0762      	lsls	r2, r4, #29
 8000862:	08c0      	lsrs	r0, r0, #3
 8000864:	4302      	orrs	r2, r0
 8000866:	08e4      	lsrs	r4, r4, #3
 8000868:	e736      	b.n	80006d8 <__aeabi_dadd+0x39c>
 800086a:	0011      	movs	r1, r2
 800086c:	4653      	mov	r3, sl
 800086e:	3920      	subs	r1, #32
 8000870:	40cb      	lsrs	r3, r1
 8000872:	4699      	mov	r9, r3
 8000874:	2a20      	cmp	r2, #32
 8000876:	d006      	beq.n	8000886 <__aeabi_dadd+0x54a>
 8000878:	2140      	movs	r1, #64	@ 0x40
 800087a:	4653      	mov	r3, sl
 800087c:	1a8a      	subs	r2, r1, r2
 800087e:	4093      	lsls	r3, r2
 8000880:	4662      	mov	r2, ip
 8000882:	431a      	orrs	r2, r3
 8000884:	4694      	mov	ip, r2
 8000886:	4665      	mov	r5, ip
 8000888:	1e6b      	subs	r3, r5, #1
 800088a:	419d      	sbcs	r5, r3
 800088c:	464b      	mov	r3, r9
 800088e:	431d      	orrs	r5, r3
 8000890:	e659      	b.n	8000546 <__aeabi_dadd+0x20a>
 8000892:	0762      	lsls	r2, r4, #29
 8000894:	08c0      	lsrs	r0, r0, #3
 8000896:	4302      	orrs	r2, r0
 8000898:	08e4      	lsrs	r4, r4, #3
 800089a:	e70d      	b.n	80006b8 <__aeabi_dadd+0x37c>
 800089c:	4653      	mov	r3, sl
 800089e:	075a      	lsls	r2, r3, #29
 80008a0:	4663      	mov	r3, ip
 80008a2:	08d8      	lsrs	r0, r3, #3
 80008a4:	4653      	mov	r3, sl
 80008a6:	000e      	movs	r6, r1
 80008a8:	4302      	orrs	r2, r0
 80008aa:	08dc      	lsrs	r4, r3, #3
 80008ac:	e714      	b.n	80006d8 <__aeabi_dadd+0x39c>
 80008ae:	0015      	movs	r5, r2
 80008b0:	0026      	movs	r6, r4
 80008b2:	3d20      	subs	r5, #32
 80008b4:	40ee      	lsrs	r6, r5
 80008b6:	2a20      	cmp	r2, #32
 80008b8:	d003      	beq.n	80008c2 <__aeabi_dadd+0x586>
 80008ba:	2540      	movs	r5, #64	@ 0x40
 80008bc:	1aaa      	subs	r2, r5, r2
 80008be:	4094      	lsls	r4, r2
 80008c0:	4320      	orrs	r0, r4
 80008c2:	1e42      	subs	r2, r0, #1
 80008c4:	4190      	sbcs	r0, r2
 80008c6:	0005      	movs	r5, r0
 80008c8:	4335      	orrs	r5, r6
 80008ca:	e606      	b.n	80004da <__aeabi_dadd+0x19e>
 80008cc:	2a00      	cmp	r2, #0
 80008ce:	d07c      	beq.n	80009ca <__aeabi_dadd+0x68e>
 80008d0:	4662      	mov	r2, ip
 80008d2:	4653      	mov	r3, sl
 80008d4:	08c0      	lsrs	r0, r0, #3
 80008d6:	431a      	orrs	r2, r3
 80008d8:	d100      	bne.n	80008dc <__aeabi_dadd+0x5a0>
 80008da:	e6fa      	b.n	80006d2 <__aeabi_dadd+0x396>
 80008dc:	0762      	lsls	r2, r4, #29
 80008de:	4310      	orrs	r0, r2
 80008e0:	2280      	movs	r2, #128	@ 0x80
 80008e2:	08e4      	lsrs	r4, r4, #3
 80008e4:	0312      	lsls	r2, r2, #12
 80008e6:	4214      	tst	r4, r2
 80008e8:	d008      	beq.n	80008fc <__aeabi_dadd+0x5c0>
 80008ea:	08d9      	lsrs	r1, r3, #3
 80008ec:	4211      	tst	r1, r2
 80008ee:	d105      	bne.n	80008fc <__aeabi_dadd+0x5c0>
 80008f0:	4663      	mov	r3, ip
 80008f2:	08d8      	lsrs	r0, r3, #3
 80008f4:	4653      	mov	r3, sl
 80008f6:	000c      	movs	r4, r1
 80008f8:	075b      	lsls	r3, r3, #29
 80008fa:	4318      	orrs	r0, r3
 80008fc:	0f42      	lsrs	r2, r0, #29
 80008fe:	00c0      	lsls	r0, r0, #3
 8000900:	08c0      	lsrs	r0, r0, #3
 8000902:	0752      	lsls	r2, r2, #29
 8000904:	4302      	orrs	r2, r0
 8000906:	e6e7      	b.n	80006d8 <__aeabi_dadd+0x39c>
 8000908:	2a00      	cmp	r2, #0
 800090a:	d100      	bne.n	800090e <__aeabi_dadd+0x5d2>
 800090c:	e72d      	b.n	800076a <__aeabi_dadd+0x42e>
 800090e:	4663      	mov	r3, ip
 8000910:	08d8      	lsrs	r0, r3, #3
 8000912:	4653      	mov	r3, sl
 8000914:	075a      	lsls	r2, r3, #29
 8000916:	000e      	movs	r6, r1
 8000918:	4302      	orrs	r2, r0
 800091a:	08dc      	lsrs	r4, r3, #3
 800091c:	e6cc      	b.n	80006b8 <__aeabi_dadd+0x37c>
 800091e:	4663      	mov	r3, ip
 8000920:	1a1d      	subs	r5, r3, r0
 8000922:	45ac      	cmp	ip, r5
 8000924:	4192      	sbcs	r2, r2
 8000926:	4653      	mov	r3, sl
 8000928:	4252      	negs	r2, r2
 800092a:	1b1c      	subs	r4, r3, r4
 800092c:	000e      	movs	r6, r1
 800092e:	4688      	mov	r8, r1
 8000930:	1aa4      	subs	r4, r4, r2
 8000932:	3701      	adds	r7, #1
 8000934:	e555      	b.n	80003e2 <__aeabi_dadd+0xa6>
 8000936:	4663      	mov	r3, ip
 8000938:	08d9      	lsrs	r1, r3, #3
 800093a:	4653      	mov	r3, sl
 800093c:	075a      	lsls	r2, r3, #29
 800093e:	430a      	orrs	r2, r1
 8000940:	08dc      	lsrs	r4, r3, #3
 8000942:	e6c9      	b.n	80006d8 <__aeabi_dadd+0x39c>
 8000944:	4660      	mov	r0, ip
 8000946:	4654      	mov	r4, sl
 8000948:	e6d4      	b.n	80006f4 <__aeabi_dadd+0x3b8>
 800094a:	08c0      	lsrs	r0, r0, #3
 800094c:	2a00      	cmp	r2, #0
 800094e:	d100      	bne.n	8000952 <__aeabi_dadd+0x616>
 8000950:	e6bf      	b.n	80006d2 <__aeabi_dadd+0x396>
 8000952:	0762      	lsls	r2, r4, #29
 8000954:	4310      	orrs	r0, r2
 8000956:	2280      	movs	r2, #128	@ 0x80
 8000958:	08e4      	lsrs	r4, r4, #3
 800095a:	0312      	lsls	r2, r2, #12
 800095c:	4214      	tst	r4, r2
 800095e:	d0cd      	beq.n	80008fc <__aeabi_dadd+0x5c0>
 8000960:	08dd      	lsrs	r5, r3, #3
 8000962:	4215      	tst	r5, r2
 8000964:	d1ca      	bne.n	80008fc <__aeabi_dadd+0x5c0>
 8000966:	4663      	mov	r3, ip
 8000968:	08d8      	lsrs	r0, r3, #3
 800096a:	4653      	mov	r3, sl
 800096c:	075b      	lsls	r3, r3, #29
 800096e:	000e      	movs	r6, r1
 8000970:	002c      	movs	r4, r5
 8000972:	4318      	orrs	r0, r3
 8000974:	e7c2      	b.n	80008fc <__aeabi_dadd+0x5c0>
 8000976:	4663      	mov	r3, ip
 8000978:	08d9      	lsrs	r1, r3, #3
 800097a:	4653      	mov	r3, sl
 800097c:	075a      	lsls	r2, r3, #29
 800097e:	430a      	orrs	r2, r1
 8000980:	08dc      	lsrs	r4, r3, #3
 8000982:	e699      	b.n	80006b8 <__aeabi_dadd+0x37c>
 8000984:	4663      	mov	r3, ip
 8000986:	08d8      	lsrs	r0, r3, #3
 8000988:	4653      	mov	r3, sl
 800098a:	075a      	lsls	r2, r3, #29
 800098c:	000e      	movs	r6, r1
 800098e:	4302      	orrs	r2, r0
 8000990:	08dc      	lsrs	r4, r3, #3
 8000992:	e6a1      	b.n	80006d8 <__aeabi_dadd+0x39c>
 8000994:	0011      	movs	r1, r2
 8000996:	0027      	movs	r7, r4
 8000998:	3920      	subs	r1, #32
 800099a:	40cf      	lsrs	r7, r1
 800099c:	2a20      	cmp	r2, #32
 800099e:	d003      	beq.n	80009a8 <__aeabi_dadd+0x66c>
 80009a0:	2140      	movs	r1, #64	@ 0x40
 80009a2:	1a8a      	subs	r2, r1, r2
 80009a4:	4094      	lsls	r4, r2
 80009a6:	4320      	orrs	r0, r4
 80009a8:	1e42      	subs	r2, r0, #1
 80009aa:	4190      	sbcs	r0, r2
 80009ac:	0005      	movs	r5, r0
 80009ae:	433d      	orrs	r5, r7
 80009b0:	e651      	b.n	8000656 <__aeabi_dadd+0x31a>
 80009b2:	000c      	movs	r4, r1
 80009b4:	2500      	movs	r5, #0
 80009b6:	2200      	movs	r2, #0
 80009b8:	e558      	b.n	800046c <__aeabi_dadd+0x130>
 80009ba:	4460      	add	r0, ip
 80009bc:	4560      	cmp	r0, ip
 80009be:	4192      	sbcs	r2, r2
 80009c0:	4454      	add	r4, sl
 80009c2:	4252      	negs	r2, r2
 80009c4:	0005      	movs	r5, r0
 80009c6:	18a4      	adds	r4, r4, r2
 80009c8:	e73a      	b.n	8000840 <__aeabi_dadd+0x504>
 80009ca:	4653      	mov	r3, sl
 80009cc:	075a      	lsls	r2, r3, #29
 80009ce:	4663      	mov	r3, ip
 80009d0:	08d9      	lsrs	r1, r3, #3
 80009d2:	4653      	mov	r3, sl
 80009d4:	430a      	orrs	r2, r1
 80009d6:	08dc      	lsrs	r4, r3, #3
 80009d8:	e67e      	b.n	80006d8 <__aeabi_dadd+0x39c>
 80009da:	001a      	movs	r2, r3
 80009dc:	001c      	movs	r4, r3
 80009de:	432a      	orrs	r2, r5
 80009e0:	d000      	beq.n	80009e4 <__aeabi_dadd+0x6a8>
 80009e2:	e6ab      	b.n	800073c <__aeabi_dadd+0x400>
 80009e4:	e6c1      	b.n	800076a <__aeabi_dadd+0x42e>
 80009e6:	2120      	movs	r1, #32
 80009e8:	2500      	movs	r5, #0
 80009ea:	1a09      	subs	r1, r1, r0
 80009ec:	e519      	b.n	8000422 <__aeabi_dadd+0xe6>
 80009ee:	2200      	movs	r2, #0
 80009f0:	2500      	movs	r5, #0
 80009f2:	4c01      	ldr	r4, [pc, #4]	@ (80009f8 <__aeabi_dadd+0x6bc>)
 80009f4:	e53a      	b.n	800046c <__aeabi_dadd+0x130>
 80009f6:	46c0      	nop			@ (mov r8, r8)
 80009f8:	000007ff 	.word	0x000007ff
 80009fc:	ff7fffff 	.word	0xff7fffff
 8000a00:	000007fe 	.word	0x000007fe

08000a04 <__eqdf2>:
 8000a04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a06:	4657      	mov	r7, sl
 8000a08:	46de      	mov	lr, fp
 8000a0a:	464e      	mov	r6, r9
 8000a0c:	4645      	mov	r5, r8
 8000a0e:	b5e0      	push	{r5, r6, r7, lr}
 8000a10:	000d      	movs	r5, r1
 8000a12:	0004      	movs	r4, r0
 8000a14:	0fe8      	lsrs	r0, r5, #31
 8000a16:	4683      	mov	fp, r0
 8000a18:	0309      	lsls	r1, r1, #12
 8000a1a:	0fd8      	lsrs	r0, r3, #31
 8000a1c:	0b09      	lsrs	r1, r1, #12
 8000a1e:	4682      	mov	sl, r0
 8000a20:	4819      	ldr	r0, [pc, #100]	@ (8000a88 <__eqdf2+0x84>)
 8000a22:	468c      	mov	ip, r1
 8000a24:	031f      	lsls	r7, r3, #12
 8000a26:	0069      	lsls	r1, r5, #1
 8000a28:	005e      	lsls	r6, r3, #1
 8000a2a:	0d49      	lsrs	r1, r1, #21
 8000a2c:	0b3f      	lsrs	r7, r7, #12
 8000a2e:	0d76      	lsrs	r6, r6, #21
 8000a30:	4281      	cmp	r1, r0
 8000a32:	d018      	beq.n	8000a66 <__eqdf2+0x62>
 8000a34:	4286      	cmp	r6, r0
 8000a36:	d00f      	beq.n	8000a58 <__eqdf2+0x54>
 8000a38:	2001      	movs	r0, #1
 8000a3a:	42b1      	cmp	r1, r6
 8000a3c:	d10d      	bne.n	8000a5a <__eqdf2+0x56>
 8000a3e:	45bc      	cmp	ip, r7
 8000a40:	d10b      	bne.n	8000a5a <__eqdf2+0x56>
 8000a42:	4294      	cmp	r4, r2
 8000a44:	d109      	bne.n	8000a5a <__eqdf2+0x56>
 8000a46:	45d3      	cmp	fp, sl
 8000a48:	d01c      	beq.n	8000a84 <__eqdf2+0x80>
 8000a4a:	2900      	cmp	r1, #0
 8000a4c:	d105      	bne.n	8000a5a <__eqdf2+0x56>
 8000a4e:	4660      	mov	r0, ip
 8000a50:	4320      	orrs	r0, r4
 8000a52:	1e43      	subs	r3, r0, #1
 8000a54:	4198      	sbcs	r0, r3
 8000a56:	e000      	b.n	8000a5a <__eqdf2+0x56>
 8000a58:	2001      	movs	r0, #1
 8000a5a:	bcf0      	pop	{r4, r5, r6, r7}
 8000a5c:	46bb      	mov	fp, r7
 8000a5e:	46b2      	mov	sl, r6
 8000a60:	46a9      	mov	r9, r5
 8000a62:	46a0      	mov	r8, r4
 8000a64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a66:	2001      	movs	r0, #1
 8000a68:	428e      	cmp	r6, r1
 8000a6a:	d1f6      	bne.n	8000a5a <__eqdf2+0x56>
 8000a6c:	4661      	mov	r1, ip
 8000a6e:	4339      	orrs	r1, r7
 8000a70:	000f      	movs	r7, r1
 8000a72:	4317      	orrs	r7, r2
 8000a74:	4327      	orrs	r7, r4
 8000a76:	d1f0      	bne.n	8000a5a <__eqdf2+0x56>
 8000a78:	465b      	mov	r3, fp
 8000a7a:	4652      	mov	r2, sl
 8000a7c:	1a98      	subs	r0, r3, r2
 8000a7e:	1e43      	subs	r3, r0, #1
 8000a80:	4198      	sbcs	r0, r3
 8000a82:	e7ea      	b.n	8000a5a <__eqdf2+0x56>
 8000a84:	2000      	movs	r0, #0
 8000a86:	e7e8      	b.n	8000a5a <__eqdf2+0x56>
 8000a88:	000007ff 	.word	0x000007ff

08000a8c <__gedf2>:
 8000a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a8e:	4657      	mov	r7, sl
 8000a90:	464e      	mov	r6, r9
 8000a92:	4645      	mov	r5, r8
 8000a94:	46de      	mov	lr, fp
 8000a96:	b5e0      	push	{r5, r6, r7, lr}
 8000a98:	000d      	movs	r5, r1
 8000a9a:	030f      	lsls	r7, r1, #12
 8000a9c:	0b39      	lsrs	r1, r7, #12
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	0004      	movs	r4, r0
 8000aa2:	4680      	mov	r8, r0
 8000aa4:	9101      	str	r1, [sp, #4]
 8000aa6:	0058      	lsls	r0, r3, #1
 8000aa8:	0fe9      	lsrs	r1, r5, #31
 8000aaa:	4f31      	ldr	r7, [pc, #196]	@ (8000b70 <__gedf2+0xe4>)
 8000aac:	0d40      	lsrs	r0, r0, #21
 8000aae:	468c      	mov	ip, r1
 8000ab0:	006e      	lsls	r6, r5, #1
 8000ab2:	0319      	lsls	r1, r3, #12
 8000ab4:	4682      	mov	sl, r0
 8000ab6:	4691      	mov	r9, r2
 8000ab8:	0d76      	lsrs	r6, r6, #21
 8000aba:	0b09      	lsrs	r1, r1, #12
 8000abc:	0fd8      	lsrs	r0, r3, #31
 8000abe:	42be      	cmp	r6, r7
 8000ac0:	d01f      	beq.n	8000b02 <__gedf2+0x76>
 8000ac2:	45ba      	cmp	sl, r7
 8000ac4:	d00f      	beq.n	8000ae6 <__gedf2+0x5a>
 8000ac6:	2e00      	cmp	r6, #0
 8000ac8:	d12f      	bne.n	8000b2a <__gedf2+0x9e>
 8000aca:	4655      	mov	r5, sl
 8000acc:	9e01      	ldr	r6, [sp, #4]
 8000ace:	4334      	orrs	r4, r6
 8000ad0:	2d00      	cmp	r5, #0
 8000ad2:	d127      	bne.n	8000b24 <__gedf2+0x98>
 8000ad4:	430a      	orrs	r2, r1
 8000ad6:	d03a      	beq.n	8000b4e <__gedf2+0xc2>
 8000ad8:	2c00      	cmp	r4, #0
 8000ada:	d145      	bne.n	8000b68 <__gedf2+0xdc>
 8000adc:	2800      	cmp	r0, #0
 8000ade:	d11a      	bne.n	8000b16 <__gedf2+0x8a>
 8000ae0:	2001      	movs	r0, #1
 8000ae2:	4240      	negs	r0, r0
 8000ae4:	e017      	b.n	8000b16 <__gedf2+0x8a>
 8000ae6:	4311      	orrs	r1, r2
 8000ae8:	d13b      	bne.n	8000b62 <__gedf2+0xd6>
 8000aea:	2e00      	cmp	r6, #0
 8000aec:	d102      	bne.n	8000af4 <__gedf2+0x68>
 8000aee:	9f01      	ldr	r7, [sp, #4]
 8000af0:	4327      	orrs	r7, r4
 8000af2:	d0f3      	beq.n	8000adc <__gedf2+0x50>
 8000af4:	4584      	cmp	ip, r0
 8000af6:	d109      	bne.n	8000b0c <__gedf2+0x80>
 8000af8:	4663      	mov	r3, ip
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d0f0      	beq.n	8000ae0 <__gedf2+0x54>
 8000afe:	4660      	mov	r0, ip
 8000b00:	e009      	b.n	8000b16 <__gedf2+0x8a>
 8000b02:	9f01      	ldr	r7, [sp, #4]
 8000b04:	4327      	orrs	r7, r4
 8000b06:	d12c      	bne.n	8000b62 <__gedf2+0xd6>
 8000b08:	45b2      	cmp	sl, r6
 8000b0a:	d024      	beq.n	8000b56 <__gedf2+0xca>
 8000b0c:	4663      	mov	r3, ip
 8000b0e:	2002      	movs	r0, #2
 8000b10:	3b01      	subs	r3, #1
 8000b12:	4018      	ands	r0, r3
 8000b14:	3801      	subs	r0, #1
 8000b16:	b003      	add	sp, #12
 8000b18:	bcf0      	pop	{r4, r5, r6, r7}
 8000b1a:	46bb      	mov	fp, r7
 8000b1c:	46b2      	mov	sl, r6
 8000b1e:	46a9      	mov	r9, r5
 8000b20:	46a0      	mov	r8, r4
 8000b22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b24:	2c00      	cmp	r4, #0
 8000b26:	d0d9      	beq.n	8000adc <__gedf2+0x50>
 8000b28:	e7e4      	b.n	8000af4 <__gedf2+0x68>
 8000b2a:	4654      	mov	r4, sl
 8000b2c:	2c00      	cmp	r4, #0
 8000b2e:	d0ed      	beq.n	8000b0c <__gedf2+0x80>
 8000b30:	4584      	cmp	ip, r0
 8000b32:	d1eb      	bne.n	8000b0c <__gedf2+0x80>
 8000b34:	4556      	cmp	r6, sl
 8000b36:	dce9      	bgt.n	8000b0c <__gedf2+0x80>
 8000b38:	dbde      	blt.n	8000af8 <__gedf2+0x6c>
 8000b3a:	9b01      	ldr	r3, [sp, #4]
 8000b3c:	428b      	cmp	r3, r1
 8000b3e:	d8e5      	bhi.n	8000b0c <__gedf2+0x80>
 8000b40:	d1da      	bne.n	8000af8 <__gedf2+0x6c>
 8000b42:	45c8      	cmp	r8, r9
 8000b44:	d8e2      	bhi.n	8000b0c <__gedf2+0x80>
 8000b46:	2000      	movs	r0, #0
 8000b48:	45c8      	cmp	r8, r9
 8000b4a:	d2e4      	bcs.n	8000b16 <__gedf2+0x8a>
 8000b4c:	e7d4      	b.n	8000af8 <__gedf2+0x6c>
 8000b4e:	2000      	movs	r0, #0
 8000b50:	2c00      	cmp	r4, #0
 8000b52:	d0e0      	beq.n	8000b16 <__gedf2+0x8a>
 8000b54:	e7da      	b.n	8000b0c <__gedf2+0x80>
 8000b56:	4311      	orrs	r1, r2
 8000b58:	d103      	bne.n	8000b62 <__gedf2+0xd6>
 8000b5a:	4584      	cmp	ip, r0
 8000b5c:	d1d6      	bne.n	8000b0c <__gedf2+0x80>
 8000b5e:	2000      	movs	r0, #0
 8000b60:	e7d9      	b.n	8000b16 <__gedf2+0x8a>
 8000b62:	2002      	movs	r0, #2
 8000b64:	4240      	negs	r0, r0
 8000b66:	e7d6      	b.n	8000b16 <__gedf2+0x8a>
 8000b68:	4584      	cmp	ip, r0
 8000b6a:	d0e6      	beq.n	8000b3a <__gedf2+0xae>
 8000b6c:	e7ce      	b.n	8000b0c <__gedf2+0x80>
 8000b6e:	46c0      	nop			@ (mov r8, r8)
 8000b70:	000007ff 	.word	0x000007ff

08000b74 <__ledf2>:
 8000b74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b76:	4657      	mov	r7, sl
 8000b78:	464e      	mov	r6, r9
 8000b7a:	4645      	mov	r5, r8
 8000b7c:	46de      	mov	lr, fp
 8000b7e:	b5e0      	push	{r5, r6, r7, lr}
 8000b80:	000d      	movs	r5, r1
 8000b82:	030f      	lsls	r7, r1, #12
 8000b84:	0004      	movs	r4, r0
 8000b86:	4680      	mov	r8, r0
 8000b88:	0fe8      	lsrs	r0, r5, #31
 8000b8a:	0b39      	lsrs	r1, r7, #12
 8000b8c:	4684      	mov	ip, r0
 8000b8e:	b083      	sub	sp, #12
 8000b90:	0058      	lsls	r0, r3, #1
 8000b92:	4f30      	ldr	r7, [pc, #192]	@ (8000c54 <__ledf2+0xe0>)
 8000b94:	0d40      	lsrs	r0, r0, #21
 8000b96:	9101      	str	r1, [sp, #4]
 8000b98:	031e      	lsls	r6, r3, #12
 8000b9a:	0069      	lsls	r1, r5, #1
 8000b9c:	4682      	mov	sl, r0
 8000b9e:	4691      	mov	r9, r2
 8000ba0:	0d49      	lsrs	r1, r1, #21
 8000ba2:	0b36      	lsrs	r6, r6, #12
 8000ba4:	0fd8      	lsrs	r0, r3, #31
 8000ba6:	42b9      	cmp	r1, r7
 8000ba8:	d020      	beq.n	8000bec <__ledf2+0x78>
 8000baa:	45ba      	cmp	sl, r7
 8000bac:	d00f      	beq.n	8000bce <__ledf2+0x5a>
 8000bae:	2900      	cmp	r1, #0
 8000bb0:	d12b      	bne.n	8000c0a <__ledf2+0x96>
 8000bb2:	9901      	ldr	r1, [sp, #4]
 8000bb4:	430c      	orrs	r4, r1
 8000bb6:	4651      	mov	r1, sl
 8000bb8:	2900      	cmp	r1, #0
 8000bba:	d137      	bne.n	8000c2c <__ledf2+0xb8>
 8000bbc:	4332      	orrs	r2, r6
 8000bbe:	d038      	beq.n	8000c32 <__ledf2+0xbe>
 8000bc0:	2c00      	cmp	r4, #0
 8000bc2:	d144      	bne.n	8000c4e <__ledf2+0xda>
 8000bc4:	2800      	cmp	r0, #0
 8000bc6:	d119      	bne.n	8000bfc <__ledf2+0x88>
 8000bc8:	2001      	movs	r0, #1
 8000bca:	4240      	negs	r0, r0
 8000bcc:	e016      	b.n	8000bfc <__ledf2+0x88>
 8000bce:	4316      	orrs	r6, r2
 8000bd0:	d113      	bne.n	8000bfa <__ledf2+0x86>
 8000bd2:	2900      	cmp	r1, #0
 8000bd4:	d102      	bne.n	8000bdc <__ledf2+0x68>
 8000bd6:	9f01      	ldr	r7, [sp, #4]
 8000bd8:	4327      	orrs	r7, r4
 8000bda:	d0f3      	beq.n	8000bc4 <__ledf2+0x50>
 8000bdc:	4584      	cmp	ip, r0
 8000bde:	d020      	beq.n	8000c22 <__ledf2+0xae>
 8000be0:	4663      	mov	r3, ip
 8000be2:	2002      	movs	r0, #2
 8000be4:	3b01      	subs	r3, #1
 8000be6:	4018      	ands	r0, r3
 8000be8:	3801      	subs	r0, #1
 8000bea:	e007      	b.n	8000bfc <__ledf2+0x88>
 8000bec:	9f01      	ldr	r7, [sp, #4]
 8000bee:	4327      	orrs	r7, r4
 8000bf0:	d103      	bne.n	8000bfa <__ledf2+0x86>
 8000bf2:	458a      	cmp	sl, r1
 8000bf4:	d1f4      	bne.n	8000be0 <__ledf2+0x6c>
 8000bf6:	4316      	orrs	r6, r2
 8000bf8:	d01f      	beq.n	8000c3a <__ledf2+0xc6>
 8000bfa:	2002      	movs	r0, #2
 8000bfc:	b003      	add	sp, #12
 8000bfe:	bcf0      	pop	{r4, r5, r6, r7}
 8000c00:	46bb      	mov	fp, r7
 8000c02:	46b2      	mov	sl, r6
 8000c04:	46a9      	mov	r9, r5
 8000c06:	46a0      	mov	r8, r4
 8000c08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c0a:	4654      	mov	r4, sl
 8000c0c:	2c00      	cmp	r4, #0
 8000c0e:	d0e7      	beq.n	8000be0 <__ledf2+0x6c>
 8000c10:	4584      	cmp	ip, r0
 8000c12:	d1e5      	bne.n	8000be0 <__ledf2+0x6c>
 8000c14:	4551      	cmp	r1, sl
 8000c16:	dce3      	bgt.n	8000be0 <__ledf2+0x6c>
 8000c18:	db03      	blt.n	8000c22 <__ledf2+0xae>
 8000c1a:	9b01      	ldr	r3, [sp, #4]
 8000c1c:	42b3      	cmp	r3, r6
 8000c1e:	d8df      	bhi.n	8000be0 <__ledf2+0x6c>
 8000c20:	d00f      	beq.n	8000c42 <__ledf2+0xce>
 8000c22:	4663      	mov	r3, ip
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d0cf      	beq.n	8000bc8 <__ledf2+0x54>
 8000c28:	4660      	mov	r0, ip
 8000c2a:	e7e7      	b.n	8000bfc <__ledf2+0x88>
 8000c2c:	2c00      	cmp	r4, #0
 8000c2e:	d0c9      	beq.n	8000bc4 <__ledf2+0x50>
 8000c30:	e7d4      	b.n	8000bdc <__ledf2+0x68>
 8000c32:	2000      	movs	r0, #0
 8000c34:	2c00      	cmp	r4, #0
 8000c36:	d0e1      	beq.n	8000bfc <__ledf2+0x88>
 8000c38:	e7d2      	b.n	8000be0 <__ledf2+0x6c>
 8000c3a:	4584      	cmp	ip, r0
 8000c3c:	d1d0      	bne.n	8000be0 <__ledf2+0x6c>
 8000c3e:	2000      	movs	r0, #0
 8000c40:	e7dc      	b.n	8000bfc <__ledf2+0x88>
 8000c42:	45c8      	cmp	r8, r9
 8000c44:	d8cc      	bhi.n	8000be0 <__ledf2+0x6c>
 8000c46:	2000      	movs	r0, #0
 8000c48:	45c8      	cmp	r8, r9
 8000c4a:	d2d7      	bcs.n	8000bfc <__ledf2+0x88>
 8000c4c:	e7e9      	b.n	8000c22 <__ledf2+0xae>
 8000c4e:	4584      	cmp	ip, r0
 8000c50:	d0e3      	beq.n	8000c1a <__ledf2+0xa6>
 8000c52:	e7c5      	b.n	8000be0 <__ledf2+0x6c>
 8000c54:	000007ff 	.word	0x000007ff

08000c58 <__aeabi_dmul>:
 8000c58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c5a:	4657      	mov	r7, sl
 8000c5c:	46de      	mov	lr, fp
 8000c5e:	464e      	mov	r6, r9
 8000c60:	4645      	mov	r5, r8
 8000c62:	b5e0      	push	{r5, r6, r7, lr}
 8000c64:	001f      	movs	r7, r3
 8000c66:	030b      	lsls	r3, r1, #12
 8000c68:	0b1b      	lsrs	r3, r3, #12
 8000c6a:	0016      	movs	r6, r2
 8000c6c:	469a      	mov	sl, r3
 8000c6e:	0fca      	lsrs	r2, r1, #31
 8000c70:	004b      	lsls	r3, r1, #1
 8000c72:	0004      	movs	r4, r0
 8000c74:	4693      	mov	fp, r2
 8000c76:	b087      	sub	sp, #28
 8000c78:	0d5b      	lsrs	r3, r3, #21
 8000c7a:	d100      	bne.n	8000c7e <__aeabi_dmul+0x26>
 8000c7c:	e0d5      	b.n	8000e2a <__aeabi_dmul+0x1d2>
 8000c7e:	4abb      	ldr	r2, [pc, #748]	@ (8000f6c <__aeabi_dmul+0x314>)
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d100      	bne.n	8000c86 <__aeabi_dmul+0x2e>
 8000c84:	e0f8      	b.n	8000e78 <__aeabi_dmul+0x220>
 8000c86:	4651      	mov	r1, sl
 8000c88:	0f42      	lsrs	r2, r0, #29
 8000c8a:	00c9      	lsls	r1, r1, #3
 8000c8c:	430a      	orrs	r2, r1
 8000c8e:	2180      	movs	r1, #128	@ 0x80
 8000c90:	0409      	lsls	r1, r1, #16
 8000c92:	4311      	orrs	r1, r2
 8000c94:	00c2      	lsls	r2, r0, #3
 8000c96:	4691      	mov	r9, r2
 8000c98:	4ab5      	ldr	r2, [pc, #724]	@ (8000f70 <__aeabi_dmul+0x318>)
 8000c9a:	468a      	mov	sl, r1
 8000c9c:	189d      	adds	r5, r3, r2
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	4698      	mov	r8, r3
 8000ca2:	9302      	str	r3, [sp, #8]
 8000ca4:	033c      	lsls	r4, r7, #12
 8000ca6:	007b      	lsls	r3, r7, #1
 8000ca8:	0ffa      	lsrs	r2, r7, #31
 8000caa:	0030      	movs	r0, r6
 8000cac:	0b24      	lsrs	r4, r4, #12
 8000cae:	0d5b      	lsrs	r3, r3, #21
 8000cb0:	9200      	str	r2, [sp, #0]
 8000cb2:	d100      	bne.n	8000cb6 <__aeabi_dmul+0x5e>
 8000cb4:	e096      	b.n	8000de4 <__aeabi_dmul+0x18c>
 8000cb6:	4aad      	ldr	r2, [pc, #692]	@ (8000f6c <__aeabi_dmul+0x314>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d031      	beq.n	8000d20 <__aeabi_dmul+0xc8>
 8000cbc:	0f72      	lsrs	r2, r6, #29
 8000cbe:	00e4      	lsls	r4, r4, #3
 8000cc0:	4322      	orrs	r2, r4
 8000cc2:	2480      	movs	r4, #128	@ 0x80
 8000cc4:	0424      	lsls	r4, r4, #16
 8000cc6:	4314      	orrs	r4, r2
 8000cc8:	4aa9      	ldr	r2, [pc, #676]	@ (8000f70 <__aeabi_dmul+0x318>)
 8000cca:	00f0      	lsls	r0, r6, #3
 8000ccc:	4694      	mov	ip, r2
 8000cce:	4463      	add	r3, ip
 8000cd0:	195b      	adds	r3, r3, r5
 8000cd2:	1c5a      	adds	r2, r3, #1
 8000cd4:	9201      	str	r2, [sp, #4]
 8000cd6:	4642      	mov	r2, r8
 8000cd8:	2600      	movs	r6, #0
 8000cda:	2a0a      	cmp	r2, #10
 8000cdc:	dc42      	bgt.n	8000d64 <__aeabi_dmul+0x10c>
 8000cde:	465a      	mov	r2, fp
 8000ce0:	9900      	ldr	r1, [sp, #0]
 8000ce2:	404a      	eors	r2, r1
 8000ce4:	4693      	mov	fp, r2
 8000ce6:	4642      	mov	r2, r8
 8000ce8:	2a02      	cmp	r2, #2
 8000cea:	dc32      	bgt.n	8000d52 <__aeabi_dmul+0xfa>
 8000cec:	3a01      	subs	r2, #1
 8000cee:	2a01      	cmp	r2, #1
 8000cf0:	d900      	bls.n	8000cf4 <__aeabi_dmul+0x9c>
 8000cf2:	e149      	b.n	8000f88 <__aeabi_dmul+0x330>
 8000cf4:	2e02      	cmp	r6, #2
 8000cf6:	d100      	bne.n	8000cfa <__aeabi_dmul+0xa2>
 8000cf8:	e0ca      	b.n	8000e90 <__aeabi_dmul+0x238>
 8000cfa:	2e01      	cmp	r6, #1
 8000cfc:	d13d      	bne.n	8000d7a <__aeabi_dmul+0x122>
 8000cfe:	2300      	movs	r3, #0
 8000d00:	2400      	movs	r4, #0
 8000d02:	2200      	movs	r2, #0
 8000d04:	0010      	movs	r0, r2
 8000d06:	465a      	mov	r2, fp
 8000d08:	051b      	lsls	r3, r3, #20
 8000d0a:	4323      	orrs	r3, r4
 8000d0c:	07d2      	lsls	r2, r2, #31
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	0019      	movs	r1, r3
 8000d12:	b007      	add	sp, #28
 8000d14:	bcf0      	pop	{r4, r5, r6, r7}
 8000d16:	46bb      	mov	fp, r7
 8000d18:	46b2      	mov	sl, r6
 8000d1a:	46a9      	mov	r9, r5
 8000d1c:	46a0      	mov	r8, r4
 8000d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d20:	4b92      	ldr	r3, [pc, #584]	@ (8000f6c <__aeabi_dmul+0x314>)
 8000d22:	4326      	orrs	r6, r4
 8000d24:	18eb      	adds	r3, r5, r3
 8000d26:	2e00      	cmp	r6, #0
 8000d28:	d100      	bne.n	8000d2c <__aeabi_dmul+0xd4>
 8000d2a:	e0bb      	b.n	8000ea4 <__aeabi_dmul+0x24c>
 8000d2c:	2203      	movs	r2, #3
 8000d2e:	4641      	mov	r1, r8
 8000d30:	4311      	orrs	r1, r2
 8000d32:	465a      	mov	r2, fp
 8000d34:	4688      	mov	r8, r1
 8000d36:	9900      	ldr	r1, [sp, #0]
 8000d38:	404a      	eors	r2, r1
 8000d3a:	2180      	movs	r1, #128	@ 0x80
 8000d3c:	0109      	lsls	r1, r1, #4
 8000d3e:	468c      	mov	ip, r1
 8000d40:	0029      	movs	r1, r5
 8000d42:	4461      	add	r1, ip
 8000d44:	9101      	str	r1, [sp, #4]
 8000d46:	4641      	mov	r1, r8
 8000d48:	290a      	cmp	r1, #10
 8000d4a:	dd00      	ble.n	8000d4e <__aeabi_dmul+0xf6>
 8000d4c:	e233      	b.n	80011b6 <__aeabi_dmul+0x55e>
 8000d4e:	4693      	mov	fp, r2
 8000d50:	2603      	movs	r6, #3
 8000d52:	4642      	mov	r2, r8
 8000d54:	2701      	movs	r7, #1
 8000d56:	4097      	lsls	r7, r2
 8000d58:	21a6      	movs	r1, #166	@ 0xa6
 8000d5a:	003a      	movs	r2, r7
 8000d5c:	00c9      	lsls	r1, r1, #3
 8000d5e:	400a      	ands	r2, r1
 8000d60:	420f      	tst	r7, r1
 8000d62:	d031      	beq.n	8000dc8 <__aeabi_dmul+0x170>
 8000d64:	9e02      	ldr	r6, [sp, #8]
 8000d66:	2e02      	cmp	r6, #2
 8000d68:	d100      	bne.n	8000d6c <__aeabi_dmul+0x114>
 8000d6a:	e235      	b.n	80011d8 <__aeabi_dmul+0x580>
 8000d6c:	2e03      	cmp	r6, #3
 8000d6e:	d100      	bne.n	8000d72 <__aeabi_dmul+0x11a>
 8000d70:	e1d2      	b.n	8001118 <__aeabi_dmul+0x4c0>
 8000d72:	4654      	mov	r4, sl
 8000d74:	4648      	mov	r0, r9
 8000d76:	2e01      	cmp	r6, #1
 8000d78:	d0c1      	beq.n	8000cfe <__aeabi_dmul+0xa6>
 8000d7a:	9a01      	ldr	r2, [sp, #4]
 8000d7c:	4b7d      	ldr	r3, [pc, #500]	@ (8000f74 <__aeabi_dmul+0x31c>)
 8000d7e:	4694      	mov	ip, r2
 8000d80:	4463      	add	r3, ip
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	dc00      	bgt.n	8000d88 <__aeabi_dmul+0x130>
 8000d86:	e0c0      	b.n	8000f0a <__aeabi_dmul+0x2b2>
 8000d88:	0742      	lsls	r2, r0, #29
 8000d8a:	d009      	beq.n	8000da0 <__aeabi_dmul+0x148>
 8000d8c:	220f      	movs	r2, #15
 8000d8e:	4002      	ands	r2, r0
 8000d90:	2a04      	cmp	r2, #4
 8000d92:	d005      	beq.n	8000da0 <__aeabi_dmul+0x148>
 8000d94:	1d02      	adds	r2, r0, #4
 8000d96:	4282      	cmp	r2, r0
 8000d98:	4180      	sbcs	r0, r0
 8000d9a:	4240      	negs	r0, r0
 8000d9c:	1824      	adds	r4, r4, r0
 8000d9e:	0010      	movs	r0, r2
 8000da0:	01e2      	lsls	r2, r4, #7
 8000da2:	d506      	bpl.n	8000db2 <__aeabi_dmul+0x15a>
 8000da4:	4b74      	ldr	r3, [pc, #464]	@ (8000f78 <__aeabi_dmul+0x320>)
 8000da6:	9a01      	ldr	r2, [sp, #4]
 8000da8:	401c      	ands	r4, r3
 8000daa:	2380      	movs	r3, #128	@ 0x80
 8000dac:	4694      	mov	ip, r2
 8000dae:	00db      	lsls	r3, r3, #3
 8000db0:	4463      	add	r3, ip
 8000db2:	4a72      	ldr	r2, [pc, #456]	@ (8000f7c <__aeabi_dmul+0x324>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	dc6b      	bgt.n	8000e90 <__aeabi_dmul+0x238>
 8000db8:	0762      	lsls	r2, r4, #29
 8000dba:	08c0      	lsrs	r0, r0, #3
 8000dbc:	0264      	lsls	r4, r4, #9
 8000dbe:	055b      	lsls	r3, r3, #21
 8000dc0:	4302      	orrs	r2, r0
 8000dc2:	0b24      	lsrs	r4, r4, #12
 8000dc4:	0d5b      	lsrs	r3, r3, #21
 8000dc6:	e79d      	b.n	8000d04 <__aeabi_dmul+0xac>
 8000dc8:	2190      	movs	r1, #144	@ 0x90
 8000dca:	0089      	lsls	r1, r1, #2
 8000dcc:	420f      	tst	r7, r1
 8000dce:	d163      	bne.n	8000e98 <__aeabi_dmul+0x240>
 8000dd0:	2288      	movs	r2, #136	@ 0x88
 8000dd2:	423a      	tst	r2, r7
 8000dd4:	d100      	bne.n	8000dd8 <__aeabi_dmul+0x180>
 8000dd6:	e0d7      	b.n	8000f88 <__aeabi_dmul+0x330>
 8000dd8:	9b00      	ldr	r3, [sp, #0]
 8000dda:	46a2      	mov	sl, r4
 8000ddc:	469b      	mov	fp, r3
 8000dde:	4681      	mov	r9, r0
 8000de0:	9602      	str	r6, [sp, #8]
 8000de2:	e7bf      	b.n	8000d64 <__aeabi_dmul+0x10c>
 8000de4:	0023      	movs	r3, r4
 8000de6:	4333      	orrs	r3, r6
 8000de8:	d100      	bne.n	8000dec <__aeabi_dmul+0x194>
 8000dea:	e07f      	b.n	8000eec <__aeabi_dmul+0x294>
 8000dec:	2c00      	cmp	r4, #0
 8000dee:	d100      	bne.n	8000df2 <__aeabi_dmul+0x19a>
 8000df0:	e1ad      	b.n	800114e <__aeabi_dmul+0x4f6>
 8000df2:	0020      	movs	r0, r4
 8000df4:	f000 fe22 	bl	8001a3c <__clzsi2>
 8000df8:	0002      	movs	r2, r0
 8000dfa:	0003      	movs	r3, r0
 8000dfc:	3a0b      	subs	r2, #11
 8000dfe:	201d      	movs	r0, #29
 8000e00:	0019      	movs	r1, r3
 8000e02:	1a82      	subs	r2, r0, r2
 8000e04:	0030      	movs	r0, r6
 8000e06:	3908      	subs	r1, #8
 8000e08:	40d0      	lsrs	r0, r2
 8000e0a:	408c      	lsls	r4, r1
 8000e0c:	4304      	orrs	r4, r0
 8000e0e:	0030      	movs	r0, r6
 8000e10:	4088      	lsls	r0, r1
 8000e12:	4a5b      	ldr	r2, [pc, #364]	@ (8000f80 <__aeabi_dmul+0x328>)
 8000e14:	1aeb      	subs	r3, r5, r3
 8000e16:	4694      	mov	ip, r2
 8000e18:	4463      	add	r3, ip
 8000e1a:	1c5a      	adds	r2, r3, #1
 8000e1c:	9201      	str	r2, [sp, #4]
 8000e1e:	4642      	mov	r2, r8
 8000e20:	2600      	movs	r6, #0
 8000e22:	2a0a      	cmp	r2, #10
 8000e24:	dc00      	bgt.n	8000e28 <__aeabi_dmul+0x1d0>
 8000e26:	e75a      	b.n	8000cde <__aeabi_dmul+0x86>
 8000e28:	e79c      	b.n	8000d64 <__aeabi_dmul+0x10c>
 8000e2a:	4653      	mov	r3, sl
 8000e2c:	4303      	orrs	r3, r0
 8000e2e:	4699      	mov	r9, r3
 8000e30:	d054      	beq.n	8000edc <__aeabi_dmul+0x284>
 8000e32:	4653      	mov	r3, sl
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d100      	bne.n	8000e3a <__aeabi_dmul+0x1e2>
 8000e38:	e177      	b.n	800112a <__aeabi_dmul+0x4d2>
 8000e3a:	4650      	mov	r0, sl
 8000e3c:	f000 fdfe 	bl	8001a3c <__clzsi2>
 8000e40:	230b      	movs	r3, #11
 8000e42:	425b      	negs	r3, r3
 8000e44:	469c      	mov	ip, r3
 8000e46:	0002      	movs	r2, r0
 8000e48:	4484      	add	ip, r0
 8000e4a:	0011      	movs	r1, r2
 8000e4c:	4650      	mov	r0, sl
 8000e4e:	3908      	subs	r1, #8
 8000e50:	4088      	lsls	r0, r1
 8000e52:	231d      	movs	r3, #29
 8000e54:	4680      	mov	r8, r0
 8000e56:	4660      	mov	r0, ip
 8000e58:	1a1b      	subs	r3, r3, r0
 8000e5a:	0020      	movs	r0, r4
 8000e5c:	40d8      	lsrs	r0, r3
 8000e5e:	0003      	movs	r3, r0
 8000e60:	4640      	mov	r0, r8
 8000e62:	4303      	orrs	r3, r0
 8000e64:	469a      	mov	sl, r3
 8000e66:	0023      	movs	r3, r4
 8000e68:	408b      	lsls	r3, r1
 8000e6a:	4699      	mov	r9, r3
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	4d44      	ldr	r5, [pc, #272]	@ (8000f80 <__aeabi_dmul+0x328>)
 8000e70:	4698      	mov	r8, r3
 8000e72:	1aad      	subs	r5, r5, r2
 8000e74:	9302      	str	r3, [sp, #8]
 8000e76:	e715      	b.n	8000ca4 <__aeabi_dmul+0x4c>
 8000e78:	4652      	mov	r2, sl
 8000e7a:	4302      	orrs	r2, r0
 8000e7c:	4691      	mov	r9, r2
 8000e7e:	d126      	bne.n	8000ece <__aeabi_dmul+0x276>
 8000e80:	2200      	movs	r2, #0
 8000e82:	001d      	movs	r5, r3
 8000e84:	2302      	movs	r3, #2
 8000e86:	4692      	mov	sl, r2
 8000e88:	3208      	adds	r2, #8
 8000e8a:	4690      	mov	r8, r2
 8000e8c:	9302      	str	r3, [sp, #8]
 8000e8e:	e709      	b.n	8000ca4 <__aeabi_dmul+0x4c>
 8000e90:	2400      	movs	r4, #0
 8000e92:	2200      	movs	r2, #0
 8000e94:	4b35      	ldr	r3, [pc, #212]	@ (8000f6c <__aeabi_dmul+0x314>)
 8000e96:	e735      	b.n	8000d04 <__aeabi_dmul+0xac>
 8000e98:	2300      	movs	r3, #0
 8000e9a:	2480      	movs	r4, #128	@ 0x80
 8000e9c:	469b      	mov	fp, r3
 8000e9e:	0324      	lsls	r4, r4, #12
 8000ea0:	4b32      	ldr	r3, [pc, #200]	@ (8000f6c <__aeabi_dmul+0x314>)
 8000ea2:	e72f      	b.n	8000d04 <__aeabi_dmul+0xac>
 8000ea4:	2202      	movs	r2, #2
 8000ea6:	4641      	mov	r1, r8
 8000ea8:	4311      	orrs	r1, r2
 8000eaa:	2280      	movs	r2, #128	@ 0x80
 8000eac:	0112      	lsls	r2, r2, #4
 8000eae:	4694      	mov	ip, r2
 8000eb0:	002a      	movs	r2, r5
 8000eb2:	4462      	add	r2, ip
 8000eb4:	4688      	mov	r8, r1
 8000eb6:	9201      	str	r2, [sp, #4]
 8000eb8:	290a      	cmp	r1, #10
 8000eba:	dd00      	ble.n	8000ebe <__aeabi_dmul+0x266>
 8000ebc:	e752      	b.n	8000d64 <__aeabi_dmul+0x10c>
 8000ebe:	465a      	mov	r2, fp
 8000ec0:	2000      	movs	r0, #0
 8000ec2:	9900      	ldr	r1, [sp, #0]
 8000ec4:	0004      	movs	r4, r0
 8000ec6:	404a      	eors	r2, r1
 8000ec8:	4693      	mov	fp, r2
 8000eca:	2602      	movs	r6, #2
 8000ecc:	e70b      	b.n	8000ce6 <__aeabi_dmul+0x8e>
 8000ece:	220c      	movs	r2, #12
 8000ed0:	001d      	movs	r5, r3
 8000ed2:	2303      	movs	r3, #3
 8000ed4:	4681      	mov	r9, r0
 8000ed6:	4690      	mov	r8, r2
 8000ed8:	9302      	str	r3, [sp, #8]
 8000eda:	e6e3      	b.n	8000ca4 <__aeabi_dmul+0x4c>
 8000edc:	2300      	movs	r3, #0
 8000ede:	469a      	mov	sl, r3
 8000ee0:	3304      	adds	r3, #4
 8000ee2:	4698      	mov	r8, r3
 8000ee4:	3b03      	subs	r3, #3
 8000ee6:	2500      	movs	r5, #0
 8000ee8:	9302      	str	r3, [sp, #8]
 8000eea:	e6db      	b.n	8000ca4 <__aeabi_dmul+0x4c>
 8000eec:	4642      	mov	r2, r8
 8000eee:	3301      	adds	r3, #1
 8000ef0:	431a      	orrs	r2, r3
 8000ef2:	002b      	movs	r3, r5
 8000ef4:	4690      	mov	r8, r2
 8000ef6:	1c5a      	adds	r2, r3, #1
 8000ef8:	9201      	str	r2, [sp, #4]
 8000efa:	4642      	mov	r2, r8
 8000efc:	2400      	movs	r4, #0
 8000efe:	2000      	movs	r0, #0
 8000f00:	2601      	movs	r6, #1
 8000f02:	2a0a      	cmp	r2, #10
 8000f04:	dc00      	bgt.n	8000f08 <__aeabi_dmul+0x2b0>
 8000f06:	e6ea      	b.n	8000cde <__aeabi_dmul+0x86>
 8000f08:	e72c      	b.n	8000d64 <__aeabi_dmul+0x10c>
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	1ad2      	subs	r2, r2, r3
 8000f0e:	2a38      	cmp	r2, #56	@ 0x38
 8000f10:	dd00      	ble.n	8000f14 <__aeabi_dmul+0x2bc>
 8000f12:	e6f4      	b.n	8000cfe <__aeabi_dmul+0xa6>
 8000f14:	2a1f      	cmp	r2, #31
 8000f16:	dc00      	bgt.n	8000f1a <__aeabi_dmul+0x2c2>
 8000f18:	e12a      	b.n	8001170 <__aeabi_dmul+0x518>
 8000f1a:	211f      	movs	r1, #31
 8000f1c:	4249      	negs	r1, r1
 8000f1e:	1acb      	subs	r3, r1, r3
 8000f20:	0021      	movs	r1, r4
 8000f22:	40d9      	lsrs	r1, r3
 8000f24:	000b      	movs	r3, r1
 8000f26:	2a20      	cmp	r2, #32
 8000f28:	d005      	beq.n	8000f36 <__aeabi_dmul+0x2de>
 8000f2a:	4a16      	ldr	r2, [pc, #88]	@ (8000f84 <__aeabi_dmul+0x32c>)
 8000f2c:	9d01      	ldr	r5, [sp, #4]
 8000f2e:	4694      	mov	ip, r2
 8000f30:	4465      	add	r5, ip
 8000f32:	40ac      	lsls	r4, r5
 8000f34:	4320      	orrs	r0, r4
 8000f36:	1e42      	subs	r2, r0, #1
 8000f38:	4190      	sbcs	r0, r2
 8000f3a:	4318      	orrs	r0, r3
 8000f3c:	2307      	movs	r3, #7
 8000f3e:	0019      	movs	r1, r3
 8000f40:	2400      	movs	r4, #0
 8000f42:	4001      	ands	r1, r0
 8000f44:	4203      	tst	r3, r0
 8000f46:	d00c      	beq.n	8000f62 <__aeabi_dmul+0x30a>
 8000f48:	230f      	movs	r3, #15
 8000f4a:	4003      	ands	r3, r0
 8000f4c:	2b04      	cmp	r3, #4
 8000f4e:	d100      	bne.n	8000f52 <__aeabi_dmul+0x2fa>
 8000f50:	e140      	b.n	80011d4 <__aeabi_dmul+0x57c>
 8000f52:	1d03      	adds	r3, r0, #4
 8000f54:	4283      	cmp	r3, r0
 8000f56:	41a4      	sbcs	r4, r4
 8000f58:	0018      	movs	r0, r3
 8000f5a:	4264      	negs	r4, r4
 8000f5c:	0761      	lsls	r1, r4, #29
 8000f5e:	0264      	lsls	r4, r4, #9
 8000f60:	0b24      	lsrs	r4, r4, #12
 8000f62:	08c2      	lsrs	r2, r0, #3
 8000f64:	2300      	movs	r3, #0
 8000f66:	430a      	orrs	r2, r1
 8000f68:	e6cc      	b.n	8000d04 <__aeabi_dmul+0xac>
 8000f6a:	46c0      	nop			@ (mov r8, r8)
 8000f6c:	000007ff 	.word	0x000007ff
 8000f70:	fffffc01 	.word	0xfffffc01
 8000f74:	000003ff 	.word	0x000003ff
 8000f78:	feffffff 	.word	0xfeffffff
 8000f7c:	000007fe 	.word	0x000007fe
 8000f80:	fffffc0d 	.word	0xfffffc0d
 8000f84:	0000043e 	.word	0x0000043e
 8000f88:	4649      	mov	r1, r9
 8000f8a:	464a      	mov	r2, r9
 8000f8c:	0409      	lsls	r1, r1, #16
 8000f8e:	0c09      	lsrs	r1, r1, #16
 8000f90:	000d      	movs	r5, r1
 8000f92:	0c16      	lsrs	r6, r2, #16
 8000f94:	0c02      	lsrs	r2, r0, #16
 8000f96:	0400      	lsls	r0, r0, #16
 8000f98:	0c00      	lsrs	r0, r0, #16
 8000f9a:	4345      	muls	r5, r0
 8000f9c:	46ac      	mov	ip, r5
 8000f9e:	0005      	movs	r5, r0
 8000fa0:	4375      	muls	r5, r6
 8000fa2:	46a8      	mov	r8, r5
 8000fa4:	0015      	movs	r5, r2
 8000fa6:	000f      	movs	r7, r1
 8000fa8:	4375      	muls	r5, r6
 8000faa:	9200      	str	r2, [sp, #0]
 8000fac:	9502      	str	r5, [sp, #8]
 8000fae:	002a      	movs	r2, r5
 8000fb0:	9d00      	ldr	r5, [sp, #0]
 8000fb2:	436f      	muls	r7, r5
 8000fb4:	4665      	mov	r5, ip
 8000fb6:	0c2d      	lsrs	r5, r5, #16
 8000fb8:	46a9      	mov	r9, r5
 8000fba:	4447      	add	r7, r8
 8000fbc:	444f      	add	r7, r9
 8000fbe:	45b8      	cmp	r8, r7
 8000fc0:	d905      	bls.n	8000fce <__aeabi_dmul+0x376>
 8000fc2:	0015      	movs	r5, r2
 8000fc4:	2280      	movs	r2, #128	@ 0x80
 8000fc6:	0252      	lsls	r2, r2, #9
 8000fc8:	4690      	mov	r8, r2
 8000fca:	4445      	add	r5, r8
 8000fcc:	9502      	str	r5, [sp, #8]
 8000fce:	0c3d      	lsrs	r5, r7, #16
 8000fd0:	9503      	str	r5, [sp, #12]
 8000fd2:	4665      	mov	r5, ip
 8000fd4:	042d      	lsls	r5, r5, #16
 8000fd6:	043f      	lsls	r7, r7, #16
 8000fd8:	0c2d      	lsrs	r5, r5, #16
 8000fda:	46ac      	mov	ip, r5
 8000fdc:	003d      	movs	r5, r7
 8000fde:	4465      	add	r5, ip
 8000fe0:	9504      	str	r5, [sp, #16]
 8000fe2:	0c25      	lsrs	r5, r4, #16
 8000fe4:	0424      	lsls	r4, r4, #16
 8000fe6:	0c24      	lsrs	r4, r4, #16
 8000fe8:	46ac      	mov	ip, r5
 8000fea:	0025      	movs	r5, r4
 8000fec:	4375      	muls	r5, r6
 8000fee:	46a8      	mov	r8, r5
 8000ff0:	4665      	mov	r5, ip
 8000ff2:	000f      	movs	r7, r1
 8000ff4:	4369      	muls	r1, r5
 8000ff6:	4441      	add	r1, r8
 8000ff8:	4689      	mov	r9, r1
 8000ffa:	4367      	muls	r7, r4
 8000ffc:	0c39      	lsrs	r1, r7, #16
 8000ffe:	4449      	add	r1, r9
 8001000:	436e      	muls	r6, r5
 8001002:	4588      	cmp	r8, r1
 8001004:	d903      	bls.n	800100e <__aeabi_dmul+0x3b6>
 8001006:	2280      	movs	r2, #128	@ 0x80
 8001008:	0252      	lsls	r2, r2, #9
 800100a:	4690      	mov	r8, r2
 800100c:	4446      	add	r6, r8
 800100e:	0c0d      	lsrs	r5, r1, #16
 8001010:	46a8      	mov	r8, r5
 8001012:	0035      	movs	r5, r6
 8001014:	4445      	add	r5, r8
 8001016:	9505      	str	r5, [sp, #20]
 8001018:	9d03      	ldr	r5, [sp, #12]
 800101a:	043f      	lsls	r7, r7, #16
 800101c:	46a8      	mov	r8, r5
 800101e:	0c3f      	lsrs	r7, r7, #16
 8001020:	0409      	lsls	r1, r1, #16
 8001022:	19c9      	adds	r1, r1, r7
 8001024:	4488      	add	r8, r1
 8001026:	4645      	mov	r5, r8
 8001028:	9503      	str	r5, [sp, #12]
 800102a:	4655      	mov	r5, sl
 800102c:	042e      	lsls	r6, r5, #16
 800102e:	0c36      	lsrs	r6, r6, #16
 8001030:	0c2f      	lsrs	r7, r5, #16
 8001032:	0035      	movs	r5, r6
 8001034:	4345      	muls	r5, r0
 8001036:	4378      	muls	r0, r7
 8001038:	4681      	mov	r9, r0
 800103a:	0038      	movs	r0, r7
 800103c:	46a8      	mov	r8, r5
 800103e:	0c2d      	lsrs	r5, r5, #16
 8001040:	46aa      	mov	sl, r5
 8001042:	9a00      	ldr	r2, [sp, #0]
 8001044:	4350      	muls	r0, r2
 8001046:	4372      	muls	r2, r6
 8001048:	444a      	add	r2, r9
 800104a:	4452      	add	r2, sl
 800104c:	4591      	cmp	r9, r2
 800104e:	d903      	bls.n	8001058 <__aeabi_dmul+0x400>
 8001050:	2580      	movs	r5, #128	@ 0x80
 8001052:	026d      	lsls	r5, r5, #9
 8001054:	46a9      	mov	r9, r5
 8001056:	4448      	add	r0, r9
 8001058:	0c15      	lsrs	r5, r2, #16
 800105a:	46a9      	mov	r9, r5
 800105c:	4645      	mov	r5, r8
 800105e:	042d      	lsls	r5, r5, #16
 8001060:	0c2d      	lsrs	r5, r5, #16
 8001062:	46a8      	mov	r8, r5
 8001064:	4665      	mov	r5, ip
 8001066:	437d      	muls	r5, r7
 8001068:	0412      	lsls	r2, r2, #16
 800106a:	4448      	add	r0, r9
 800106c:	4490      	add	r8, r2
 800106e:	46a9      	mov	r9, r5
 8001070:	0032      	movs	r2, r6
 8001072:	4665      	mov	r5, ip
 8001074:	4362      	muls	r2, r4
 8001076:	436e      	muls	r6, r5
 8001078:	437c      	muls	r4, r7
 800107a:	0c17      	lsrs	r7, r2, #16
 800107c:	1936      	adds	r6, r6, r4
 800107e:	19bf      	adds	r7, r7, r6
 8001080:	42bc      	cmp	r4, r7
 8001082:	d903      	bls.n	800108c <__aeabi_dmul+0x434>
 8001084:	2480      	movs	r4, #128	@ 0x80
 8001086:	0264      	lsls	r4, r4, #9
 8001088:	46a4      	mov	ip, r4
 800108a:	44e1      	add	r9, ip
 800108c:	9c02      	ldr	r4, [sp, #8]
 800108e:	9e03      	ldr	r6, [sp, #12]
 8001090:	46a4      	mov	ip, r4
 8001092:	9d05      	ldr	r5, [sp, #20]
 8001094:	4466      	add	r6, ip
 8001096:	428e      	cmp	r6, r1
 8001098:	4189      	sbcs	r1, r1
 800109a:	46ac      	mov	ip, r5
 800109c:	0412      	lsls	r2, r2, #16
 800109e:	043c      	lsls	r4, r7, #16
 80010a0:	0c12      	lsrs	r2, r2, #16
 80010a2:	18a2      	adds	r2, r4, r2
 80010a4:	4462      	add	r2, ip
 80010a6:	4249      	negs	r1, r1
 80010a8:	1854      	adds	r4, r2, r1
 80010aa:	4446      	add	r6, r8
 80010ac:	46a4      	mov	ip, r4
 80010ae:	4546      	cmp	r6, r8
 80010b0:	41a4      	sbcs	r4, r4
 80010b2:	4682      	mov	sl, r0
 80010b4:	4264      	negs	r4, r4
 80010b6:	46a0      	mov	r8, r4
 80010b8:	42aa      	cmp	r2, r5
 80010ba:	4192      	sbcs	r2, r2
 80010bc:	458c      	cmp	ip, r1
 80010be:	4189      	sbcs	r1, r1
 80010c0:	44e2      	add	sl, ip
 80010c2:	44d0      	add	r8, sl
 80010c4:	4249      	negs	r1, r1
 80010c6:	4252      	negs	r2, r2
 80010c8:	430a      	orrs	r2, r1
 80010ca:	45a0      	cmp	r8, r4
 80010cc:	41a4      	sbcs	r4, r4
 80010ce:	4582      	cmp	sl, r0
 80010d0:	4189      	sbcs	r1, r1
 80010d2:	4264      	negs	r4, r4
 80010d4:	4249      	negs	r1, r1
 80010d6:	430c      	orrs	r4, r1
 80010d8:	4641      	mov	r1, r8
 80010da:	0c3f      	lsrs	r7, r7, #16
 80010dc:	19d2      	adds	r2, r2, r7
 80010de:	1912      	adds	r2, r2, r4
 80010e0:	0dcc      	lsrs	r4, r1, #23
 80010e2:	9904      	ldr	r1, [sp, #16]
 80010e4:	0270      	lsls	r0, r6, #9
 80010e6:	4308      	orrs	r0, r1
 80010e8:	1e41      	subs	r1, r0, #1
 80010ea:	4188      	sbcs	r0, r1
 80010ec:	4641      	mov	r1, r8
 80010ee:	444a      	add	r2, r9
 80010f0:	0df6      	lsrs	r6, r6, #23
 80010f2:	0252      	lsls	r2, r2, #9
 80010f4:	4330      	orrs	r0, r6
 80010f6:	0249      	lsls	r1, r1, #9
 80010f8:	4314      	orrs	r4, r2
 80010fa:	4308      	orrs	r0, r1
 80010fc:	01d2      	lsls	r2, r2, #7
 80010fe:	d535      	bpl.n	800116c <__aeabi_dmul+0x514>
 8001100:	2201      	movs	r2, #1
 8001102:	0843      	lsrs	r3, r0, #1
 8001104:	4002      	ands	r2, r0
 8001106:	4313      	orrs	r3, r2
 8001108:	07e0      	lsls	r0, r4, #31
 800110a:	4318      	orrs	r0, r3
 800110c:	0864      	lsrs	r4, r4, #1
 800110e:	e634      	b.n	8000d7a <__aeabi_dmul+0x122>
 8001110:	9b00      	ldr	r3, [sp, #0]
 8001112:	46a2      	mov	sl, r4
 8001114:	469b      	mov	fp, r3
 8001116:	4681      	mov	r9, r0
 8001118:	2480      	movs	r4, #128	@ 0x80
 800111a:	4653      	mov	r3, sl
 800111c:	0324      	lsls	r4, r4, #12
 800111e:	431c      	orrs	r4, r3
 8001120:	0324      	lsls	r4, r4, #12
 8001122:	464a      	mov	r2, r9
 8001124:	4b2e      	ldr	r3, [pc, #184]	@ (80011e0 <__aeabi_dmul+0x588>)
 8001126:	0b24      	lsrs	r4, r4, #12
 8001128:	e5ec      	b.n	8000d04 <__aeabi_dmul+0xac>
 800112a:	f000 fc87 	bl	8001a3c <__clzsi2>
 800112e:	2315      	movs	r3, #21
 8001130:	469c      	mov	ip, r3
 8001132:	4484      	add	ip, r0
 8001134:	0002      	movs	r2, r0
 8001136:	4663      	mov	r3, ip
 8001138:	3220      	adds	r2, #32
 800113a:	2b1c      	cmp	r3, #28
 800113c:	dc00      	bgt.n	8001140 <__aeabi_dmul+0x4e8>
 800113e:	e684      	b.n	8000e4a <__aeabi_dmul+0x1f2>
 8001140:	2300      	movs	r3, #0
 8001142:	4699      	mov	r9, r3
 8001144:	0023      	movs	r3, r4
 8001146:	3808      	subs	r0, #8
 8001148:	4083      	lsls	r3, r0
 800114a:	469a      	mov	sl, r3
 800114c:	e68e      	b.n	8000e6c <__aeabi_dmul+0x214>
 800114e:	f000 fc75 	bl	8001a3c <__clzsi2>
 8001152:	0002      	movs	r2, r0
 8001154:	0003      	movs	r3, r0
 8001156:	3215      	adds	r2, #21
 8001158:	3320      	adds	r3, #32
 800115a:	2a1c      	cmp	r2, #28
 800115c:	dc00      	bgt.n	8001160 <__aeabi_dmul+0x508>
 800115e:	e64e      	b.n	8000dfe <__aeabi_dmul+0x1a6>
 8001160:	0002      	movs	r2, r0
 8001162:	0034      	movs	r4, r6
 8001164:	3a08      	subs	r2, #8
 8001166:	2000      	movs	r0, #0
 8001168:	4094      	lsls	r4, r2
 800116a:	e652      	b.n	8000e12 <__aeabi_dmul+0x1ba>
 800116c:	9301      	str	r3, [sp, #4]
 800116e:	e604      	b.n	8000d7a <__aeabi_dmul+0x122>
 8001170:	4b1c      	ldr	r3, [pc, #112]	@ (80011e4 <__aeabi_dmul+0x58c>)
 8001172:	0021      	movs	r1, r4
 8001174:	469c      	mov	ip, r3
 8001176:	0003      	movs	r3, r0
 8001178:	9d01      	ldr	r5, [sp, #4]
 800117a:	40d3      	lsrs	r3, r2
 800117c:	4465      	add	r5, ip
 800117e:	40a9      	lsls	r1, r5
 8001180:	4319      	orrs	r1, r3
 8001182:	0003      	movs	r3, r0
 8001184:	40ab      	lsls	r3, r5
 8001186:	1e58      	subs	r0, r3, #1
 8001188:	4183      	sbcs	r3, r0
 800118a:	4319      	orrs	r1, r3
 800118c:	0008      	movs	r0, r1
 800118e:	40d4      	lsrs	r4, r2
 8001190:	074b      	lsls	r3, r1, #29
 8001192:	d009      	beq.n	80011a8 <__aeabi_dmul+0x550>
 8001194:	230f      	movs	r3, #15
 8001196:	400b      	ands	r3, r1
 8001198:	2b04      	cmp	r3, #4
 800119a:	d005      	beq.n	80011a8 <__aeabi_dmul+0x550>
 800119c:	1d0b      	adds	r3, r1, #4
 800119e:	428b      	cmp	r3, r1
 80011a0:	4180      	sbcs	r0, r0
 80011a2:	4240      	negs	r0, r0
 80011a4:	1824      	adds	r4, r4, r0
 80011a6:	0018      	movs	r0, r3
 80011a8:	0223      	lsls	r3, r4, #8
 80011aa:	d400      	bmi.n	80011ae <__aeabi_dmul+0x556>
 80011ac:	e6d6      	b.n	8000f5c <__aeabi_dmul+0x304>
 80011ae:	2301      	movs	r3, #1
 80011b0:	2400      	movs	r4, #0
 80011b2:	2200      	movs	r2, #0
 80011b4:	e5a6      	b.n	8000d04 <__aeabi_dmul+0xac>
 80011b6:	290f      	cmp	r1, #15
 80011b8:	d1aa      	bne.n	8001110 <__aeabi_dmul+0x4b8>
 80011ba:	2380      	movs	r3, #128	@ 0x80
 80011bc:	4652      	mov	r2, sl
 80011be:	031b      	lsls	r3, r3, #12
 80011c0:	421a      	tst	r2, r3
 80011c2:	d0a9      	beq.n	8001118 <__aeabi_dmul+0x4c0>
 80011c4:	421c      	tst	r4, r3
 80011c6:	d1a7      	bne.n	8001118 <__aeabi_dmul+0x4c0>
 80011c8:	431c      	orrs	r4, r3
 80011ca:	9b00      	ldr	r3, [sp, #0]
 80011cc:	0002      	movs	r2, r0
 80011ce:	469b      	mov	fp, r3
 80011d0:	4b03      	ldr	r3, [pc, #12]	@ (80011e0 <__aeabi_dmul+0x588>)
 80011d2:	e597      	b.n	8000d04 <__aeabi_dmul+0xac>
 80011d4:	2400      	movs	r4, #0
 80011d6:	e6c1      	b.n	8000f5c <__aeabi_dmul+0x304>
 80011d8:	2400      	movs	r4, #0
 80011da:	4b01      	ldr	r3, [pc, #4]	@ (80011e0 <__aeabi_dmul+0x588>)
 80011dc:	0022      	movs	r2, r4
 80011de:	e591      	b.n	8000d04 <__aeabi_dmul+0xac>
 80011e0:	000007ff 	.word	0x000007ff
 80011e4:	0000041e 	.word	0x0000041e

080011e8 <__aeabi_dsub>:
 80011e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011ea:	464e      	mov	r6, r9
 80011ec:	4645      	mov	r5, r8
 80011ee:	46de      	mov	lr, fp
 80011f0:	4657      	mov	r7, sl
 80011f2:	b5e0      	push	{r5, r6, r7, lr}
 80011f4:	b085      	sub	sp, #20
 80011f6:	9000      	str	r0, [sp, #0]
 80011f8:	9101      	str	r1, [sp, #4]
 80011fa:	030c      	lsls	r4, r1, #12
 80011fc:	004f      	lsls	r7, r1, #1
 80011fe:	0fce      	lsrs	r6, r1, #31
 8001200:	0a61      	lsrs	r1, r4, #9
 8001202:	9c00      	ldr	r4, [sp, #0]
 8001204:	46b0      	mov	r8, r6
 8001206:	0f64      	lsrs	r4, r4, #29
 8001208:	430c      	orrs	r4, r1
 800120a:	9900      	ldr	r1, [sp, #0]
 800120c:	0d7f      	lsrs	r7, r7, #21
 800120e:	00c8      	lsls	r0, r1, #3
 8001210:	0011      	movs	r1, r2
 8001212:	001a      	movs	r2, r3
 8001214:	031b      	lsls	r3, r3, #12
 8001216:	469c      	mov	ip, r3
 8001218:	9100      	str	r1, [sp, #0]
 800121a:	9201      	str	r2, [sp, #4]
 800121c:	0051      	lsls	r1, r2, #1
 800121e:	0d4b      	lsrs	r3, r1, #21
 8001220:	4699      	mov	r9, r3
 8001222:	9b01      	ldr	r3, [sp, #4]
 8001224:	9d00      	ldr	r5, [sp, #0]
 8001226:	0fd9      	lsrs	r1, r3, #31
 8001228:	4663      	mov	r3, ip
 800122a:	0f6a      	lsrs	r2, r5, #29
 800122c:	0a5b      	lsrs	r3, r3, #9
 800122e:	4313      	orrs	r3, r2
 8001230:	00ea      	lsls	r2, r5, #3
 8001232:	4694      	mov	ip, r2
 8001234:	4693      	mov	fp, r2
 8001236:	4ac1      	ldr	r2, [pc, #772]	@ (800153c <__aeabi_dsub+0x354>)
 8001238:	9003      	str	r0, [sp, #12]
 800123a:	9302      	str	r3, [sp, #8]
 800123c:	4591      	cmp	r9, r2
 800123e:	d100      	bne.n	8001242 <__aeabi_dsub+0x5a>
 8001240:	e0cd      	b.n	80013de <__aeabi_dsub+0x1f6>
 8001242:	2501      	movs	r5, #1
 8001244:	4069      	eors	r1, r5
 8001246:	464d      	mov	r5, r9
 8001248:	1b7d      	subs	r5, r7, r5
 800124a:	46aa      	mov	sl, r5
 800124c:	428e      	cmp	r6, r1
 800124e:	d100      	bne.n	8001252 <__aeabi_dsub+0x6a>
 8001250:	e080      	b.n	8001354 <__aeabi_dsub+0x16c>
 8001252:	2d00      	cmp	r5, #0
 8001254:	dc00      	bgt.n	8001258 <__aeabi_dsub+0x70>
 8001256:	e335      	b.n	80018c4 <__aeabi_dsub+0x6dc>
 8001258:	4649      	mov	r1, r9
 800125a:	2900      	cmp	r1, #0
 800125c:	d100      	bne.n	8001260 <__aeabi_dsub+0x78>
 800125e:	e0df      	b.n	8001420 <__aeabi_dsub+0x238>
 8001260:	4297      	cmp	r7, r2
 8001262:	d100      	bne.n	8001266 <__aeabi_dsub+0x7e>
 8001264:	e194      	b.n	8001590 <__aeabi_dsub+0x3a8>
 8001266:	4652      	mov	r2, sl
 8001268:	2501      	movs	r5, #1
 800126a:	2a38      	cmp	r2, #56	@ 0x38
 800126c:	dc19      	bgt.n	80012a2 <__aeabi_dsub+0xba>
 800126e:	2280      	movs	r2, #128	@ 0x80
 8001270:	9b02      	ldr	r3, [sp, #8]
 8001272:	0412      	lsls	r2, r2, #16
 8001274:	4313      	orrs	r3, r2
 8001276:	9302      	str	r3, [sp, #8]
 8001278:	4652      	mov	r2, sl
 800127a:	2a1f      	cmp	r2, #31
 800127c:	dd00      	ble.n	8001280 <__aeabi_dsub+0x98>
 800127e:	e1e3      	b.n	8001648 <__aeabi_dsub+0x460>
 8001280:	4653      	mov	r3, sl
 8001282:	2220      	movs	r2, #32
 8001284:	4661      	mov	r1, ip
 8001286:	9d02      	ldr	r5, [sp, #8]
 8001288:	1ad2      	subs	r2, r2, r3
 800128a:	4095      	lsls	r5, r2
 800128c:	40d9      	lsrs	r1, r3
 800128e:	430d      	orrs	r5, r1
 8001290:	4661      	mov	r1, ip
 8001292:	4091      	lsls	r1, r2
 8001294:	000a      	movs	r2, r1
 8001296:	1e51      	subs	r1, r2, #1
 8001298:	418a      	sbcs	r2, r1
 800129a:	4315      	orrs	r5, r2
 800129c:	9a02      	ldr	r2, [sp, #8]
 800129e:	40da      	lsrs	r2, r3
 80012a0:	1aa4      	subs	r4, r4, r2
 80012a2:	1b45      	subs	r5, r0, r5
 80012a4:	42a8      	cmp	r0, r5
 80012a6:	4180      	sbcs	r0, r0
 80012a8:	4240      	negs	r0, r0
 80012aa:	1a24      	subs	r4, r4, r0
 80012ac:	0223      	lsls	r3, r4, #8
 80012ae:	d400      	bmi.n	80012b2 <__aeabi_dsub+0xca>
 80012b0:	e13d      	b.n	800152e <__aeabi_dsub+0x346>
 80012b2:	0264      	lsls	r4, r4, #9
 80012b4:	0a64      	lsrs	r4, r4, #9
 80012b6:	2c00      	cmp	r4, #0
 80012b8:	d100      	bne.n	80012bc <__aeabi_dsub+0xd4>
 80012ba:	e147      	b.n	800154c <__aeabi_dsub+0x364>
 80012bc:	0020      	movs	r0, r4
 80012be:	f000 fbbd 	bl	8001a3c <__clzsi2>
 80012c2:	0003      	movs	r3, r0
 80012c4:	3b08      	subs	r3, #8
 80012c6:	2120      	movs	r1, #32
 80012c8:	0028      	movs	r0, r5
 80012ca:	1aca      	subs	r2, r1, r3
 80012cc:	40d0      	lsrs	r0, r2
 80012ce:	409c      	lsls	r4, r3
 80012d0:	0002      	movs	r2, r0
 80012d2:	409d      	lsls	r5, r3
 80012d4:	4322      	orrs	r2, r4
 80012d6:	429f      	cmp	r7, r3
 80012d8:	dd00      	ble.n	80012dc <__aeabi_dsub+0xf4>
 80012da:	e177      	b.n	80015cc <__aeabi_dsub+0x3e4>
 80012dc:	1bd8      	subs	r0, r3, r7
 80012de:	3001      	adds	r0, #1
 80012e0:	1a09      	subs	r1, r1, r0
 80012e2:	002c      	movs	r4, r5
 80012e4:	408d      	lsls	r5, r1
 80012e6:	40c4      	lsrs	r4, r0
 80012e8:	1e6b      	subs	r3, r5, #1
 80012ea:	419d      	sbcs	r5, r3
 80012ec:	0013      	movs	r3, r2
 80012ee:	40c2      	lsrs	r2, r0
 80012f0:	408b      	lsls	r3, r1
 80012f2:	4325      	orrs	r5, r4
 80012f4:	2700      	movs	r7, #0
 80012f6:	0014      	movs	r4, r2
 80012f8:	431d      	orrs	r5, r3
 80012fa:	076b      	lsls	r3, r5, #29
 80012fc:	d009      	beq.n	8001312 <__aeabi_dsub+0x12a>
 80012fe:	230f      	movs	r3, #15
 8001300:	402b      	ands	r3, r5
 8001302:	2b04      	cmp	r3, #4
 8001304:	d005      	beq.n	8001312 <__aeabi_dsub+0x12a>
 8001306:	1d2b      	adds	r3, r5, #4
 8001308:	42ab      	cmp	r3, r5
 800130a:	41ad      	sbcs	r5, r5
 800130c:	426d      	negs	r5, r5
 800130e:	1964      	adds	r4, r4, r5
 8001310:	001d      	movs	r5, r3
 8001312:	0223      	lsls	r3, r4, #8
 8001314:	d400      	bmi.n	8001318 <__aeabi_dsub+0x130>
 8001316:	e140      	b.n	800159a <__aeabi_dsub+0x3b2>
 8001318:	4a88      	ldr	r2, [pc, #544]	@ (800153c <__aeabi_dsub+0x354>)
 800131a:	3701      	adds	r7, #1
 800131c:	4297      	cmp	r7, r2
 800131e:	d100      	bne.n	8001322 <__aeabi_dsub+0x13a>
 8001320:	e101      	b.n	8001526 <__aeabi_dsub+0x33e>
 8001322:	2601      	movs	r6, #1
 8001324:	4643      	mov	r3, r8
 8001326:	4986      	ldr	r1, [pc, #536]	@ (8001540 <__aeabi_dsub+0x358>)
 8001328:	08ed      	lsrs	r5, r5, #3
 800132a:	4021      	ands	r1, r4
 800132c:	074a      	lsls	r2, r1, #29
 800132e:	432a      	orrs	r2, r5
 8001330:	057c      	lsls	r4, r7, #21
 8001332:	024d      	lsls	r5, r1, #9
 8001334:	0b2d      	lsrs	r5, r5, #12
 8001336:	0d64      	lsrs	r4, r4, #21
 8001338:	401e      	ands	r6, r3
 800133a:	0524      	lsls	r4, r4, #20
 800133c:	432c      	orrs	r4, r5
 800133e:	07f6      	lsls	r6, r6, #31
 8001340:	4334      	orrs	r4, r6
 8001342:	0010      	movs	r0, r2
 8001344:	0021      	movs	r1, r4
 8001346:	b005      	add	sp, #20
 8001348:	bcf0      	pop	{r4, r5, r6, r7}
 800134a:	46bb      	mov	fp, r7
 800134c:	46b2      	mov	sl, r6
 800134e:	46a9      	mov	r9, r5
 8001350:	46a0      	mov	r8, r4
 8001352:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001354:	2d00      	cmp	r5, #0
 8001356:	dc00      	bgt.n	800135a <__aeabi_dsub+0x172>
 8001358:	e2d0      	b.n	80018fc <__aeabi_dsub+0x714>
 800135a:	4649      	mov	r1, r9
 800135c:	2900      	cmp	r1, #0
 800135e:	d000      	beq.n	8001362 <__aeabi_dsub+0x17a>
 8001360:	e0d4      	b.n	800150c <__aeabi_dsub+0x324>
 8001362:	4661      	mov	r1, ip
 8001364:	9b02      	ldr	r3, [sp, #8]
 8001366:	4319      	orrs	r1, r3
 8001368:	d100      	bne.n	800136c <__aeabi_dsub+0x184>
 800136a:	e12b      	b.n	80015c4 <__aeabi_dsub+0x3dc>
 800136c:	1e69      	subs	r1, r5, #1
 800136e:	2d01      	cmp	r5, #1
 8001370:	d100      	bne.n	8001374 <__aeabi_dsub+0x18c>
 8001372:	e1d9      	b.n	8001728 <__aeabi_dsub+0x540>
 8001374:	4295      	cmp	r5, r2
 8001376:	d100      	bne.n	800137a <__aeabi_dsub+0x192>
 8001378:	e10a      	b.n	8001590 <__aeabi_dsub+0x3a8>
 800137a:	2501      	movs	r5, #1
 800137c:	2938      	cmp	r1, #56	@ 0x38
 800137e:	dc17      	bgt.n	80013b0 <__aeabi_dsub+0x1c8>
 8001380:	468a      	mov	sl, r1
 8001382:	4653      	mov	r3, sl
 8001384:	2b1f      	cmp	r3, #31
 8001386:	dd00      	ble.n	800138a <__aeabi_dsub+0x1a2>
 8001388:	e1e7      	b.n	800175a <__aeabi_dsub+0x572>
 800138a:	2220      	movs	r2, #32
 800138c:	1ad2      	subs	r2, r2, r3
 800138e:	9b02      	ldr	r3, [sp, #8]
 8001390:	4661      	mov	r1, ip
 8001392:	4093      	lsls	r3, r2
 8001394:	001d      	movs	r5, r3
 8001396:	4653      	mov	r3, sl
 8001398:	40d9      	lsrs	r1, r3
 800139a:	4663      	mov	r3, ip
 800139c:	4093      	lsls	r3, r2
 800139e:	001a      	movs	r2, r3
 80013a0:	430d      	orrs	r5, r1
 80013a2:	1e51      	subs	r1, r2, #1
 80013a4:	418a      	sbcs	r2, r1
 80013a6:	4653      	mov	r3, sl
 80013a8:	4315      	orrs	r5, r2
 80013aa:	9a02      	ldr	r2, [sp, #8]
 80013ac:	40da      	lsrs	r2, r3
 80013ae:	18a4      	adds	r4, r4, r2
 80013b0:	182d      	adds	r5, r5, r0
 80013b2:	4285      	cmp	r5, r0
 80013b4:	4180      	sbcs	r0, r0
 80013b6:	4240      	negs	r0, r0
 80013b8:	1824      	adds	r4, r4, r0
 80013ba:	0223      	lsls	r3, r4, #8
 80013bc:	d400      	bmi.n	80013c0 <__aeabi_dsub+0x1d8>
 80013be:	e0b6      	b.n	800152e <__aeabi_dsub+0x346>
 80013c0:	4b5e      	ldr	r3, [pc, #376]	@ (800153c <__aeabi_dsub+0x354>)
 80013c2:	3701      	adds	r7, #1
 80013c4:	429f      	cmp	r7, r3
 80013c6:	d100      	bne.n	80013ca <__aeabi_dsub+0x1e2>
 80013c8:	e0ad      	b.n	8001526 <__aeabi_dsub+0x33e>
 80013ca:	2101      	movs	r1, #1
 80013cc:	4b5c      	ldr	r3, [pc, #368]	@ (8001540 <__aeabi_dsub+0x358>)
 80013ce:	086a      	lsrs	r2, r5, #1
 80013d0:	401c      	ands	r4, r3
 80013d2:	4029      	ands	r1, r5
 80013d4:	430a      	orrs	r2, r1
 80013d6:	07e5      	lsls	r5, r4, #31
 80013d8:	4315      	orrs	r5, r2
 80013da:	0864      	lsrs	r4, r4, #1
 80013dc:	e78d      	b.n	80012fa <__aeabi_dsub+0x112>
 80013de:	4a59      	ldr	r2, [pc, #356]	@ (8001544 <__aeabi_dsub+0x35c>)
 80013e0:	9b02      	ldr	r3, [sp, #8]
 80013e2:	4692      	mov	sl, r2
 80013e4:	4662      	mov	r2, ip
 80013e6:	44ba      	add	sl, r7
 80013e8:	431a      	orrs	r2, r3
 80013ea:	d02c      	beq.n	8001446 <__aeabi_dsub+0x25e>
 80013ec:	428e      	cmp	r6, r1
 80013ee:	d02e      	beq.n	800144e <__aeabi_dsub+0x266>
 80013f0:	4652      	mov	r2, sl
 80013f2:	2a00      	cmp	r2, #0
 80013f4:	d060      	beq.n	80014b8 <__aeabi_dsub+0x2d0>
 80013f6:	2f00      	cmp	r7, #0
 80013f8:	d100      	bne.n	80013fc <__aeabi_dsub+0x214>
 80013fa:	e0db      	b.n	80015b4 <__aeabi_dsub+0x3cc>
 80013fc:	4663      	mov	r3, ip
 80013fe:	000e      	movs	r6, r1
 8001400:	9c02      	ldr	r4, [sp, #8]
 8001402:	08d8      	lsrs	r0, r3, #3
 8001404:	0762      	lsls	r2, r4, #29
 8001406:	4302      	orrs	r2, r0
 8001408:	08e4      	lsrs	r4, r4, #3
 800140a:	0013      	movs	r3, r2
 800140c:	4323      	orrs	r3, r4
 800140e:	d100      	bne.n	8001412 <__aeabi_dsub+0x22a>
 8001410:	e254      	b.n	80018bc <__aeabi_dsub+0x6d4>
 8001412:	2580      	movs	r5, #128	@ 0x80
 8001414:	032d      	lsls	r5, r5, #12
 8001416:	4325      	orrs	r5, r4
 8001418:	032d      	lsls	r5, r5, #12
 800141a:	4c48      	ldr	r4, [pc, #288]	@ (800153c <__aeabi_dsub+0x354>)
 800141c:	0b2d      	lsrs	r5, r5, #12
 800141e:	e78c      	b.n	800133a <__aeabi_dsub+0x152>
 8001420:	4661      	mov	r1, ip
 8001422:	9b02      	ldr	r3, [sp, #8]
 8001424:	4319      	orrs	r1, r3
 8001426:	d100      	bne.n	800142a <__aeabi_dsub+0x242>
 8001428:	e0cc      	b.n	80015c4 <__aeabi_dsub+0x3dc>
 800142a:	0029      	movs	r1, r5
 800142c:	3901      	subs	r1, #1
 800142e:	2d01      	cmp	r5, #1
 8001430:	d100      	bne.n	8001434 <__aeabi_dsub+0x24c>
 8001432:	e188      	b.n	8001746 <__aeabi_dsub+0x55e>
 8001434:	4295      	cmp	r5, r2
 8001436:	d100      	bne.n	800143a <__aeabi_dsub+0x252>
 8001438:	e0aa      	b.n	8001590 <__aeabi_dsub+0x3a8>
 800143a:	2501      	movs	r5, #1
 800143c:	2938      	cmp	r1, #56	@ 0x38
 800143e:	dd00      	ble.n	8001442 <__aeabi_dsub+0x25a>
 8001440:	e72f      	b.n	80012a2 <__aeabi_dsub+0xba>
 8001442:	468a      	mov	sl, r1
 8001444:	e718      	b.n	8001278 <__aeabi_dsub+0x90>
 8001446:	2201      	movs	r2, #1
 8001448:	4051      	eors	r1, r2
 800144a:	428e      	cmp	r6, r1
 800144c:	d1d0      	bne.n	80013f0 <__aeabi_dsub+0x208>
 800144e:	4653      	mov	r3, sl
 8001450:	2b00      	cmp	r3, #0
 8001452:	d100      	bne.n	8001456 <__aeabi_dsub+0x26e>
 8001454:	e0be      	b.n	80015d4 <__aeabi_dsub+0x3ec>
 8001456:	2f00      	cmp	r7, #0
 8001458:	d000      	beq.n	800145c <__aeabi_dsub+0x274>
 800145a:	e138      	b.n	80016ce <__aeabi_dsub+0x4e6>
 800145c:	46ca      	mov	sl, r9
 800145e:	0022      	movs	r2, r4
 8001460:	4302      	orrs	r2, r0
 8001462:	d100      	bne.n	8001466 <__aeabi_dsub+0x27e>
 8001464:	e1e2      	b.n	800182c <__aeabi_dsub+0x644>
 8001466:	4653      	mov	r3, sl
 8001468:	1e59      	subs	r1, r3, #1
 800146a:	2b01      	cmp	r3, #1
 800146c:	d100      	bne.n	8001470 <__aeabi_dsub+0x288>
 800146e:	e20d      	b.n	800188c <__aeabi_dsub+0x6a4>
 8001470:	4a32      	ldr	r2, [pc, #200]	@ (800153c <__aeabi_dsub+0x354>)
 8001472:	4592      	cmp	sl, r2
 8001474:	d100      	bne.n	8001478 <__aeabi_dsub+0x290>
 8001476:	e1d2      	b.n	800181e <__aeabi_dsub+0x636>
 8001478:	2701      	movs	r7, #1
 800147a:	2938      	cmp	r1, #56	@ 0x38
 800147c:	dc13      	bgt.n	80014a6 <__aeabi_dsub+0x2be>
 800147e:	291f      	cmp	r1, #31
 8001480:	dd00      	ble.n	8001484 <__aeabi_dsub+0x29c>
 8001482:	e1ee      	b.n	8001862 <__aeabi_dsub+0x67a>
 8001484:	2220      	movs	r2, #32
 8001486:	9b02      	ldr	r3, [sp, #8]
 8001488:	1a52      	subs	r2, r2, r1
 800148a:	0025      	movs	r5, r4
 800148c:	0007      	movs	r7, r0
 800148e:	469a      	mov	sl, r3
 8001490:	40cc      	lsrs	r4, r1
 8001492:	4090      	lsls	r0, r2
 8001494:	4095      	lsls	r5, r2
 8001496:	40cf      	lsrs	r7, r1
 8001498:	44a2      	add	sl, r4
 800149a:	1e42      	subs	r2, r0, #1
 800149c:	4190      	sbcs	r0, r2
 800149e:	4653      	mov	r3, sl
 80014a0:	432f      	orrs	r7, r5
 80014a2:	4307      	orrs	r7, r0
 80014a4:	9302      	str	r3, [sp, #8]
 80014a6:	003d      	movs	r5, r7
 80014a8:	4465      	add	r5, ip
 80014aa:	4565      	cmp	r5, ip
 80014ac:	4192      	sbcs	r2, r2
 80014ae:	9b02      	ldr	r3, [sp, #8]
 80014b0:	4252      	negs	r2, r2
 80014b2:	464f      	mov	r7, r9
 80014b4:	18d4      	adds	r4, r2, r3
 80014b6:	e780      	b.n	80013ba <__aeabi_dsub+0x1d2>
 80014b8:	4a23      	ldr	r2, [pc, #140]	@ (8001548 <__aeabi_dsub+0x360>)
 80014ba:	1c7d      	adds	r5, r7, #1
 80014bc:	4215      	tst	r5, r2
 80014be:	d000      	beq.n	80014c2 <__aeabi_dsub+0x2da>
 80014c0:	e0aa      	b.n	8001618 <__aeabi_dsub+0x430>
 80014c2:	4662      	mov	r2, ip
 80014c4:	0025      	movs	r5, r4
 80014c6:	9b02      	ldr	r3, [sp, #8]
 80014c8:	4305      	orrs	r5, r0
 80014ca:	431a      	orrs	r2, r3
 80014cc:	2f00      	cmp	r7, #0
 80014ce:	d000      	beq.n	80014d2 <__aeabi_dsub+0x2ea>
 80014d0:	e0f5      	b.n	80016be <__aeabi_dsub+0x4d6>
 80014d2:	2d00      	cmp	r5, #0
 80014d4:	d100      	bne.n	80014d8 <__aeabi_dsub+0x2f0>
 80014d6:	e16b      	b.n	80017b0 <__aeabi_dsub+0x5c8>
 80014d8:	2a00      	cmp	r2, #0
 80014da:	d100      	bne.n	80014de <__aeabi_dsub+0x2f6>
 80014dc:	e152      	b.n	8001784 <__aeabi_dsub+0x59c>
 80014de:	4663      	mov	r3, ip
 80014e0:	1ac5      	subs	r5, r0, r3
 80014e2:	9b02      	ldr	r3, [sp, #8]
 80014e4:	1ae2      	subs	r2, r4, r3
 80014e6:	42a8      	cmp	r0, r5
 80014e8:	419b      	sbcs	r3, r3
 80014ea:	425b      	negs	r3, r3
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	021a      	lsls	r2, r3, #8
 80014f0:	d400      	bmi.n	80014f4 <__aeabi_dsub+0x30c>
 80014f2:	e1d5      	b.n	80018a0 <__aeabi_dsub+0x6b8>
 80014f4:	4663      	mov	r3, ip
 80014f6:	1a1d      	subs	r5, r3, r0
 80014f8:	45ac      	cmp	ip, r5
 80014fa:	4192      	sbcs	r2, r2
 80014fc:	2601      	movs	r6, #1
 80014fe:	9b02      	ldr	r3, [sp, #8]
 8001500:	4252      	negs	r2, r2
 8001502:	1b1c      	subs	r4, r3, r4
 8001504:	4688      	mov	r8, r1
 8001506:	1aa4      	subs	r4, r4, r2
 8001508:	400e      	ands	r6, r1
 800150a:	e6f6      	b.n	80012fa <__aeabi_dsub+0x112>
 800150c:	4297      	cmp	r7, r2
 800150e:	d03f      	beq.n	8001590 <__aeabi_dsub+0x3a8>
 8001510:	4652      	mov	r2, sl
 8001512:	2501      	movs	r5, #1
 8001514:	2a38      	cmp	r2, #56	@ 0x38
 8001516:	dd00      	ble.n	800151a <__aeabi_dsub+0x332>
 8001518:	e74a      	b.n	80013b0 <__aeabi_dsub+0x1c8>
 800151a:	2280      	movs	r2, #128	@ 0x80
 800151c:	9b02      	ldr	r3, [sp, #8]
 800151e:	0412      	lsls	r2, r2, #16
 8001520:	4313      	orrs	r3, r2
 8001522:	9302      	str	r3, [sp, #8]
 8001524:	e72d      	b.n	8001382 <__aeabi_dsub+0x19a>
 8001526:	003c      	movs	r4, r7
 8001528:	2500      	movs	r5, #0
 800152a:	2200      	movs	r2, #0
 800152c:	e705      	b.n	800133a <__aeabi_dsub+0x152>
 800152e:	2307      	movs	r3, #7
 8001530:	402b      	ands	r3, r5
 8001532:	2b00      	cmp	r3, #0
 8001534:	d000      	beq.n	8001538 <__aeabi_dsub+0x350>
 8001536:	e6e2      	b.n	80012fe <__aeabi_dsub+0x116>
 8001538:	e06b      	b.n	8001612 <__aeabi_dsub+0x42a>
 800153a:	46c0      	nop			@ (mov r8, r8)
 800153c:	000007ff 	.word	0x000007ff
 8001540:	ff7fffff 	.word	0xff7fffff
 8001544:	fffff801 	.word	0xfffff801
 8001548:	000007fe 	.word	0x000007fe
 800154c:	0028      	movs	r0, r5
 800154e:	f000 fa75 	bl	8001a3c <__clzsi2>
 8001552:	0003      	movs	r3, r0
 8001554:	3318      	adds	r3, #24
 8001556:	2b1f      	cmp	r3, #31
 8001558:	dc00      	bgt.n	800155c <__aeabi_dsub+0x374>
 800155a:	e6b4      	b.n	80012c6 <__aeabi_dsub+0xde>
 800155c:	002a      	movs	r2, r5
 800155e:	3808      	subs	r0, #8
 8001560:	4082      	lsls	r2, r0
 8001562:	429f      	cmp	r7, r3
 8001564:	dd00      	ble.n	8001568 <__aeabi_dsub+0x380>
 8001566:	e0b9      	b.n	80016dc <__aeabi_dsub+0x4f4>
 8001568:	1bdb      	subs	r3, r3, r7
 800156a:	1c58      	adds	r0, r3, #1
 800156c:	281f      	cmp	r0, #31
 800156e:	dc00      	bgt.n	8001572 <__aeabi_dsub+0x38a>
 8001570:	e1a0      	b.n	80018b4 <__aeabi_dsub+0x6cc>
 8001572:	0015      	movs	r5, r2
 8001574:	3b1f      	subs	r3, #31
 8001576:	40dd      	lsrs	r5, r3
 8001578:	2820      	cmp	r0, #32
 800157a:	d005      	beq.n	8001588 <__aeabi_dsub+0x3a0>
 800157c:	2340      	movs	r3, #64	@ 0x40
 800157e:	1a1b      	subs	r3, r3, r0
 8001580:	409a      	lsls	r2, r3
 8001582:	1e53      	subs	r3, r2, #1
 8001584:	419a      	sbcs	r2, r3
 8001586:	4315      	orrs	r5, r2
 8001588:	2307      	movs	r3, #7
 800158a:	2700      	movs	r7, #0
 800158c:	402b      	ands	r3, r5
 800158e:	e7d0      	b.n	8001532 <__aeabi_dsub+0x34a>
 8001590:	08c0      	lsrs	r0, r0, #3
 8001592:	0762      	lsls	r2, r4, #29
 8001594:	4302      	orrs	r2, r0
 8001596:	08e4      	lsrs	r4, r4, #3
 8001598:	e737      	b.n	800140a <__aeabi_dsub+0x222>
 800159a:	08ea      	lsrs	r2, r5, #3
 800159c:	0763      	lsls	r3, r4, #29
 800159e:	431a      	orrs	r2, r3
 80015a0:	4bd3      	ldr	r3, [pc, #844]	@ (80018f0 <__aeabi_dsub+0x708>)
 80015a2:	08e4      	lsrs	r4, r4, #3
 80015a4:	429f      	cmp	r7, r3
 80015a6:	d100      	bne.n	80015aa <__aeabi_dsub+0x3c2>
 80015a8:	e72f      	b.n	800140a <__aeabi_dsub+0x222>
 80015aa:	0324      	lsls	r4, r4, #12
 80015ac:	0b25      	lsrs	r5, r4, #12
 80015ae:	057c      	lsls	r4, r7, #21
 80015b0:	0d64      	lsrs	r4, r4, #21
 80015b2:	e6c2      	b.n	800133a <__aeabi_dsub+0x152>
 80015b4:	46ca      	mov	sl, r9
 80015b6:	0022      	movs	r2, r4
 80015b8:	4302      	orrs	r2, r0
 80015ba:	d158      	bne.n	800166e <__aeabi_dsub+0x486>
 80015bc:	4663      	mov	r3, ip
 80015be:	000e      	movs	r6, r1
 80015c0:	9c02      	ldr	r4, [sp, #8]
 80015c2:	9303      	str	r3, [sp, #12]
 80015c4:	9b03      	ldr	r3, [sp, #12]
 80015c6:	4657      	mov	r7, sl
 80015c8:	08da      	lsrs	r2, r3, #3
 80015ca:	e7e7      	b.n	800159c <__aeabi_dsub+0x3b4>
 80015cc:	4cc9      	ldr	r4, [pc, #804]	@ (80018f4 <__aeabi_dsub+0x70c>)
 80015ce:	1aff      	subs	r7, r7, r3
 80015d0:	4014      	ands	r4, r2
 80015d2:	e692      	b.n	80012fa <__aeabi_dsub+0x112>
 80015d4:	4dc8      	ldr	r5, [pc, #800]	@ (80018f8 <__aeabi_dsub+0x710>)
 80015d6:	1c7a      	adds	r2, r7, #1
 80015d8:	422a      	tst	r2, r5
 80015da:	d000      	beq.n	80015de <__aeabi_dsub+0x3f6>
 80015dc:	e084      	b.n	80016e8 <__aeabi_dsub+0x500>
 80015de:	0022      	movs	r2, r4
 80015e0:	4302      	orrs	r2, r0
 80015e2:	2f00      	cmp	r7, #0
 80015e4:	d000      	beq.n	80015e8 <__aeabi_dsub+0x400>
 80015e6:	e0ef      	b.n	80017c8 <__aeabi_dsub+0x5e0>
 80015e8:	2a00      	cmp	r2, #0
 80015ea:	d100      	bne.n	80015ee <__aeabi_dsub+0x406>
 80015ec:	e0e5      	b.n	80017ba <__aeabi_dsub+0x5d2>
 80015ee:	4662      	mov	r2, ip
 80015f0:	9902      	ldr	r1, [sp, #8]
 80015f2:	430a      	orrs	r2, r1
 80015f4:	d100      	bne.n	80015f8 <__aeabi_dsub+0x410>
 80015f6:	e0c5      	b.n	8001784 <__aeabi_dsub+0x59c>
 80015f8:	4663      	mov	r3, ip
 80015fa:	18c5      	adds	r5, r0, r3
 80015fc:	468c      	mov	ip, r1
 80015fe:	4285      	cmp	r5, r0
 8001600:	4180      	sbcs	r0, r0
 8001602:	4464      	add	r4, ip
 8001604:	4240      	negs	r0, r0
 8001606:	1824      	adds	r4, r4, r0
 8001608:	0223      	lsls	r3, r4, #8
 800160a:	d502      	bpl.n	8001612 <__aeabi_dsub+0x42a>
 800160c:	4bb9      	ldr	r3, [pc, #740]	@ (80018f4 <__aeabi_dsub+0x70c>)
 800160e:	3701      	adds	r7, #1
 8001610:	401c      	ands	r4, r3
 8001612:	46ba      	mov	sl, r7
 8001614:	9503      	str	r5, [sp, #12]
 8001616:	e7d5      	b.n	80015c4 <__aeabi_dsub+0x3dc>
 8001618:	4662      	mov	r2, ip
 800161a:	1a85      	subs	r5, r0, r2
 800161c:	42a8      	cmp	r0, r5
 800161e:	4192      	sbcs	r2, r2
 8001620:	4252      	negs	r2, r2
 8001622:	4691      	mov	r9, r2
 8001624:	9b02      	ldr	r3, [sp, #8]
 8001626:	1ae3      	subs	r3, r4, r3
 8001628:	001a      	movs	r2, r3
 800162a:	464b      	mov	r3, r9
 800162c:	1ad2      	subs	r2, r2, r3
 800162e:	0013      	movs	r3, r2
 8001630:	4691      	mov	r9, r2
 8001632:	021a      	lsls	r2, r3, #8
 8001634:	d46c      	bmi.n	8001710 <__aeabi_dsub+0x528>
 8001636:	464a      	mov	r2, r9
 8001638:	464c      	mov	r4, r9
 800163a:	432a      	orrs	r2, r5
 800163c:	d000      	beq.n	8001640 <__aeabi_dsub+0x458>
 800163e:	e63a      	b.n	80012b6 <__aeabi_dsub+0xce>
 8001640:	2600      	movs	r6, #0
 8001642:	2400      	movs	r4, #0
 8001644:	2500      	movs	r5, #0
 8001646:	e678      	b.n	800133a <__aeabi_dsub+0x152>
 8001648:	9902      	ldr	r1, [sp, #8]
 800164a:	4653      	mov	r3, sl
 800164c:	000d      	movs	r5, r1
 800164e:	3a20      	subs	r2, #32
 8001650:	40d5      	lsrs	r5, r2
 8001652:	2b20      	cmp	r3, #32
 8001654:	d006      	beq.n	8001664 <__aeabi_dsub+0x47c>
 8001656:	2240      	movs	r2, #64	@ 0x40
 8001658:	1ad2      	subs	r2, r2, r3
 800165a:	000b      	movs	r3, r1
 800165c:	4093      	lsls	r3, r2
 800165e:	4662      	mov	r2, ip
 8001660:	431a      	orrs	r2, r3
 8001662:	4693      	mov	fp, r2
 8001664:	465b      	mov	r3, fp
 8001666:	1e5a      	subs	r2, r3, #1
 8001668:	4193      	sbcs	r3, r2
 800166a:	431d      	orrs	r5, r3
 800166c:	e619      	b.n	80012a2 <__aeabi_dsub+0xba>
 800166e:	4653      	mov	r3, sl
 8001670:	1e5a      	subs	r2, r3, #1
 8001672:	2b01      	cmp	r3, #1
 8001674:	d100      	bne.n	8001678 <__aeabi_dsub+0x490>
 8001676:	e0c6      	b.n	8001806 <__aeabi_dsub+0x61e>
 8001678:	4e9d      	ldr	r6, [pc, #628]	@ (80018f0 <__aeabi_dsub+0x708>)
 800167a:	45b2      	cmp	sl, r6
 800167c:	d100      	bne.n	8001680 <__aeabi_dsub+0x498>
 800167e:	e6bd      	b.n	80013fc <__aeabi_dsub+0x214>
 8001680:	4688      	mov	r8, r1
 8001682:	000e      	movs	r6, r1
 8001684:	2501      	movs	r5, #1
 8001686:	2a38      	cmp	r2, #56	@ 0x38
 8001688:	dc10      	bgt.n	80016ac <__aeabi_dsub+0x4c4>
 800168a:	2a1f      	cmp	r2, #31
 800168c:	dc7f      	bgt.n	800178e <__aeabi_dsub+0x5a6>
 800168e:	2120      	movs	r1, #32
 8001690:	0025      	movs	r5, r4
 8001692:	1a89      	subs	r1, r1, r2
 8001694:	0007      	movs	r7, r0
 8001696:	4088      	lsls	r0, r1
 8001698:	408d      	lsls	r5, r1
 800169a:	40d7      	lsrs	r7, r2
 800169c:	40d4      	lsrs	r4, r2
 800169e:	1e41      	subs	r1, r0, #1
 80016a0:	4188      	sbcs	r0, r1
 80016a2:	9b02      	ldr	r3, [sp, #8]
 80016a4:	433d      	orrs	r5, r7
 80016a6:	1b1b      	subs	r3, r3, r4
 80016a8:	4305      	orrs	r5, r0
 80016aa:	9302      	str	r3, [sp, #8]
 80016ac:	4662      	mov	r2, ip
 80016ae:	1b55      	subs	r5, r2, r5
 80016b0:	45ac      	cmp	ip, r5
 80016b2:	4192      	sbcs	r2, r2
 80016b4:	9b02      	ldr	r3, [sp, #8]
 80016b6:	4252      	negs	r2, r2
 80016b8:	464f      	mov	r7, r9
 80016ba:	1a9c      	subs	r4, r3, r2
 80016bc:	e5f6      	b.n	80012ac <__aeabi_dsub+0xc4>
 80016be:	2d00      	cmp	r5, #0
 80016c0:	d000      	beq.n	80016c4 <__aeabi_dsub+0x4dc>
 80016c2:	e0b7      	b.n	8001834 <__aeabi_dsub+0x64c>
 80016c4:	2a00      	cmp	r2, #0
 80016c6:	d100      	bne.n	80016ca <__aeabi_dsub+0x4e2>
 80016c8:	e0f0      	b.n	80018ac <__aeabi_dsub+0x6c4>
 80016ca:	2601      	movs	r6, #1
 80016cc:	400e      	ands	r6, r1
 80016ce:	4663      	mov	r3, ip
 80016d0:	9802      	ldr	r0, [sp, #8]
 80016d2:	08d9      	lsrs	r1, r3, #3
 80016d4:	0742      	lsls	r2, r0, #29
 80016d6:	430a      	orrs	r2, r1
 80016d8:	08c4      	lsrs	r4, r0, #3
 80016da:	e696      	b.n	800140a <__aeabi_dsub+0x222>
 80016dc:	4c85      	ldr	r4, [pc, #532]	@ (80018f4 <__aeabi_dsub+0x70c>)
 80016de:	1aff      	subs	r7, r7, r3
 80016e0:	4014      	ands	r4, r2
 80016e2:	0762      	lsls	r2, r4, #29
 80016e4:	08e4      	lsrs	r4, r4, #3
 80016e6:	e760      	b.n	80015aa <__aeabi_dsub+0x3c2>
 80016e8:	4981      	ldr	r1, [pc, #516]	@ (80018f0 <__aeabi_dsub+0x708>)
 80016ea:	428a      	cmp	r2, r1
 80016ec:	d100      	bne.n	80016f0 <__aeabi_dsub+0x508>
 80016ee:	e0c9      	b.n	8001884 <__aeabi_dsub+0x69c>
 80016f0:	4663      	mov	r3, ip
 80016f2:	18c1      	adds	r1, r0, r3
 80016f4:	4281      	cmp	r1, r0
 80016f6:	4180      	sbcs	r0, r0
 80016f8:	9b02      	ldr	r3, [sp, #8]
 80016fa:	4240      	negs	r0, r0
 80016fc:	18e3      	adds	r3, r4, r3
 80016fe:	181b      	adds	r3, r3, r0
 8001700:	07dd      	lsls	r5, r3, #31
 8001702:	085c      	lsrs	r4, r3, #1
 8001704:	2307      	movs	r3, #7
 8001706:	0849      	lsrs	r1, r1, #1
 8001708:	430d      	orrs	r5, r1
 800170a:	0017      	movs	r7, r2
 800170c:	402b      	ands	r3, r5
 800170e:	e710      	b.n	8001532 <__aeabi_dsub+0x34a>
 8001710:	4663      	mov	r3, ip
 8001712:	1a1d      	subs	r5, r3, r0
 8001714:	45ac      	cmp	ip, r5
 8001716:	4192      	sbcs	r2, r2
 8001718:	2601      	movs	r6, #1
 800171a:	9b02      	ldr	r3, [sp, #8]
 800171c:	4252      	negs	r2, r2
 800171e:	1b1c      	subs	r4, r3, r4
 8001720:	4688      	mov	r8, r1
 8001722:	1aa4      	subs	r4, r4, r2
 8001724:	400e      	ands	r6, r1
 8001726:	e5c6      	b.n	80012b6 <__aeabi_dsub+0xce>
 8001728:	4663      	mov	r3, ip
 800172a:	18c5      	adds	r5, r0, r3
 800172c:	9b02      	ldr	r3, [sp, #8]
 800172e:	4285      	cmp	r5, r0
 8001730:	4180      	sbcs	r0, r0
 8001732:	469c      	mov	ip, r3
 8001734:	4240      	negs	r0, r0
 8001736:	4464      	add	r4, ip
 8001738:	1824      	adds	r4, r4, r0
 800173a:	2701      	movs	r7, #1
 800173c:	0223      	lsls	r3, r4, #8
 800173e:	d400      	bmi.n	8001742 <__aeabi_dsub+0x55a>
 8001740:	e6f5      	b.n	800152e <__aeabi_dsub+0x346>
 8001742:	2702      	movs	r7, #2
 8001744:	e641      	b.n	80013ca <__aeabi_dsub+0x1e2>
 8001746:	4663      	mov	r3, ip
 8001748:	1ac5      	subs	r5, r0, r3
 800174a:	42a8      	cmp	r0, r5
 800174c:	4180      	sbcs	r0, r0
 800174e:	9b02      	ldr	r3, [sp, #8]
 8001750:	4240      	negs	r0, r0
 8001752:	1ae4      	subs	r4, r4, r3
 8001754:	2701      	movs	r7, #1
 8001756:	1a24      	subs	r4, r4, r0
 8001758:	e5a8      	b.n	80012ac <__aeabi_dsub+0xc4>
 800175a:	9d02      	ldr	r5, [sp, #8]
 800175c:	4652      	mov	r2, sl
 800175e:	002b      	movs	r3, r5
 8001760:	3a20      	subs	r2, #32
 8001762:	40d3      	lsrs	r3, r2
 8001764:	0019      	movs	r1, r3
 8001766:	4653      	mov	r3, sl
 8001768:	2b20      	cmp	r3, #32
 800176a:	d006      	beq.n	800177a <__aeabi_dsub+0x592>
 800176c:	2240      	movs	r2, #64	@ 0x40
 800176e:	1ad2      	subs	r2, r2, r3
 8001770:	002b      	movs	r3, r5
 8001772:	4093      	lsls	r3, r2
 8001774:	4662      	mov	r2, ip
 8001776:	431a      	orrs	r2, r3
 8001778:	4693      	mov	fp, r2
 800177a:	465d      	mov	r5, fp
 800177c:	1e6b      	subs	r3, r5, #1
 800177e:	419d      	sbcs	r5, r3
 8001780:	430d      	orrs	r5, r1
 8001782:	e615      	b.n	80013b0 <__aeabi_dsub+0x1c8>
 8001784:	0762      	lsls	r2, r4, #29
 8001786:	08c0      	lsrs	r0, r0, #3
 8001788:	4302      	orrs	r2, r0
 800178a:	08e4      	lsrs	r4, r4, #3
 800178c:	e70d      	b.n	80015aa <__aeabi_dsub+0x3c2>
 800178e:	0011      	movs	r1, r2
 8001790:	0027      	movs	r7, r4
 8001792:	3920      	subs	r1, #32
 8001794:	40cf      	lsrs	r7, r1
 8001796:	2a20      	cmp	r2, #32
 8001798:	d005      	beq.n	80017a6 <__aeabi_dsub+0x5be>
 800179a:	2140      	movs	r1, #64	@ 0x40
 800179c:	1a8a      	subs	r2, r1, r2
 800179e:	4094      	lsls	r4, r2
 80017a0:	0025      	movs	r5, r4
 80017a2:	4305      	orrs	r5, r0
 80017a4:	9503      	str	r5, [sp, #12]
 80017a6:	9d03      	ldr	r5, [sp, #12]
 80017a8:	1e6a      	subs	r2, r5, #1
 80017aa:	4195      	sbcs	r5, r2
 80017ac:	433d      	orrs	r5, r7
 80017ae:	e77d      	b.n	80016ac <__aeabi_dsub+0x4c4>
 80017b0:	2a00      	cmp	r2, #0
 80017b2:	d100      	bne.n	80017b6 <__aeabi_dsub+0x5ce>
 80017b4:	e744      	b.n	8001640 <__aeabi_dsub+0x458>
 80017b6:	2601      	movs	r6, #1
 80017b8:	400e      	ands	r6, r1
 80017ba:	4663      	mov	r3, ip
 80017bc:	08d9      	lsrs	r1, r3, #3
 80017be:	9b02      	ldr	r3, [sp, #8]
 80017c0:	075a      	lsls	r2, r3, #29
 80017c2:	430a      	orrs	r2, r1
 80017c4:	08dc      	lsrs	r4, r3, #3
 80017c6:	e6f0      	b.n	80015aa <__aeabi_dsub+0x3c2>
 80017c8:	2a00      	cmp	r2, #0
 80017ca:	d028      	beq.n	800181e <__aeabi_dsub+0x636>
 80017cc:	4662      	mov	r2, ip
 80017ce:	9f02      	ldr	r7, [sp, #8]
 80017d0:	08c0      	lsrs	r0, r0, #3
 80017d2:	433a      	orrs	r2, r7
 80017d4:	d100      	bne.n	80017d8 <__aeabi_dsub+0x5f0>
 80017d6:	e6dc      	b.n	8001592 <__aeabi_dsub+0x3aa>
 80017d8:	0762      	lsls	r2, r4, #29
 80017da:	4310      	orrs	r0, r2
 80017dc:	2280      	movs	r2, #128	@ 0x80
 80017de:	08e4      	lsrs	r4, r4, #3
 80017e0:	0312      	lsls	r2, r2, #12
 80017e2:	4214      	tst	r4, r2
 80017e4:	d009      	beq.n	80017fa <__aeabi_dsub+0x612>
 80017e6:	08fd      	lsrs	r5, r7, #3
 80017e8:	4215      	tst	r5, r2
 80017ea:	d106      	bne.n	80017fa <__aeabi_dsub+0x612>
 80017ec:	4663      	mov	r3, ip
 80017ee:	2601      	movs	r6, #1
 80017f0:	002c      	movs	r4, r5
 80017f2:	08d8      	lsrs	r0, r3, #3
 80017f4:	077b      	lsls	r3, r7, #29
 80017f6:	4318      	orrs	r0, r3
 80017f8:	400e      	ands	r6, r1
 80017fa:	0f42      	lsrs	r2, r0, #29
 80017fc:	00c0      	lsls	r0, r0, #3
 80017fe:	08c0      	lsrs	r0, r0, #3
 8001800:	0752      	lsls	r2, r2, #29
 8001802:	4302      	orrs	r2, r0
 8001804:	e601      	b.n	800140a <__aeabi_dsub+0x222>
 8001806:	4663      	mov	r3, ip
 8001808:	1a1d      	subs	r5, r3, r0
 800180a:	45ac      	cmp	ip, r5
 800180c:	4192      	sbcs	r2, r2
 800180e:	9b02      	ldr	r3, [sp, #8]
 8001810:	4252      	negs	r2, r2
 8001812:	1b1c      	subs	r4, r3, r4
 8001814:	000e      	movs	r6, r1
 8001816:	4688      	mov	r8, r1
 8001818:	2701      	movs	r7, #1
 800181a:	1aa4      	subs	r4, r4, r2
 800181c:	e546      	b.n	80012ac <__aeabi_dsub+0xc4>
 800181e:	4663      	mov	r3, ip
 8001820:	08d9      	lsrs	r1, r3, #3
 8001822:	9b02      	ldr	r3, [sp, #8]
 8001824:	075a      	lsls	r2, r3, #29
 8001826:	430a      	orrs	r2, r1
 8001828:	08dc      	lsrs	r4, r3, #3
 800182a:	e5ee      	b.n	800140a <__aeabi_dsub+0x222>
 800182c:	4663      	mov	r3, ip
 800182e:	9c02      	ldr	r4, [sp, #8]
 8001830:	9303      	str	r3, [sp, #12]
 8001832:	e6c7      	b.n	80015c4 <__aeabi_dsub+0x3dc>
 8001834:	08c0      	lsrs	r0, r0, #3
 8001836:	2a00      	cmp	r2, #0
 8001838:	d100      	bne.n	800183c <__aeabi_dsub+0x654>
 800183a:	e6aa      	b.n	8001592 <__aeabi_dsub+0x3aa>
 800183c:	0762      	lsls	r2, r4, #29
 800183e:	4310      	orrs	r0, r2
 8001840:	2280      	movs	r2, #128	@ 0x80
 8001842:	08e4      	lsrs	r4, r4, #3
 8001844:	0312      	lsls	r2, r2, #12
 8001846:	4214      	tst	r4, r2
 8001848:	d0d7      	beq.n	80017fa <__aeabi_dsub+0x612>
 800184a:	9f02      	ldr	r7, [sp, #8]
 800184c:	08fd      	lsrs	r5, r7, #3
 800184e:	4215      	tst	r5, r2
 8001850:	d1d3      	bne.n	80017fa <__aeabi_dsub+0x612>
 8001852:	4663      	mov	r3, ip
 8001854:	2601      	movs	r6, #1
 8001856:	08d8      	lsrs	r0, r3, #3
 8001858:	077b      	lsls	r3, r7, #29
 800185a:	002c      	movs	r4, r5
 800185c:	4318      	orrs	r0, r3
 800185e:	400e      	ands	r6, r1
 8001860:	e7cb      	b.n	80017fa <__aeabi_dsub+0x612>
 8001862:	000a      	movs	r2, r1
 8001864:	0027      	movs	r7, r4
 8001866:	3a20      	subs	r2, #32
 8001868:	40d7      	lsrs	r7, r2
 800186a:	2920      	cmp	r1, #32
 800186c:	d005      	beq.n	800187a <__aeabi_dsub+0x692>
 800186e:	2240      	movs	r2, #64	@ 0x40
 8001870:	1a52      	subs	r2, r2, r1
 8001872:	4094      	lsls	r4, r2
 8001874:	0025      	movs	r5, r4
 8001876:	4305      	orrs	r5, r0
 8001878:	9503      	str	r5, [sp, #12]
 800187a:	9d03      	ldr	r5, [sp, #12]
 800187c:	1e6a      	subs	r2, r5, #1
 800187e:	4195      	sbcs	r5, r2
 8001880:	432f      	orrs	r7, r5
 8001882:	e610      	b.n	80014a6 <__aeabi_dsub+0x2be>
 8001884:	0014      	movs	r4, r2
 8001886:	2500      	movs	r5, #0
 8001888:	2200      	movs	r2, #0
 800188a:	e556      	b.n	800133a <__aeabi_dsub+0x152>
 800188c:	9b02      	ldr	r3, [sp, #8]
 800188e:	4460      	add	r0, ip
 8001890:	4699      	mov	r9, r3
 8001892:	4560      	cmp	r0, ip
 8001894:	4192      	sbcs	r2, r2
 8001896:	444c      	add	r4, r9
 8001898:	4252      	negs	r2, r2
 800189a:	0005      	movs	r5, r0
 800189c:	18a4      	adds	r4, r4, r2
 800189e:	e74c      	b.n	800173a <__aeabi_dsub+0x552>
 80018a0:	001a      	movs	r2, r3
 80018a2:	001c      	movs	r4, r3
 80018a4:	432a      	orrs	r2, r5
 80018a6:	d000      	beq.n	80018aa <__aeabi_dsub+0x6c2>
 80018a8:	e6b3      	b.n	8001612 <__aeabi_dsub+0x42a>
 80018aa:	e6c9      	b.n	8001640 <__aeabi_dsub+0x458>
 80018ac:	2480      	movs	r4, #128	@ 0x80
 80018ae:	2600      	movs	r6, #0
 80018b0:	0324      	lsls	r4, r4, #12
 80018b2:	e5ae      	b.n	8001412 <__aeabi_dsub+0x22a>
 80018b4:	2120      	movs	r1, #32
 80018b6:	2500      	movs	r5, #0
 80018b8:	1a09      	subs	r1, r1, r0
 80018ba:	e517      	b.n	80012ec <__aeabi_dsub+0x104>
 80018bc:	2200      	movs	r2, #0
 80018be:	2500      	movs	r5, #0
 80018c0:	4c0b      	ldr	r4, [pc, #44]	@ (80018f0 <__aeabi_dsub+0x708>)
 80018c2:	e53a      	b.n	800133a <__aeabi_dsub+0x152>
 80018c4:	2d00      	cmp	r5, #0
 80018c6:	d100      	bne.n	80018ca <__aeabi_dsub+0x6e2>
 80018c8:	e5f6      	b.n	80014b8 <__aeabi_dsub+0x2d0>
 80018ca:	464b      	mov	r3, r9
 80018cc:	1bda      	subs	r2, r3, r7
 80018ce:	4692      	mov	sl, r2
 80018d0:	2f00      	cmp	r7, #0
 80018d2:	d100      	bne.n	80018d6 <__aeabi_dsub+0x6ee>
 80018d4:	e66f      	b.n	80015b6 <__aeabi_dsub+0x3ce>
 80018d6:	2a38      	cmp	r2, #56	@ 0x38
 80018d8:	dc05      	bgt.n	80018e6 <__aeabi_dsub+0x6fe>
 80018da:	2680      	movs	r6, #128	@ 0x80
 80018dc:	0436      	lsls	r6, r6, #16
 80018de:	4334      	orrs	r4, r6
 80018e0:	4688      	mov	r8, r1
 80018e2:	000e      	movs	r6, r1
 80018e4:	e6d1      	b.n	800168a <__aeabi_dsub+0x4a2>
 80018e6:	4688      	mov	r8, r1
 80018e8:	000e      	movs	r6, r1
 80018ea:	2501      	movs	r5, #1
 80018ec:	e6de      	b.n	80016ac <__aeabi_dsub+0x4c4>
 80018ee:	46c0      	nop			@ (mov r8, r8)
 80018f0:	000007ff 	.word	0x000007ff
 80018f4:	ff7fffff 	.word	0xff7fffff
 80018f8:	000007fe 	.word	0x000007fe
 80018fc:	2d00      	cmp	r5, #0
 80018fe:	d100      	bne.n	8001902 <__aeabi_dsub+0x71a>
 8001900:	e668      	b.n	80015d4 <__aeabi_dsub+0x3ec>
 8001902:	464b      	mov	r3, r9
 8001904:	1bd9      	subs	r1, r3, r7
 8001906:	2f00      	cmp	r7, #0
 8001908:	d101      	bne.n	800190e <__aeabi_dsub+0x726>
 800190a:	468a      	mov	sl, r1
 800190c:	e5a7      	b.n	800145e <__aeabi_dsub+0x276>
 800190e:	2701      	movs	r7, #1
 8001910:	2938      	cmp	r1, #56	@ 0x38
 8001912:	dd00      	ble.n	8001916 <__aeabi_dsub+0x72e>
 8001914:	e5c7      	b.n	80014a6 <__aeabi_dsub+0x2be>
 8001916:	2280      	movs	r2, #128	@ 0x80
 8001918:	0412      	lsls	r2, r2, #16
 800191a:	4314      	orrs	r4, r2
 800191c:	e5af      	b.n	800147e <__aeabi_dsub+0x296>
 800191e:	46c0      	nop			@ (mov r8, r8)

08001920 <__aeabi_d2iz>:
 8001920:	000b      	movs	r3, r1
 8001922:	0002      	movs	r2, r0
 8001924:	b570      	push	{r4, r5, r6, lr}
 8001926:	4d16      	ldr	r5, [pc, #88]	@ (8001980 <__aeabi_d2iz+0x60>)
 8001928:	030c      	lsls	r4, r1, #12
 800192a:	b082      	sub	sp, #8
 800192c:	0049      	lsls	r1, r1, #1
 800192e:	2000      	movs	r0, #0
 8001930:	9200      	str	r2, [sp, #0]
 8001932:	9301      	str	r3, [sp, #4]
 8001934:	0b24      	lsrs	r4, r4, #12
 8001936:	0d49      	lsrs	r1, r1, #21
 8001938:	0fde      	lsrs	r6, r3, #31
 800193a:	42a9      	cmp	r1, r5
 800193c:	dd04      	ble.n	8001948 <__aeabi_d2iz+0x28>
 800193e:	4811      	ldr	r0, [pc, #68]	@ (8001984 <__aeabi_d2iz+0x64>)
 8001940:	4281      	cmp	r1, r0
 8001942:	dd03      	ble.n	800194c <__aeabi_d2iz+0x2c>
 8001944:	4b10      	ldr	r3, [pc, #64]	@ (8001988 <__aeabi_d2iz+0x68>)
 8001946:	18f0      	adds	r0, r6, r3
 8001948:	b002      	add	sp, #8
 800194a:	bd70      	pop	{r4, r5, r6, pc}
 800194c:	2080      	movs	r0, #128	@ 0x80
 800194e:	0340      	lsls	r0, r0, #13
 8001950:	4320      	orrs	r0, r4
 8001952:	4c0e      	ldr	r4, [pc, #56]	@ (800198c <__aeabi_d2iz+0x6c>)
 8001954:	1a64      	subs	r4, r4, r1
 8001956:	2c1f      	cmp	r4, #31
 8001958:	dd08      	ble.n	800196c <__aeabi_d2iz+0x4c>
 800195a:	4b0d      	ldr	r3, [pc, #52]	@ (8001990 <__aeabi_d2iz+0x70>)
 800195c:	1a5b      	subs	r3, r3, r1
 800195e:	40d8      	lsrs	r0, r3
 8001960:	0003      	movs	r3, r0
 8001962:	4258      	negs	r0, r3
 8001964:	2e00      	cmp	r6, #0
 8001966:	d1ef      	bne.n	8001948 <__aeabi_d2iz+0x28>
 8001968:	0018      	movs	r0, r3
 800196a:	e7ed      	b.n	8001948 <__aeabi_d2iz+0x28>
 800196c:	4b09      	ldr	r3, [pc, #36]	@ (8001994 <__aeabi_d2iz+0x74>)
 800196e:	9a00      	ldr	r2, [sp, #0]
 8001970:	469c      	mov	ip, r3
 8001972:	0003      	movs	r3, r0
 8001974:	4461      	add	r1, ip
 8001976:	408b      	lsls	r3, r1
 8001978:	40e2      	lsrs	r2, r4
 800197a:	4313      	orrs	r3, r2
 800197c:	e7f1      	b.n	8001962 <__aeabi_d2iz+0x42>
 800197e:	46c0      	nop			@ (mov r8, r8)
 8001980:	000003fe 	.word	0x000003fe
 8001984:	0000041d 	.word	0x0000041d
 8001988:	7fffffff 	.word	0x7fffffff
 800198c:	00000433 	.word	0x00000433
 8001990:	00000413 	.word	0x00000413
 8001994:	fffffbed 	.word	0xfffffbed

08001998 <__aeabi_i2d>:
 8001998:	b570      	push	{r4, r5, r6, lr}
 800199a:	2800      	cmp	r0, #0
 800199c:	d016      	beq.n	80019cc <__aeabi_i2d+0x34>
 800199e:	17c3      	asrs	r3, r0, #31
 80019a0:	18c5      	adds	r5, r0, r3
 80019a2:	405d      	eors	r5, r3
 80019a4:	0fc4      	lsrs	r4, r0, #31
 80019a6:	0028      	movs	r0, r5
 80019a8:	f000 f848 	bl	8001a3c <__clzsi2>
 80019ac:	4b10      	ldr	r3, [pc, #64]	@ (80019f0 <__aeabi_i2d+0x58>)
 80019ae:	1a1b      	subs	r3, r3, r0
 80019b0:	055b      	lsls	r3, r3, #21
 80019b2:	0d5b      	lsrs	r3, r3, #21
 80019b4:	280a      	cmp	r0, #10
 80019b6:	dc14      	bgt.n	80019e2 <__aeabi_i2d+0x4a>
 80019b8:	0002      	movs	r2, r0
 80019ba:	002e      	movs	r6, r5
 80019bc:	3215      	adds	r2, #21
 80019be:	4096      	lsls	r6, r2
 80019c0:	220b      	movs	r2, #11
 80019c2:	1a12      	subs	r2, r2, r0
 80019c4:	40d5      	lsrs	r5, r2
 80019c6:	032d      	lsls	r5, r5, #12
 80019c8:	0b2d      	lsrs	r5, r5, #12
 80019ca:	e003      	b.n	80019d4 <__aeabi_i2d+0x3c>
 80019cc:	2400      	movs	r4, #0
 80019ce:	2300      	movs	r3, #0
 80019d0:	2500      	movs	r5, #0
 80019d2:	2600      	movs	r6, #0
 80019d4:	051b      	lsls	r3, r3, #20
 80019d6:	432b      	orrs	r3, r5
 80019d8:	07e4      	lsls	r4, r4, #31
 80019da:	4323      	orrs	r3, r4
 80019dc:	0030      	movs	r0, r6
 80019de:	0019      	movs	r1, r3
 80019e0:	bd70      	pop	{r4, r5, r6, pc}
 80019e2:	380b      	subs	r0, #11
 80019e4:	4085      	lsls	r5, r0
 80019e6:	032d      	lsls	r5, r5, #12
 80019e8:	2600      	movs	r6, #0
 80019ea:	0b2d      	lsrs	r5, r5, #12
 80019ec:	e7f2      	b.n	80019d4 <__aeabi_i2d+0x3c>
 80019ee:	46c0      	nop			@ (mov r8, r8)
 80019f0:	0000041e 	.word	0x0000041e

080019f4 <__aeabi_ui2d>:
 80019f4:	b510      	push	{r4, lr}
 80019f6:	1e04      	subs	r4, r0, #0
 80019f8:	d010      	beq.n	8001a1c <__aeabi_ui2d+0x28>
 80019fa:	f000 f81f 	bl	8001a3c <__clzsi2>
 80019fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001a38 <__aeabi_ui2d+0x44>)
 8001a00:	1a1b      	subs	r3, r3, r0
 8001a02:	055b      	lsls	r3, r3, #21
 8001a04:	0d5b      	lsrs	r3, r3, #21
 8001a06:	280a      	cmp	r0, #10
 8001a08:	dc0f      	bgt.n	8001a2a <__aeabi_ui2d+0x36>
 8001a0a:	220b      	movs	r2, #11
 8001a0c:	0021      	movs	r1, r4
 8001a0e:	1a12      	subs	r2, r2, r0
 8001a10:	40d1      	lsrs	r1, r2
 8001a12:	3015      	adds	r0, #21
 8001a14:	030a      	lsls	r2, r1, #12
 8001a16:	4084      	lsls	r4, r0
 8001a18:	0b12      	lsrs	r2, r2, #12
 8001a1a:	e001      	b.n	8001a20 <__aeabi_ui2d+0x2c>
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	2200      	movs	r2, #0
 8001a20:	051b      	lsls	r3, r3, #20
 8001a22:	4313      	orrs	r3, r2
 8001a24:	0020      	movs	r0, r4
 8001a26:	0019      	movs	r1, r3
 8001a28:	bd10      	pop	{r4, pc}
 8001a2a:	0022      	movs	r2, r4
 8001a2c:	380b      	subs	r0, #11
 8001a2e:	4082      	lsls	r2, r0
 8001a30:	0312      	lsls	r2, r2, #12
 8001a32:	2400      	movs	r4, #0
 8001a34:	0b12      	lsrs	r2, r2, #12
 8001a36:	e7f3      	b.n	8001a20 <__aeabi_ui2d+0x2c>
 8001a38:	0000041e 	.word	0x0000041e

08001a3c <__clzsi2>:
 8001a3c:	211c      	movs	r1, #28
 8001a3e:	2301      	movs	r3, #1
 8001a40:	041b      	lsls	r3, r3, #16
 8001a42:	4298      	cmp	r0, r3
 8001a44:	d301      	bcc.n	8001a4a <__clzsi2+0xe>
 8001a46:	0c00      	lsrs	r0, r0, #16
 8001a48:	3910      	subs	r1, #16
 8001a4a:	0a1b      	lsrs	r3, r3, #8
 8001a4c:	4298      	cmp	r0, r3
 8001a4e:	d301      	bcc.n	8001a54 <__clzsi2+0x18>
 8001a50:	0a00      	lsrs	r0, r0, #8
 8001a52:	3908      	subs	r1, #8
 8001a54:	091b      	lsrs	r3, r3, #4
 8001a56:	4298      	cmp	r0, r3
 8001a58:	d301      	bcc.n	8001a5e <__clzsi2+0x22>
 8001a5a:	0900      	lsrs	r0, r0, #4
 8001a5c:	3904      	subs	r1, #4
 8001a5e:	a202      	add	r2, pc, #8	@ (adr r2, 8001a68 <__clzsi2+0x2c>)
 8001a60:	5c10      	ldrb	r0, [r2, r0]
 8001a62:	1840      	adds	r0, r0, r1
 8001a64:	4770      	bx	lr
 8001a66:	46c0      	nop			@ (mov r8, r8)
 8001a68:	02020304 	.word	0x02020304
 8001a6c:	01010101 	.word	0x01010101
	...

08001a78 <UART_SendString>:

    HAL_UART_Receive_IT(&huart2, &Rx_data, 1); // Now receive the message

}

void UART_SendString(char * string) {
 8001a78:	b510      	push	{r4, lr}
 8001a7a:	0004      	movs	r4, r0
  HAL_UART_Transmit( & huart2, (uint8_t * ) string, strlen(string), 1000);
 8001a7c:	f7fe fb44 	bl	8000108 <strlen>
 8001a80:	23fa      	movs	r3, #250	@ 0xfa
 8001a82:	b282      	uxth	r2, r0
 8001a84:	0021      	movs	r1, r4
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	4801      	ldr	r0, [pc, #4]	@ (8001a90 <UART_SendString+0x18>)
 8001a8a:	f002 fc55 	bl	8004338 <HAL_UART_Transmit>
  //HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
}
 8001a8e:	bd10      	pop	{r4, pc}
 8001a90:	20000144 	.word	0x20000144

08001a94 <HAL_UART_RxCpltCallback>:
{
 8001a94:	b570      	push	{r4, r5, r6, lr}
    ring_buffer_queue(&ring_buffer, Rx_data);
 8001a96:	4c09      	ldr	r4, [pc, #36]	@ (8001abc <HAL_UART_RxCpltCallback+0x28>)
 8001a98:	4d09      	ldr	r5, [pc, #36]	@ (8001ac0 <HAL_UART_RxCpltCallback+0x2c>)
 8001a9a:	b2e1      	uxtb	r1, r4
 8001a9c:	0028      	movs	r0, r5
 8001a9e:	f000 fb71 	bl	8002184 <ring_buffer_queue>
    ring_buffer_dequeue(&ring_buffer, &Rx_data);
 8001aa2:	0021      	movs	r1, r4
 8001aa4:	0028      	movs	r0, r5
 8001aa6:	f000 fb82 	bl	80021ae <ring_buffer_dequeue>
    UART_SendString(Rx_data);
 8001aaa:	0020      	movs	r0, r4
 8001aac:	f7ff ffe4 	bl	8001a78 <UART_SendString>
    HAL_UART_Receive_IT(&huart2, &Rx_data, 1); // Now receive the message
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	0021      	movs	r1, r4
 8001ab4:	4803      	ldr	r0, [pc, #12]	@ (8001ac4 <HAL_UART_RxCpltCallback+0x30>)
 8001ab6:	f002 fdd7 	bl	8004668 <HAL_UART_Receive_IT>
}
 8001aba:	bd70      	pop	{r4, r5, r6, pc}
 8001abc:	200000a8 	.word	0x200000a8
 8001ac0:	20000134 	.word	0x20000134
 8001ac4:	20000144 	.word	0x20000144

08001ac8 <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001ac8:	b510      	push	{r4, lr}
  //HAL_UART_Receive(&huart2, rxBuffer, Size, 1000);
  //HAL_UART_Transmit(&huart2, rxBuffer, 20, 1000);
  char *textt = "HAL_UARTEx_RxEventCallback!!\n";
  UART_SendString(textt);
 8001aca:	4802      	ldr	r0, [pc, #8]	@ (8001ad4 <HAL_UARTEx_RxEventCallback+0xc>)
 8001acc:	f7ff ffd4 	bl	8001a78 <UART_SendString>

}
 8001ad0:	bd10      	pop	{r4, pc}
 8001ad2:	46c0      	nop			@ (mov r8, r8)
 8001ad4:	08005684 	.word	0x08005684

08001ad8 <UpdatePWMDutyCycle>:
    // Generate sine wave data from 0 to TIM_Period
    sine_wave_data[i] = (htim1.Init.Period / 2) * (1 + sin(2 * (3.14159265358979323846) * i / SINE_WAVE_RES));
  }
}

void UpdatePWMDutyCycle(uint32_t channel, uint32_t value) {
 8001ad8:	b530      	push	{r4, r5, lr}
 8001ada:	000c      	movs	r4, r1
 8001adc:	b089      	sub	sp, #36	@ 0x24
 8001ade:	0005      	movs	r5, r0
  TIM_OC_InitTypeDef sConfigOC = {
 8001ae0:	2214      	movs	r2, #20
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	a803      	add	r0, sp, #12
 8001ae6:	f002 fee3 	bl	80048b0 <memset>
    0
  };

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001aea:	2360      	movs	r3, #96	@ 0x60
  sConfigOC.Pulse = value;
 8001aec:	9402      	str	r4, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
  HAL_TIM_PWM_ConfigChannel( & htim1, & sConfigOC, channel);
 8001aee:	4c06      	ldr	r4, [pc, #24]	@ (8001b08 <UpdatePWMDutyCycle+0x30>)
 8001af0:	002a      	movs	r2, r5
 8001af2:	a901      	add	r1, sp, #4
 8001af4:	0020      	movs	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001af6:	9301      	str	r3, [sp, #4]
  HAL_TIM_PWM_ConfigChannel( & htim1, & sConfigOC, channel);
 8001af8:	f001 fc2c 	bl	8003354 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_PWM_Start( & htim1, channel); // Start PWM
 8001afc:	0029      	movs	r1, r5
 8001afe:	0020      	movs	r0, r4
 8001b00:	f001 fdcc 	bl	800369c <HAL_TIM_PWM_Start>
}
 8001b04:	b009      	add	sp, #36	@ 0x24
 8001b06:	bd30      	pop	{r4, r5, pc}
 8001b08:	200001d8 	.word	0x200001d8

08001b0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b0c:	b500      	push	{lr}
 8001b0e:	b08d      	sub	sp, #52	@ 0x34
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b10:	2218      	movs	r2, #24
 8001b12:	2100      	movs	r1, #0
 8001b14:	a806      	add	r0, sp, #24
 8001b16:	f002 fecb 	bl	80048b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	2214      	movs	r2, #20
 8001b1e:	4668      	mov	r0, sp
 8001b20:	f002 fec6 	bl	80048b0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b24:	2302      	movs	r3, #2
 8001b26:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b28:	33fe      	adds	r3, #254	@ 0xfe
 8001b2a:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV4;
 8001b2c:	2380      	movs	r3, #128	@ 0x80
 8001b2e:	015b      	lsls	r3, r3, #5
 8001b30:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b32:	2340      	movs	r3, #64	@ 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b34:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b36:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b38:	f000 ff78 	bl	8002a2c <HAL_RCC_OscConfig>
 8001b3c:	1e01      	subs	r1, r0, #0
 8001b3e:	d001      	beq.n	8001b44 <SystemClock_Config+0x38>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b40:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {}
 8001b42:	e7fe      	b.n	8001b42 <SystemClock_Config+0x36>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b44:	2307      	movs	r3, #7
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001b46:	9001      	str	r0, [sp, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001b48:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001b4a:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001b4c:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001b4e:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b50:	9300      	str	r3, [sp, #0]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001b52:	f001 f8c7 	bl	8002ce4 <HAL_RCC_ClockConfig>
 8001b56:	2800      	cmp	r0, #0
 8001b58:	d001      	beq.n	8001b5e <SystemClock_Config+0x52>
 8001b5a:	b672      	cpsid	i
  while (1) {}
 8001b5c:	e7fe      	b.n	8001b5c <SystemClock_Config+0x50>
}
 8001b5e:	b00d      	add	sp, #52	@ 0x34
 8001b60:	bd00      	pop	{pc}
	...

08001b64 <motor_encoderUpdate2>:
{
 8001b64:	b570      	push	{r4, r5, r6, lr}
 8001b66:	ac04      	add	r4, sp, #16
 8001b68:	7824      	ldrb	r4, [r4, #0]
    uint32_t state = (pin0_prev << 3) | (pin1_prev << 2) | (pin0_new << 1) | pin1_new;
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	4323      	orrs	r3, r4
 8001b6e:	0092      	lsls	r2, r2, #2
 8001b70:	4313      	orrs	r3, r2
 8001b72:	00c9      	lsls	r1, r1, #3
 8001b74:	4319      	orrs	r1, r3
    switch (state) {
 8001b76:	290d      	cmp	r1, #13
 8001b78:	d816      	bhi.n	8001ba8 <motor_encoderUpdate2+0x44>
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	408b      	lsls	r3, r1
 8001b7e:	4a0c      	ldr	r2, [pc, #48]	@ (8001bb0 <motor_encoderUpdate2+0x4c>)
 8001b80:	4213      	tst	r3, r2
 8001b82:	d10c      	bne.n	8001b9e <motor_encoderUpdate2+0x3a>
 8001b84:	4a0b      	ldr	r2, [pc, #44]	@ (8001bb4 <motor_encoderUpdate2+0x50>)
 8001b86:	4213      	tst	r3, r2
 8001b88:	d00e      	beq.n	8001ba8 <motor_encoderUpdate2+0x44>
            (*pos)--;
 8001b8a:	6802      	ldr	r2, [r0, #0]
 8001b8c:	6843      	ldr	r3, [r0, #4]
 8001b8e:	2401      	movs	r4, #1
 8001b90:	4264      	negs	r4, r4
 8001b92:	17e5      	asrs	r5, r4, #31
            (*pos)++;
 8001b94:	1912      	adds	r2, r2, r4
 8001b96:	416b      	adcs	r3, r5
 8001b98:	6002      	str	r2, [r0, #0]
 8001b9a:	6043      	str	r3, [r0, #4]
}
 8001b9c:	bd70      	pop	{r4, r5, r6, pc}
            (*pos)++;
 8001b9e:	2401      	movs	r4, #1
 8001ba0:	6802      	ldr	r2, [r0, #0]
 8001ba2:	6843      	ldr	r3, [r0, #4]
 8001ba4:	2500      	movs	r5, #0
 8001ba6:	e7f5      	b.n	8001b94 <motor_encoderUpdate2+0x30>
	    UART_SendString("ERROR FOUND\n");
 8001ba8:	4803      	ldr	r0, [pc, #12]	@ (8001bb8 <motor_encoderUpdate2+0x54>)
 8001baa:	f7ff ff65 	bl	8001a78 <UART_SendString>
}
 8001bae:	e7f5      	b.n	8001b9c <motor_encoderUpdate2+0x38>
 8001bb0:	00001814 	.word	0x00001814
 8001bb4:	00002182 	.word	0x00002182
 8001bb8:	080056a2 	.word	0x080056a2

08001bbc <HAL_GPIO_EXTI_Rising_Callback>:
{
 8001bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
    pinA0_prev = pinA0_new;
 8001bbe:	4b22      	ldr	r3, [pc, #136]	@ (8001c48 <HAL_GPIO_EXTI_Rising_Callback+0x8c>)
    pinA1_prev = pinA1_new;
 8001bc0:	4a22      	ldr	r2, [pc, #136]	@ (8001c4c <HAL_GPIO_EXTI_Rising_Callback+0x90>)
    pinA0_prev = pinA0_new;
 8001bc2:	781d      	ldrb	r5, [r3, #0]
 8001bc4:	469c      	mov	ip, r3
 8001bc6:	4b22      	ldr	r3, [pc, #136]	@ (8001c50 <HAL_GPIO_EXTI_Rising_Callback+0x94>)
    pinB0_prev = pinB0_new;
 8001bc8:	4f22      	ldr	r7, [pc, #136]	@ (8001c54 <HAL_GPIO_EXTI_Rising_Callback+0x98>)
    pinA0_prev = pinA0_new;
 8001bca:	701d      	strb	r5, [r3, #0]
    pinA1_prev = pinA1_new;
 8001bcc:	4b22      	ldr	r3, [pc, #136]	@ (8001c58 <HAL_GPIO_EXTI_Rising_Callback+0x9c>)
    pinB0_prev = pinB0_new;
 8001bce:	7839      	ldrb	r1, [r7, #0]
    pinA1_prev = pinA1_new;
 8001bd0:	781e      	ldrb	r6, [r3, #0]
{
 8001bd2:	b085      	sub	sp, #20
    pinA1_prev = pinA1_new;
 8001bd4:	7016      	strb	r6, [r2, #0]
    pinB0_prev = pinB0_new;
 8001bd6:	4a21      	ldr	r2, [pc, #132]	@ (8001c5c <HAL_GPIO_EXTI_Rising_Callback+0xa0>)
{
 8001bd8:	0004      	movs	r4, r0
    pinB0_prev = pinB0_new;
 8001bda:	7011      	strb	r1, [r2, #0]
    pinB1_prev = pinB1_new;
 8001bdc:	4a20      	ldr	r2, [pc, #128]	@ (8001c60 <HAL_GPIO_EXTI_Rising_Callback+0xa4>)
 8001bde:	4821      	ldr	r0, [pc, #132]	@ (8001c64 <HAL_GPIO_EXTI_Rising_Callback+0xa8>)
 8001be0:	9203      	str	r2, [sp, #12]
 8001be2:	7812      	ldrb	r2, [r2, #0]
 8001be4:	7002      	strb	r2, [r0, #0]
    switch (GPIO_Pin) {
 8001be6:	2080      	movs	r0, #128	@ 0x80
 8001be8:	0180      	lsls	r0, r0, #6
 8001bea:	4284      	cmp	r4, r0
 8001bec:	d00f      	beq.n	8001c0e <HAL_GPIO_EXTI_Rising_Callback+0x52>
 8001bee:	d808      	bhi.n	8001c02 <HAL_GPIO_EXTI_Rising_Callback+0x46>
 8001bf0:	2c40      	cmp	r4, #64	@ 0x40
 8001bf2:	d01d      	beq.n	8001c30 <HAL_GPIO_EXTI_Rising_Callback+0x74>
 8001bf4:	2180      	movs	r1, #128	@ 0x80
            pinA0_new = (GPIO_Pin == MOTORA_ENCODERPIN_0) ? 1 : pinA0_new;
 8001bf6:	2201      	movs	r2, #1
    switch (GPIO_Pin) {
 8001bf8:	0149      	lsls	r1, r1, #5
 8001bfa:	428c      	cmp	r4, r1
 8001bfc:	d008      	beq.n	8001c10 <HAL_GPIO_EXTI_Rising_Callback+0x54>
}
 8001bfe:	b005      	add	sp, #20
 8001c00:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch (GPIO_Pin) {
 8001c02:	2380      	movs	r3, #128	@ 0x80
 8001c04:	01db      	lsls	r3, r3, #7
 8001c06:	429c      	cmp	r4, r3
 8001c08:	d1f9      	bne.n	8001bfe <HAL_GPIO_EXTI_Rising_Callback+0x42>
            pinB0_new = (GPIO_Pin == MOTORB_ENCODERPIN_0) ? 1 : pinB0_new;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e011      	b.n	8001c32 <HAL_GPIO_EXTI_Rising_Callback+0x76>
            pinA0_new = (GPIO_Pin == MOTORA_ENCODERPIN_0) ? 1 : pinA0_new;
 8001c0e:	002a      	movs	r2, r5
 8001c10:	4661      	mov	r1, ip
 8001c12:	700a      	strb	r2, [r1, #0]
            pinA1_new = (GPIO_Pin == MOTORA_ENCODERPIN_1) ? 1 : pinA1_new;
 8001c14:	2101      	movs	r1, #1
 8001c16:	4284      	cmp	r4, r0
 8001c18:	d000      	beq.n	8001c1c <HAL_GPIO_EXTI_Rising_Callback+0x60>
 8001c1a:	0031      	movs	r1, r6
 8001c1c:	7019      	strb	r1, [r3, #0]
            motor_encoderUpdate2(&motorA_pos, pinA0_prev, pinA1_prev, pinA0_new, pinA1_new, GPIO_Pin);
 8001c1e:	0013      	movs	r3, r2
 8001c20:	9100      	str	r1, [sp, #0]
 8001c22:	0032      	movs	r2, r6
 8001c24:	0029      	movs	r1, r5
 8001c26:	4810      	ldr	r0, [pc, #64]	@ (8001c68 <HAL_GPIO_EXTI_Rising_Callback+0xac>)
 8001c28:	9401      	str	r4, [sp, #4]
            motor_encoderUpdate2(&motorB_pos, pinB0_prev, pinB1_prev, pinB0_new, pinB1_new, GPIO_Pin);
 8001c2a:	f7ff ff9b 	bl	8001b64 <motor_encoderUpdate2>
}
 8001c2e:	e7e6      	b.n	8001bfe <HAL_GPIO_EXTI_Rising_Callback+0x42>
            pinB0_new = (GPIO_Pin == MOTORB_ENCODERPIN_0) ? 1 : pinB0_new;
 8001c30:	000b      	movs	r3, r1
            pinB1_new = (GPIO_Pin == MOTORB_ENCODERPIN_1) ? 1 : pinB1_new;
 8001c32:	2501      	movs	r5, #1
            pinB0_new = (GPIO_Pin == MOTORB_ENCODERPIN_0) ? 1 : pinB0_new;
 8001c34:	703b      	strb	r3, [r7, #0]
            pinB1_new = (GPIO_Pin == MOTORB_ENCODERPIN_1) ? 1 : pinB1_new;
 8001c36:	2c40      	cmp	r4, #64	@ 0x40
 8001c38:	d000      	beq.n	8001c3c <HAL_GPIO_EXTI_Rising_Callback+0x80>
 8001c3a:	0015      	movs	r5, r2
 8001c3c:	9803      	ldr	r0, [sp, #12]
 8001c3e:	7005      	strb	r5, [r0, #0]
            motor_encoderUpdate2(&motorB_pos, pinB0_prev, pinB1_prev, pinB0_new, pinB1_new, GPIO_Pin);
 8001c40:	480a      	ldr	r0, [pc, #40]	@ (8001c6c <HAL_GPIO_EXTI_Rising_Callback+0xb0>)
 8001c42:	9401      	str	r4, [sp, #4]
 8001c44:	9500      	str	r5, [sp, #0]
 8001c46:	e7f0      	b.n	8001c2a <HAL_GPIO_EXTI_Rising_Callback+0x6e>
 8001c48:	20000091 	.word	0x20000091
 8001c4c:	20000092 	.word	0x20000092
 8001c50:	20000093 	.word	0x20000093
 8001c54:	2000008d 	.word	0x2000008d
 8001c58:	20000090 	.word	0x20000090
 8001c5c:	2000008f 	.word	0x2000008f
 8001c60:	2000008c 	.word	0x2000008c
 8001c64:	2000008e 	.word	0x2000008e
 8001c68:	200000a0 	.word	0x200000a0
 8001c6c:	20000098 	.word	0x20000098

08001c70 <HAL_GPIO_EXTI_Falling_Callback>:
{
 8001c70:	b5f0      	push	{r4, r5, r6, r7, lr}
    pinA0_prev = pinA0_new;
 8001c72:	4b24      	ldr	r3, [pc, #144]	@ (8001d04 <HAL_GPIO_EXTI_Falling_Callback+0x94>)
 8001c74:	4a24      	ldr	r2, [pc, #144]	@ (8001d08 <HAL_GPIO_EXTI_Falling_Callback+0x98>)
 8001c76:	781d      	ldrb	r5, [r3, #0]
    pinA1_prev = pinA1_new;
 8001c78:	4f24      	ldr	r7, [pc, #144]	@ (8001d0c <HAL_GPIO_EXTI_Falling_Callback+0x9c>)
    pinA0_prev = pinA0_new;
 8001c7a:	7015      	strb	r5, [r2, #0]
{
 8001c7c:	0004      	movs	r4, r0
    pinA1_prev = pinA1_new;
 8001c7e:	4a24      	ldr	r2, [pc, #144]	@ (8001d10 <HAL_GPIO_EXTI_Falling_Callback+0xa0>)
 8001c80:	783e      	ldrb	r6, [r7, #0]
    pinB0_prev = pinB0_new;
 8001c82:	4824      	ldr	r0, [pc, #144]	@ (8001d14 <HAL_GPIO_EXTI_Falling_Callback+0xa4>)
    pinA1_prev = pinA1_new;
 8001c84:	7016      	strb	r6, [r2, #0]
    pinB0_prev = pinB0_new;
 8001c86:	7801      	ldrb	r1, [r0, #0]
 8001c88:	4a23      	ldr	r2, [pc, #140]	@ (8001d18 <HAL_GPIO_EXTI_Falling_Callback+0xa8>)
{
 8001c8a:	b085      	sub	sp, #20
    pinB0_prev = pinB0_new;
 8001c8c:	7011      	strb	r1, [r2, #0]
    pinB1_prev = pinB1_new;
 8001c8e:	4a23      	ldr	r2, [pc, #140]	@ (8001d1c <HAL_GPIO_EXTI_Falling_Callback+0xac>)
    pinA0_prev = pinA0_new;
 8001c90:	9302      	str	r3, [sp, #8]
    pinB1_prev = pinB1_new;
 8001c92:	9203      	str	r2, [sp, #12]
 8001c94:	4b22      	ldr	r3, [pc, #136]	@ (8001d20 <HAL_GPIO_EXTI_Falling_Callback+0xb0>)
 8001c96:	7812      	ldrb	r2, [r2, #0]
 8001c98:	701a      	strb	r2, [r3, #0]
    switch (GPIO_Pin) {
 8001c9a:	2380      	movs	r3, #128	@ 0x80
 8001c9c:	019b      	lsls	r3, r3, #6
 8001c9e:	429c      	cmp	r4, r3
 8001ca0:	d00f      	beq.n	8001cc2 <HAL_GPIO_EXTI_Falling_Callback+0x52>
 8001ca2:	d808      	bhi.n	8001cb6 <HAL_GPIO_EXTI_Falling_Callback+0x46>
 8001ca4:	2c40      	cmp	r4, #64	@ 0x40
 8001ca6:	d01f      	beq.n	8001ce8 <HAL_GPIO_EXTI_Falling_Callback+0x78>
 8001ca8:	2280      	movs	r2, #128	@ 0x80
            pinA0_new = (GPIO_Pin == MOTORA_ENCODERPIN_0) ? 0 : pinA0_new;
 8001caa:	2100      	movs	r1, #0
    switch (GPIO_Pin) {
 8001cac:	0152      	lsls	r2, r2, #5
 8001cae:	4294      	cmp	r4, r2
 8001cb0:	d008      	beq.n	8001cc4 <HAL_GPIO_EXTI_Falling_Callback+0x54>
}
 8001cb2:	b005      	add	sp, #20
 8001cb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch (GPIO_Pin) {
 8001cb6:	2380      	movs	r3, #128	@ 0x80
 8001cb8:	01db      	lsls	r3, r3, #7
 8001cba:	429c      	cmp	r4, r3
 8001cbc:	d1f9      	bne.n	8001cb2 <HAL_GPIO_EXTI_Falling_Callback+0x42>
            pinB0_new = (GPIO_Pin == MOTORB_ENCODERPIN_0) ? 0 : pinB0_new;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	e013      	b.n	8001cea <HAL_GPIO_EXTI_Falling_Callback+0x7a>
            pinA0_new = (GPIO_Pin == MOTORA_ENCODERPIN_0) ? 0 : pinA0_new;
 8001cc2:	0029      	movs	r1, r5
 8001cc4:	9b02      	ldr	r3, [sp, #8]
            motor_encoderUpdate2(&motorA_pos, pinA0_prev, pinA1_prev, pinA0_new, pinA1_new, GPIO_Pin);
 8001cc6:	4817      	ldr	r0, [pc, #92]	@ (8001d24 <HAL_GPIO_EXTI_Falling_Callback+0xb4>)
            pinA0_new = (GPIO_Pin == MOTORA_ENCODERPIN_0) ? 0 : pinA0_new;
 8001cc8:	7019      	strb	r1, [r3, #0]
            pinA1_new = (GPIO_Pin == MOTORA_ENCODERPIN_1) ? 0 : pinA1_new;
 8001cca:	4b17      	ldr	r3, [pc, #92]	@ (8001d28 <HAL_GPIO_EXTI_Falling_Callback+0xb8>)
 8001ccc:	18e2      	adds	r2, r4, r3
 8001cce:	1e53      	subs	r3, r2, #1
 8001cd0:	419a      	sbcs	r2, r3
 8001cd2:	4252      	negs	r2, r2
 8001cd4:	4032      	ands	r2, r6
 8001cd6:	703a      	strb	r2, [r7, #0]
            motor_encoderUpdate2(&motorA_pos, pinA0_prev, pinA1_prev, pinA0_new, pinA1_new, GPIO_Pin);
 8001cd8:	000b      	movs	r3, r1
 8001cda:	9200      	str	r2, [sp, #0]
 8001cdc:	0029      	movs	r1, r5
 8001cde:	0032      	movs	r2, r6
 8001ce0:	9401      	str	r4, [sp, #4]
            motor_encoderUpdate2(&motorB_pos, pinB0_prev, pinB1_prev, pinB0_new, pinB1_new, GPIO_Pin);
 8001ce2:	f7ff ff3f 	bl	8001b64 <motor_encoderUpdate2>
}
 8001ce6:	e7e4      	b.n	8001cb2 <HAL_GPIO_EXTI_Falling_Callback+0x42>
            pinB0_new = (GPIO_Pin == MOTORB_ENCODERPIN_0) ? 0 : pinB0_new;
 8001ce8:	000b      	movs	r3, r1
            pinB1_new = (GPIO_Pin == MOTORB_ENCODERPIN_1) ? 0 : pinB1_new;
 8001cea:	0025      	movs	r5, r4
 8001cec:	3d40      	subs	r5, #64	@ 0x40
            pinB0_new = (GPIO_Pin == MOTORB_ENCODERPIN_0) ? 0 : pinB0_new;
 8001cee:	7003      	strb	r3, [r0, #0]
            pinB1_new = (GPIO_Pin == MOTORB_ENCODERPIN_1) ? 0 : pinB1_new;
 8001cf0:	1e68      	subs	r0, r5, #1
 8001cf2:	4185      	sbcs	r5, r0
 8001cf4:	9803      	ldr	r0, [sp, #12]
 8001cf6:	426d      	negs	r5, r5
 8001cf8:	4015      	ands	r5, r2
 8001cfa:	7005      	strb	r5, [r0, #0]
            motor_encoderUpdate2(&motorB_pos, pinB0_prev, pinB1_prev, pinB0_new, pinB1_new, GPIO_Pin);
 8001cfc:	480b      	ldr	r0, [pc, #44]	@ (8001d2c <HAL_GPIO_EXTI_Falling_Callback+0xbc>)
 8001cfe:	9401      	str	r4, [sp, #4]
 8001d00:	9500      	str	r5, [sp, #0]
 8001d02:	e7ee      	b.n	8001ce2 <HAL_GPIO_EXTI_Falling_Callback+0x72>
 8001d04:	20000091 	.word	0x20000091
 8001d08:	20000093 	.word	0x20000093
 8001d0c:	20000090 	.word	0x20000090
 8001d10:	20000092 	.word	0x20000092
 8001d14:	2000008d 	.word	0x2000008d
 8001d18:	2000008f 	.word	0x2000008f
 8001d1c:	2000008c 	.word	0x2000008c
 8001d20:	2000008e 	.word	0x2000008e
 8001d24:	200000a0 	.word	0x200000a0
 8001d28:	ffffe000 	.word	0xffffe000
 8001d2c:	20000098 	.word	0x20000098

08001d30 <motorPIDA_update>:
{
 8001d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  output = output*(htim1.Init.Period);
 8001d32:	4b27      	ldr	r3, [pc, #156]	@ (8001dd0 <motorPIDA_update+0xa0>)
 8001d34:	68df      	ldr	r7, [r3, #12]
  double error = motorA_pos - tar_pos;
 8001d36:	4b27      	ldr	r3, [pc, #156]	@ (8001dd4 <motorPIDA_update+0xa4>)
 8001d38:	6818      	ldr	r0, [r3, #0]
 8001d3a:	6859      	ldr	r1, [r3, #4]
 8001d3c:	f7fe fae8 	bl	8000310 <__aeabi_l2d>
  double output = (Kp * error) + (Ki * integral) + (Kd * derivative);
 8001d40:	2280      	movs	r2, #128	@ 0x80
 8001d42:	4b25      	ldr	r3, [pc, #148]	@ (8001dd8 <motorPIDA_update+0xa8>)
 8001d44:	05d2      	lsls	r2, r2, #23
 8001d46:	f7fe ff87 	bl	8000c58 <__aeabi_dmul>
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	f7fe faf5 	bl	800033c <__aeabi_dadd>
 8001d52:	0004      	movs	r4, r0
  output = output*(htim1.Init.Period);
 8001d54:	0038      	movs	r0, r7
  double output = (Kp * error) + (Ki * integral) + (Kd * derivative);
 8001d56:	000d      	movs	r5, r1
  output = output*(htim1.Init.Period);
 8001d58:	f7ff fe4c 	bl	80019f4 <__aeabi_ui2d>
 8001d5c:	0002      	movs	r2, r0
 8001d5e:	000b      	movs	r3, r1
 8001d60:	0020      	movs	r0, r4
 8001d62:	0029      	movs	r1, r5
 8001d64:	f7fe ff78 	bl	8000c58 <__aeabi_dmul>
  if (a < 0.0)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	2300      	movs	r3, #0
  output = output*(htim1.Init.Period);
 8001d6c:	0004      	movs	r4, r0
 8001d6e:	000d      	movs	r5, r1
  if (a < 0.0)
 8001d70:	f7fe fa88 	bl	8000284 <__aeabi_dcmplt>
 8001d74:	2800      	cmp	r0, #0
 8001d76:	d01a      	beq.n	8001dae <motorPIDA_update+0x7e>
    return -a;
 8001d78:	2380      	movs	r3, #128	@ 0x80
 8001d7a:	0020      	movs	r0, r4
 8001d7c:	061b      	lsls	r3, r3, #24
 8001d7e:	18e9      	adds	r1, r5, r3
  uint32_t motor_volts = abs_(output);
 8001d80:	f7fe faa8 	bl	80002d4 <__aeabi_d2uiz>
 8001d84:	0006      	movs	r6, r0
 8001d86:	42b8      	cmp	r0, r7
 8001d88:	d900      	bls.n	8001d8c <motorPIDA_update+0x5c>
 8001d8a:	003e      	movs	r6, r7
  if (output > 0) {
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	2300      	movs	r3, #0
 8001d90:	0020      	movs	r0, r4
 8001d92:	0029      	movs	r1, r5
 8001d94:	f7fe fa8a 	bl	80002ac <__aeabi_dcmpgt>
 8001d98:	1e07      	subs	r7, r0, #0
 8001d9a:	d00b      	beq.n	8001db4 <motorPIDA_update+0x84>
    UpdatePWMDutyCycle(TIM_CHANNEL_3, motor_volts);
 8001d9c:	0031      	movs	r1, r6
 8001d9e:	2008      	movs	r0, #8
 8001da0:	f7ff fe9a 	bl	8001ad8 <UpdatePWMDutyCycle>
    UpdatePWMDutyCycle(TIM_CHANNEL_4, 0);
 8001da4:	2100      	movs	r1, #0
    UpdatePWMDutyCycle(TIM_CHANNEL_4, motor_volts);
 8001da6:	200c      	movs	r0, #12
 8001da8:	f7ff fe96 	bl	8001ad8 <UpdatePWMDutyCycle>
}
 8001dac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return a;
 8001dae:	0020      	movs	r0, r4
 8001db0:	0029      	movs	r1, r5
 8001db2:	e7e5      	b.n	8001d80 <motorPIDA_update+0x50>
  } else if (output < 0) {
 8001db4:	2200      	movs	r2, #0
 8001db6:	2300      	movs	r3, #0
 8001db8:	0020      	movs	r0, r4
 8001dba:	0029      	movs	r1, r5
 8001dbc:	f7fe fa62 	bl	8000284 <__aeabi_dcmplt>
 8001dc0:	2800      	cmp	r0, #0
 8001dc2:	d0f3      	beq.n	8001dac <motorPIDA_update+0x7c>
    UpdatePWMDutyCycle(TIM_CHANNEL_3, 0);
 8001dc4:	0039      	movs	r1, r7
 8001dc6:	2008      	movs	r0, #8
 8001dc8:	f7ff fe86 	bl	8001ad8 <UpdatePWMDutyCycle>
    UpdatePWMDutyCycle(TIM_CHANNEL_4, motor_volts);
 8001dcc:	0031      	movs	r1, r6
 8001dce:	e7ea      	b.n	8001da6 <motorPIDA_update+0x76>
 8001dd0:	200001d8 	.word	0x200001d8
 8001dd4:	200000a0 	.word	0x200000a0
 8001dd8:	bf847ae1 	.word	0xbf847ae1

08001ddc <motorPIDB_update>:
{
 8001ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  output = output*(htim1.Init.Period);
 8001dde:	4b27      	ldr	r3, [pc, #156]	@ (8001e7c <motorPIDB_update+0xa0>)
 8001de0:	68df      	ldr	r7, [r3, #12]
  double error = motorB_pos - tar_pos;
 8001de2:	4b27      	ldr	r3, [pc, #156]	@ (8001e80 <motorPIDB_update+0xa4>)
 8001de4:	6818      	ldr	r0, [r3, #0]
 8001de6:	6859      	ldr	r1, [r3, #4]
 8001de8:	f7fe fa92 	bl	8000310 <__aeabi_l2d>
  double output = (Kp * error) + (Ki * integral) + (Kd * derivative);
 8001dec:	2280      	movs	r2, #128	@ 0x80
 8001dee:	4b25      	ldr	r3, [pc, #148]	@ (8001e84 <motorPIDB_update+0xa8>)
 8001df0:	05d2      	lsls	r2, r2, #23
 8001df2:	f7fe ff31 	bl	8000c58 <__aeabi_dmul>
 8001df6:	2200      	movs	r2, #0
 8001df8:	2300      	movs	r3, #0
 8001dfa:	f7fe fa9f 	bl	800033c <__aeabi_dadd>
 8001dfe:	0004      	movs	r4, r0
  output = output*(htim1.Init.Period);
 8001e00:	0038      	movs	r0, r7
  double output = (Kp * error) + (Ki * integral) + (Kd * derivative);
 8001e02:	000d      	movs	r5, r1
  output = output*(htim1.Init.Period);
 8001e04:	f7ff fdf6 	bl	80019f4 <__aeabi_ui2d>
 8001e08:	0002      	movs	r2, r0
 8001e0a:	000b      	movs	r3, r1
 8001e0c:	0020      	movs	r0, r4
 8001e0e:	0029      	movs	r1, r5
 8001e10:	f7fe ff22 	bl	8000c58 <__aeabi_dmul>
  if (a < 0.0)
 8001e14:	2200      	movs	r2, #0
 8001e16:	2300      	movs	r3, #0
  output = output*(htim1.Init.Period);
 8001e18:	0004      	movs	r4, r0
 8001e1a:	000d      	movs	r5, r1
  if (a < 0.0)
 8001e1c:	f7fe fa32 	bl	8000284 <__aeabi_dcmplt>
 8001e20:	2800      	cmp	r0, #0
 8001e22:	d01a      	beq.n	8001e5a <motorPIDB_update+0x7e>
    return -a;
 8001e24:	2380      	movs	r3, #128	@ 0x80
 8001e26:	0020      	movs	r0, r4
 8001e28:	061b      	lsls	r3, r3, #24
 8001e2a:	18e9      	adds	r1, r5, r3
  uint32_t motor_volts = abs_(output);
 8001e2c:	f7fe fa52 	bl	80002d4 <__aeabi_d2uiz>
 8001e30:	0006      	movs	r6, r0
 8001e32:	42b8      	cmp	r0, r7
 8001e34:	d900      	bls.n	8001e38 <motorPIDB_update+0x5c>
 8001e36:	003e      	movs	r6, r7
  if (output > 0) {
 8001e38:	2200      	movs	r2, #0
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	0020      	movs	r0, r4
 8001e3e:	0029      	movs	r1, r5
 8001e40:	f7fe fa34 	bl	80002ac <__aeabi_dcmpgt>
 8001e44:	1e07      	subs	r7, r0, #0
 8001e46:	d00b      	beq.n	8001e60 <motorPIDB_update+0x84>
    UpdatePWMDutyCycle(TIM_CHANNEL_1, motor_volts);
 8001e48:	0031      	movs	r1, r6
 8001e4a:	2000      	movs	r0, #0
 8001e4c:	f7ff fe44 	bl	8001ad8 <UpdatePWMDutyCycle>
    UpdatePWMDutyCycle(TIM_CHANNEL_2, 0);
 8001e50:	2100      	movs	r1, #0
    UpdatePWMDutyCycle(TIM_CHANNEL_2, motor_volts);
 8001e52:	2004      	movs	r0, #4
 8001e54:	f7ff fe40 	bl	8001ad8 <UpdatePWMDutyCycle>
}
 8001e58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return a;
 8001e5a:	0020      	movs	r0, r4
 8001e5c:	0029      	movs	r1, r5
 8001e5e:	e7e5      	b.n	8001e2c <motorPIDB_update+0x50>
  } else if (output < 0) {
 8001e60:	2200      	movs	r2, #0
 8001e62:	2300      	movs	r3, #0
 8001e64:	0020      	movs	r0, r4
 8001e66:	0029      	movs	r1, r5
 8001e68:	f7fe fa0c 	bl	8000284 <__aeabi_dcmplt>
 8001e6c:	2800      	cmp	r0, #0
 8001e6e:	d0f3      	beq.n	8001e58 <motorPIDB_update+0x7c>
    UpdatePWMDutyCycle(TIM_CHANNEL_1, 0);
 8001e70:	0039      	movs	r1, r7
 8001e72:	0038      	movs	r0, r7
 8001e74:	f7ff fe30 	bl	8001ad8 <UpdatePWMDutyCycle>
    UpdatePWMDutyCycle(TIM_CHANNEL_2, motor_volts);
 8001e78:	0031      	movs	r1, r6
 8001e7a:	e7ea      	b.n	8001e52 <motorPIDB_update+0x76>
 8001e7c:	200001d8 	.word	0x200001d8
 8001e80:	20000098 	.word	0x20000098
 8001e84:	3f847ae1 	.word	0x3f847ae1

08001e88 <main>:
{
 8001e88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e8a:	2400      	movs	r4, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e8c:	2502      	movs	r5, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e8e:	2704      	movs	r7, #4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e90:	2601      	movs	r6, #1
{
 8001e92:	b09d      	sub	sp, #116	@ 0x74
  HAL_Init();
 8001e94:	f000 fb5c 	bl	8002550 <HAL_Init>
  SystemClock_Config();
 8001e98:	f7ff fe38 	bl	8001b0c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e9c:	2214      	movs	r2, #20
 8001e9e:	0021      	movs	r1, r4
 8001ea0:	a80f      	add	r0, sp, #60	@ 0x3c
 8001ea2:	f002 fd05 	bl	80048b0 <memset>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001ea6:	20a0      	movs	r0, #160	@ 0xa0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ea8:	4b94      	ldr	r3, [pc, #592]	@ (80020fc <main+0x274>)
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001eaa:	2160      	movs	r1, #96	@ 0x60
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001eae:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eb0:	432a      	orrs	r2, r5
 8001eb2:	635a      	str	r2, [r3, #52]	@ 0x34
 8001eb4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001eb6:	402a      	ands	r2, r5
 8001eb8:	9200      	str	r2, [sp, #0]
 8001eba:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ebc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ebe:	433a      	orrs	r2, r7
 8001ec0:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ec2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ec4:	403a      	ands	r2, r7
 8001ec6:	9201      	str	r2, [sp, #4]
 8001ec8:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ecc:	4332      	orrs	r2, r6
 8001ece:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ed0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001ed2:	0022      	movs	r2, r4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ed4:	4033      	ands	r3, r6
 8001ed6:	9302      	str	r3, [sp, #8]
 8001ed8:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001eda:	f000 fce5 	bl	80028a8 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ede:	20a0      	movs	r0, #160	@ 0xa0
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001ee0:	2360      	movs	r3, #96	@ 0x60
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ee2:	a90f      	add	r1, sp, #60	@ 0x3c
 8001ee4:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001ee6:	930f      	str	r3, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001ee8:	9511      	str	r5, [sp, #68]	@ 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eea:	9610      	str	r6, [sp, #64]	@ 0x40
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eec:	9412      	str	r4, [sp, #72]	@ 0x48
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eee:	f000 fc27 	bl	8002740 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001ef2:	23c0      	movs	r3, #192	@ 0xc0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ef4:	20a0      	movs	r0, #160	@ 0xa0
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001ef6:	005b      	lsls	r3, r3, #1
 8001ef8:	930f      	str	r3, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001efa:	3b7e      	subs	r3, #126	@ 0x7e
 8001efc:	3bff      	subs	r3, #255	@ 0xff
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001efe:	a90f      	add	r1, sp, #60	@ 0x3c
 8001f00:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f02:	9310      	str	r3, [sp, #64]	@ 0x40
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001f04:	9511      	str	r5, [sp, #68]	@ 0x44
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f06:	f000 fc1b 	bl	8002740 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8001f0a:	23e0      	movs	r3, #224	@ 0xe0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f0c:	20a0      	movs	r0, #160	@ 0xa0
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001f0e:	4d7c      	ldr	r5, [pc, #496]	@ (8002100 <main+0x278>)
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8001f10:	01db      	lsls	r3, r3, #7
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f12:	a90f      	add	r1, sp, #60	@ 0x3c
 8001f14:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8001f16:	930f      	str	r3, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001f18:	9510      	str	r5, [sp, #64]	@ 0x40
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f1a:	9611      	str	r6, [sp, #68]	@ 0x44
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f1c:	f000 fc10 	bl	8002740 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001f20:	2340      	movs	r3, #64	@ 0x40
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f22:	4878      	ldr	r0, [pc, #480]	@ (8002104 <main+0x27c>)
 8001f24:	a90f      	add	r1, sp, #60	@ 0x3c
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001f26:	930f      	str	r3, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001f28:	9510      	str	r5, [sp, #64]	@ 0x40
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f2a:	9611      	str	r6, [sp, #68]	@ 0x44
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f2c:	f000 fc08 	bl	8002740 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8001f30:	0022      	movs	r2, r4
 8001f32:	0021      	movs	r1, r4
 8001f34:	2007      	movs	r0, #7
 8001f36:	f000 fb3b 	bl	80025b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8001f3a:	2007      	movs	r0, #7
 8001f3c:	f000 fb62 	bl	8002604 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8001f40:	0022      	movs	r2, r4
 8001f42:	0021      	movs	r1, r4
 8001f44:	2006      	movs	r0, #6
 8001f46:	f000 fb33 	bl	80025b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8001f4a:	2006      	movs	r0, #6
 8001f4c:	f000 fb5a 	bl	8002604 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8001f50:	0021      	movs	r1, r4
 8001f52:	0022      	movs	r2, r4
 8001f54:	2005      	movs	r0, #5
 8001f56:	f000 fb2b 	bl	80025b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8001f5a:	2005      	movs	r0, #5
 8001f5c:	f000 fb52 	bl	8002604 <HAL_NVIC_EnableIRQ>
a[0];
 8001f60:	4b69      	ldr	r3, [pc, #420]	@ (8002108 <main+0x280>)
  hi2c1.Instance = I2C1;
 8001f62:	4d6a      	ldr	r5, [pc, #424]	@ (800210c <main+0x284>)
a[0];
 8001f64:	681b      	ldr	r3, [r3, #0]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f66:	0028      	movs	r0, r5
a[0];
 8001f68:	781b      	ldrb	r3, [r3, #0]
  hi2c1.Instance = I2C1;
 8001f6a:	4b69      	ldr	r3, [pc, #420]	@ (8002110 <main+0x288>)
  hi2c1.Init.OwnAddress1 = 0;
 8001f6c:	60ac      	str	r4, [r5, #8]
  hi2c1.Instance = I2C1;
 8001f6e:	602b      	str	r3, [r5, #0]
  hi2c1.Init.Timing = 0x40000A0B;
 8001f70:	4b68      	ldr	r3, [pc, #416]	@ (8002114 <main+0x28c>)
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f72:	60ee      	str	r6, [r5, #12]
  hi2c1.Init.Timing = 0x40000A0B;
 8001f74:	606b      	str	r3, [r5, #4]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f76:	612c      	str	r4, [r5, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001f78:	616c      	str	r4, [r5, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001f7a:	61ac      	str	r4, [r5, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f7c:	61ec      	str	r4, [r5, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f7e:	622c      	str	r4, [r5, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f80:	f000 fcac 	bl	80028dc <HAL_I2C_Init>
 8001f84:	0001      	movs	r1, r0
 8001f86:	42a0      	cmp	r0, r4
 8001f88:	d001      	beq.n	8001f8e <main+0x106>
 8001f8a:	b672      	cpsid	i
  while (1) {}
 8001f8c:	e7fe      	b.n	8001f8c <main+0x104>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001f8e:	0028      	movs	r0, r5
 8001f90:	f000 fd02 	bl	8002998 <HAL_I2CEx_ConfigAnalogFilter>
 8001f94:	1e01      	subs	r1, r0, #0
 8001f96:	d001      	beq.n	8001f9c <main+0x114>
 8001f98:	b672      	cpsid	i
  while (1) {}
 8001f9a:	e7fe      	b.n	8001f9a <main+0x112>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001f9c:	0028      	movs	r0, r5
 8001f9e:	f000 fd21 	bl	80029e4 <HAL_I2CEx_ConfigDigitalFilter>
 8001fa2:	1e05      	subs	r5, r0, #0
 8001fa4:	d001      	beq.n	8001faa <main+0x122>
 8001fa6:	b672      	cpsid	i
  while (1) {}
 8001fa8:	e7fe      	b.n	8001fa8 <main+0x120>
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001faa:	0001      	movs	r1, r0
 8001fac:	2214      	movs	r2, #20
 8001fae:	a803      	add	r0, sp, #12
 8001fb0:	f002 fc7e 	bl	80048b0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fb4:	221c      	movs	r2, #28
 8001fb6:	0029      	movs	r1, r5
 8001fb8:	a808      	add	r0, sp, #32
 8001fba:	f002 fc79 	bl	80048b0 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001fbe:	2234      	movs	r2, #52	@ 0x34
 8001fc0:	0029      	movs	r1, r5
 8001fc2:	a80f      	add	r0, sp, #60	@ 0x3c
 8001fc4:	f002 fc74 	bl	80048b0 <memset>
  htim1.Instance = TIM1;
 8001fc8:	4c53      	ldr	r4, [pc, #332]	@ (8002118 <main+0x290>)
 8001fca:	4b54      	ldr	r3, [pc, #336]	@ (800211c <main+0x294>)
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001fcc:	0020      	movs	r0, r4
  htim1.Instance = TIM1;
 8001fce:	6023      	str	r3, [r4, #0]
  htim1.Init.Period = 65535;
 8001fd0:	4b53      	ldr	r3, [pc, #332]	@ (8002120 <main+0x298>)
  htim1.Init.Prescaler = 0;
 8001fd2:	6065      	str	r5, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fd4:	60a5      	str	r5, [r4, #8]
  htim1.Init.Period = 65535;
 8001fd6:	60e3      	str	r3, [r4, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fd8:	6125      	str	r5, [r4, #16]
  htim1.Init.RepetitionCounter = 0;
 8001fda:	6165      	str	r5, [r4, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fdc:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001fde:	f001 f929 	bl	8003234 <HAL_TIM_Base_Init>
 8001fe2:	2800      	cmp	r0, #0
 8001fe4:	d001      	beq.n	8001fea <main+0x162>
 8001fe6:	b672      	cpsid	i
  while (1) {}
 8001fe8:	e7fe      	b.n	8001fe8 <main+0x160>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001fea:	0020      	movs	r0, r4
 8001fec:	f001 f94c 	bl	8003288 <HAL_TIM_PWM_Init>
 8001ff0:	2800      	cmp	r0, #0
 8001ff2:	d001      	beq.n	8001ff8 <main+0x170>
 8001ff4:	b672      	cpsid	i
  while (1) {}
 8001ff6:	e7fe      	b.n	8001ff6 <main+0x16e>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001ff8:	9003      	str	r0, [sp, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001ffa:	9004      	str	r0, [sp, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001ffc:	a903      	add	r1, sp, #12
 8001ffe:	0020      	movs	r0, r4
 8002000:	f001 faa2 	bl	8003548 <HAL_TIM_SlaveConfigSynchro>
 8002004:	1e02      	subs	r2, r0, #0
 8002006:	d001      	beq.n	800200c <main+0x184>
 8002008:	b672      	cpsid	i
  while (1) {}
 800200a:	e7fe      	b.n	800200a <main+0x182>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800200c:	2360      	movs	r3, #96	@ 0x60
  sConfigOC.Pulse = 0;
 800200e:	9009      	str	r0, [sp, #36]	@ 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002010:	900a      	str	r0, [sp, #40]	@ 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002012:	900b      	str	r0, [sp, #44]	@ 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002014:	900c      	str	r0, [sp, #48]	@ 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002016:	900d      	str	r0, [sp, #52]	@ 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002018:	900e      	str	r0, [sp, #56]	@ 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800201a:	a908      	add	r1, sp, #32
 800201c:	0020      	movs	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800201e:	9308      	str	r3, [sp, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002020:	f001 f998 	bl	8003354 <HAL_TIM_PWM_ConfigChannel>
 8002024:	2800      	cmp	r0, #0
 8002026:	d001      	beq.n	800202c <main+0x1a4>
 8002028:	b672      	cpsid	i
  while (1) {}
 800202a:	e7fe      	b.n	800202a <main+0x1a2>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800202c:	003a      	movs	r2, r7
 800202e:	0020      	movs	r0, r4
 8002030:	a908      	add	r1, sp, #32
 8002032:	f001 f98f 	bl	8003354 <HAL_TIM_PWM_ConfigChannel>
 8002036:	2800      	cmp	r0, #0
 8002038:	d001      	beq.n	800203e <main+0x1b6>
 800203a:	b672      	cpsid	i
  while (1) {}
 800203c:	e7fe      	b.n	800203c <main+0x1b4>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800203e:	2208      	movs	r2, #8
 8002040:	0020      	movs	r0, r4
 8002042:	a908      	add	r1, sp, #32
 8002044:	f001 f986 	bl	8003354 <HAL_TIM_PWM_ConfigChannel>
 8002048:	2800      	cmp	r0, #0
 800204a:	d001      	beq.n	8002050 <main+0x1c8>
 800204c:	b672      	cpsid	i
  while (1) {}
 800204e:	e7fe      	b.n	800204e <main+0x1c6>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002050:	220c      	movs	r2, #12
 8002052:	0020      	movs	r0, r4
 8002054:	a908      	add	r1, sp, #32
 8002056:	f001 f97d 	bl	8003354 <HAL_TIM_PWM_ConfigChannel>
 800205a:	2800      	cmp	r0, #0
 800205c:	d001      	beq.n	8002062 <main+0x1da>
 800205e:	b672      	cpsid	i
  while (1) {}
 8002060:	e7fe      	b.n	8002060 <main+0x1d8>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002062:	2280      	movs	r2, #128	@ 0x80
 8002064:	0192      	lsls	r2, r2, #6
 8002066:	9214      	str	r2, [sp, #80]	@ 0x50
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002068:	2280      	movs	r2, #128	@ 0x80
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800206a:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800206c:	0492      	lsls	r2, r2, #18
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800206e:	0020      	movs	r0, r4
 8002070:	a90f      	add	r1, sp, #60	@ 0x3c
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002072:	930f      	str	r3, [sp, #60]	@ 0x3c
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002074:	9310      	str	r3, [sp, #64]	@ 0x40
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002076:	9311      	str	r3, [sp, #68]	@ 0x44
  sBreakDeadTimeConfig.DeadTime = 0;
 8002078:	9312      	str	r3, [sp, #72]	@ 0x48
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800207a:	9313      	str	r3, [sp, #76]	@ 0x4c
  sBreakDeadTimeConfig.BreakFilter = 0;
 800207c:	9315      	str	r3, [sp, #84]	@ 0x54
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800207e:	9316      	str	r3, [sp, #88]	@ 0x58
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002080:	9317      	str	r3, [sp, #92]	@ 0x5c
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002082:	9218      	str	r2, [sp, #96]	@ 0x60
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002084:	9319      	str	r3, [sp, #100]	@ 0x64
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002086:	931a      	str	r3, [sp, #104]	@ 0x68
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002088:	931b      	str	r3, [sp, #108]	@ 0x6c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800208a:	f001 fb0b 	bl	80036a4 <HAL_TIMEx_ConfigBreakDeadTime>
 800208e:	1e05      	subs	r5, r0, #0
 8002090:	d001      	beq.n	8002096 <main+0x20e>
 8002092:	b672      	cpsid	i
  while (1) {}
 8002094:	e7fe      	b.n	8002094 <main+0x20c>
  HAL_TIM_MspPostInit(&htim1);
 8002096:	0020      	movs	r0, r4
 8002098:	f000 f91e 	bl	80022d8 <HAL_TIM_MspPostInit>
  huart2.Instance = USART2;
 800209c:	4c21      	ldr	r4, [pc, #132]	@ (8002124 <main+0x29c>)
 800209e:	4b22      	ldr	r3, [pc, #136]	@ (8002128 <main+0x2a0>)
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020a0:	0020      	movs	r0, r4
  huart2.Instance = USART2;
 80020a2:	6023      	str	r3, [r4, #0]
  huart2.Init.BaudRate = 115200;
 80020a4:	23e1      	movs	r3, #225	@ 0xe1
 80020a6:	025b      	lsls	r3, r3, #9
 80020a8:	6063      	str	r3, [r4, #4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80020aa:	230c      	movs	r3, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80020ac:	60a5      	str	r5, [r4, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80020ae:	60e5      	str	r5, [r4, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80020b0:	6125      	str	r5, [r4, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80020b2:	6163      	str	r3, [r4, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020b4:	61a5      	str	r5, [r4, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80020b6:	61e5      	str	r5, [r4, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020b8:	6225      	str	r5, [r4, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80020ba:	6265      	str	r5, [r4, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020bc:	62a5      	str	r5, [r4, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020be:	f002 fa09 	bl	80044d4 <HAL_UART_Init>
 80020c2:	2800      	cmp	r0, #0
 80020c4:	d001      	beq.n	80020ca <main+0x242>
 80020c6:	b672      	cpsid	i
  while (1) {}
 80020c8:	e7fe      	b.n	80020c8 <main+0x240>
  HAL_UART_Receive_IT(&huart2, Rx_data, 1); // Now receive the message
 80020ca:	2201      	movs	r2, #1
 80020cc:	4917      	ldr	r1, [pc, #92]	@ (800212c <main+0x2a4>)
 80020ce:	0020      	movs	r0, r4
 80020d0:	f002 faca 	bl	8004668 <HAL_UART_Receive_IT>
  ring_buffer_init(&ring_buffer, buf_arr, sizeof(buf_arr));
 80020d4:	2280      	movs	r2, #128	@ 0x80
 80020d6:	4916      	ldr	r1, [pc, #88]	@ (8002130 <main+0x2a8>)
 80020d8:	4816      	ldr	r0, [pc, #88]	@ (8002134 <main+0x2ac>)
 80020da:	f000 f83b 	bl	8002154 <ring_buffer_init>
  motorPIDA_update();
 80020de:	f7ff fe27 	bl	8001d30 <motorPIDA_update>
  motorPIDB_update();
 80020e2:	f7ff fe7b 	bl	8001ddc <motorPIDB_update>
  HAL_Delay(100); // Delay for sine wave frequency timing
 80020e6:	2064      	movs	r0, #100	@ 0x64
 80020e8:	f000 fa50 	bl	800258c <HAL_Delay>
  UART_SendString(textt);
 80020ec:	4812      	ldr	r0, [pc, #72]	@ (8002138 <main+0x2b0>)
 80020ee:	f7ff fcc3 	bl	8001a78 <UART_SendString>
	UART_SendString(data);
 80020f2:	2000      	movs	r0, #0
 80020f4:	f7ff fcc0 	bl	8001a78 <UART_SendString>
  while (1) {
 80020f8:	e7f1      	b.n	80020de <main+0x256>
 80020fa:	46c0      	nop			@ (mov r8, r8)
 80020fc:	40021000 	.word	0x40021000
 8002100:	10310000 	.word	0x10310000
 8002104:	50000400 	.word	0x50000400
 8002108:	20000000 	.word	0x20000000
 800210c:	20000224 	.word	0x20000224
 8002110:	40005400 	.word	0x40005400
 8002114:	40000a0b 	.word	0x40000a0b
 8002118:	200001d8 	.word	0x200001d8
 800211c:	40012c00 	.word	0x40012c00
 8002120:	0000ffff 	.word	0x0000ffff
 8002124:	20000144 	.word	0x20000144
 8002128:	40004400 	.word	0x40004400
 800212c:	200000a8 	.word	0x200000a8
 8002130:	200000b2 	.word	0x200000b2
 8002134:	20000134 	.word	0x20000134
 8002138:	080056af 	.word	0x080056af

0800213c <Error_Handler>:
 800213c:	b672      	cpsid	i
  while (1) {}
 800213e:	e7fe      	b.n	800213e <Error_Handler+0x2>

08002140 <ring_buffer_is_full>:
 * Returns whether a ring buffer is full.
 * @param buffer The buffer for which it should be returned whether it is full.
 * @return 1 if full; 0 otherwise.
 */
inline uint8_t ring_buffer_is_full(ring_buffer_t *buffer) {
  return ((buffer->head_index - buffer->tail_index) & RING_BUFFER_MASK(buffer)) == RING_BUFFER_MASK(buffer);
 8002140:	6842      	ldr	r2, [r0, #4]
 8002142:	68c3      	ldr	r3, [r0, #12]
 8002144:	6880      	ldr	r0, [r0, #8]
 8002146:	1a18      	subs	r0, r3, r0
 8002148:	4010      	ands	r0, r2
 800214a:	1a80      	subs	r0, r0, r2
 800214c:	4243      	negs	r3, r0
 800214e:	4158      	adcs	r0, r3
 8002150:	b2c0      	uxtb	r0, r0
}
 8002152:	4770      	bx	lr

08002154 <ring_buffer_init>:
/**
 * @file
 * Implementation of ring buffer functions.
 */

void ring_buffer_init(ring_buffer_t *buffer, char *buf, size_t buf_size) {
 8002154:	b510      	push	{r4, lr}
  RING_BUFFER_ASSERT(RING_BUFFER_IS_POWER_OF_TWO(buf_size) == 1);
 8002156:	0014      	movs	r4, r2
 8002158:	1e53      	subs	r3, r2, #1
 800215a:	401c      	ands	r4, r3
 800215c:	421a      	tst	r2, r3
 800215e:	d005      	beq.n	800216c <ring_buffer_init+0x18>
 8002160:	2109      	movs	r1, #9
 8002162:	4b05      	ldr	r3, [pc, #20]	@ (8002178 <ring_buffer_init+0x24>)
 8002164:	4a05      	ldr	r2, [pc, #20]	@ (800217c <ring_buffer_init+0x28>)
 8002166:	4806      	ldr	r0, [pc, #24]	@ (8002180 <ring_buffer_init+0x2c>)
 8002168:	f002 fab0 	bl	80046cc <__assert_func>
  buffer->buffer = buf;
 800216c:	6001      	str	r1, [r0, #0]
  buffer->buffer_mask = buf_size - 1;
 800216e:	6043      	str	r3, [r0, #4]
  buffer->tail_index = 0;
 8002170:	6084      	str	r4, [r0, #8]
  buffer->head_index = 0;
 8002172:	60c4      	str	r4, [r0, #12]
}
 8002174:	bd10      	pop	{r4, pc}
 8002176:	46c0      	nop			@ (mov r8, r8)
 8002178:	0800587a 	.word	0x0800587a
 800217c:	080058bb 	.word	0x080058bb
 8002180:	080058a2 	.word	0x080058a2

08002184 <ring_buffer_queue>:

void ring_buffer_queue(ring_buffer_t *buffer, char data) {
 8002184:	b570      	push	{r4, r5, r6, lr}
 8002186:	0004      	movs	r4, r0
 8002188:	000d      	movs	r5, r1
  /* Is buffer full? */
  if(ring_buffer_is_full(buffer)) {
 800218a:	f7ff ffd9 	bl	8002140 <ring_buffer_is_full>
 800218e:	2800      	cmp	r0, #0
 8002190:	d004      	beq.n	800219c <ring_buffer_queue+0x18>
    /* Is going to overwrite the oldest byte */
    /* Increase tail index */
    buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK(buffer));
 8002192:	68a2      	ldr	r2, [r4, #8]
 8002194:	6863      	ldr	r3, [r4, #4]
 8002196:	3201      	adds	r2, #1
 8002198:	4013      	ands	r3, r2
 800219a:	60a3      	str	r3, [r4, #8]
  }

  /* Place data in buffer */
  buffer->buffer[buffer->head_index] = data;
 800219c:	68e3      	ldr	r3, [r4, #12]
 800219e:	6822      	ldr	r2, [r4, #0]
 80021a0:	54d5      	strb	r5, [r2, r3]
  buffer->head_index = ((buffer->head_index + 1) & RING_BUFFER_MASK(buffer));
 80021a2:	68e2      	ldr	r2, [r4, #12]
 80021a4:	6863      	ldr	r3, [r4, #4]
 80021a6:	3201      	adds	r2, #1
 80021a8:	4013      	ands	r3, r2
 80021aa:	60e3      	str	r3, [r4, #12]
}
 80021ac:	bd70      	pop	{r4, r5, r6, pc}

080021ae <ring_buffer_dequeue>:
  for(i = 0; i < size; i++) {
    ring_buffer_queue(buffer, data[i]);
  }
}

uint8_t ring_buffer_dequeue(ring_buffer_t *buffer, char *data) {
 80021ae:	b510      	push	{r4, lr}
  return (buffer->head_index == buffer->tail_index);
 80021b0:	6882      	ldr	r2, [r0, #8]
  if(ring_buffer_is_empty(buffer)) {
 80021b2:	68c4      	ldr	r4, [r0, #12]
uint8_t ring_buffer_dequeue(ring_buffer_t *buffer, char *data) {
 80021b4:	0003      	movs	r3, r0
    /* No items */
    return 0;
 80021b6:	2000      	movs	r0, #0
  if(ring_buffer_is_empty(buffer)) {
 80021b8:	4294      	cmp	r4, r2
 80021ba:	d008      	beq.n	80021ce <ring_buffer_dequeue+0x20>
  }

  *data = buffer->buffer[buffer->tail_index];
 80021bc:	6818      	ldr	r0, [r3, #0]
 80021be:	5c82      	ldrb	r2, [r0, r2]
  buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK(buffer));
  return 1;
 80021c0:	2001      	movs	r0, #1
  *data = buffer->buffer[buffer->tail_index];
 80021c2:	700a      	strb	r2, [r1, #0]
  buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK(buffer));
 80021c4:	6899      	ldr	r1, [r3, #8]
 80021c6:	685a      	ldr	r2, [r3, #4]
 80021c8:	3101      	adds	r1, #1
 80021ca:	400a      	ands	r2, r1
 80021cc:	609a      	str	r2, [r3, #8]
}
 80021ce:	bd10      	pop	{r4, pc}

080021d0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021d0:	2101      	movs	r1, #1
 80021d2:	4b0a      	ldr	r3, [pc, #40]	@ (80021fc <HAL_MspInit+0x2c>)
{
 80021d4:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80021d8:	430a      	orrs	r2, r1
 80021da:	641a      	str	r2, [r3, #64]	@ 0x40
 80021dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80021de:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 80021e0:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021e2:	9200      	str	r2, [sp, #0]
 80021e4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80021e8:	0549      	lsls	r1, r1, #21
 80021ea:	430a      	orrs	r2, r1
 80021ec:	63da      	str	r2, [r3, #60]	@ 0x3c
 80021ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021f0:	400b      	ands	r3, r1
 80021f2:	9301      	str	r3, [sp, #4]
 80021f4:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021f6:	b002      	add	sp, #8
 80021f8:	4770      	bx	lr
 80021fa:	46c0      	nop			@ (mov r8, r8)
 80021fc:	40021000 	.word	0x40021000

08002200 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002200:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002202:	0004      	movs	r4, r0
 8002204:	b091      	sub	sp, #68	@ 0x44
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002206:	2214      	movs	r2, #20
 8002208:	2100      	movs	r1, #0
 800220a:	a804      	add	r0, sp, #16
 800220c:	f002 fb50 	bl	80048b0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002210:	221c      	movs	r2, #28
 8002212:	2100      	movs	r1, #0
 8002214:	a809      	add	r0, sp, #36	@ 0x24
 8002216:	f002 fb4b 	bl	80048b0 <memset>
  if(hi2c->Instance==I2C1)
 800221a:	4b20      	ldr	r3, [pc, #128]	@ (800229c <HAL_I2C_MspInit+0x9c>)
 800221c:	6822      	ldr	r2, [r4, #0]
 800221e:	429a      	cmp	r2, r3
 8002220:	d13a      	bne.n	8002298 <HAL_I2C_MspInit+0x98>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002222:	2340      	movs	r3, #64	@ 0x40
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002224:	a809      	add	r0, sp, #36	@ 0x24
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002226:	9309      	str	r3, [sp, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002228:	f000 fe22 	bl	8002e70 <HAL_RCCEx_PeriphCLKConfig>
 800222c:	2800      	cmp	r0, #0
 800222e:	d001      	beq.n	8002234 <HAL_I2C_MspInit+0x34>
    {
      Error_Handler();
 8002230:	f7ff ff84 	bl	800213c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002234:	2202      	movs	r2, #2
 8002236:	4c1a      	ldr	r4, [pc, #104]	@ (80022a0 <HAL_I2C_MspInit+0xa0>)
    PB7     ------> I2C1_SCL
    PC14-OSCX_IN (PC14)     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002238:	2500      	movs	r5, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800223a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800223c:	2712      	movs	r7, #18
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800223e:	4313      	orrs	r3, r2
 8002240:	6363      	str	r3, [r4, #52]	@ 0x34
 8002242:	6b63      	ldr	r3, [r4, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_I2C1;
 8002244:	260e      	movs	r6, #14
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002246:	4013      	ands	r3, r2
 8002248:	9301      	str	r3, [sp, #4]
 800224a:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800224c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800224e:	1892      	adds	r2, r2, r2
 8002250:	4313      	orrs	r3, r2
 8002252:	6363      	str	r3, [r4, #52]	@ 0x34
 8002254:	6b63      	ldr	r3, [r4, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002256:	4813      	ldr	r0, [pc, #76]	@ (80022a4 <HAL_I2C_MspInit+0xa4>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002258:	4013      	ands	r3, r2
 800225a:	9302      	str	r3, [sp, #8]
 800225c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800225e:	2380      	movs	r3, #128	@ 0x80
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002260:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002262:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002264:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002266:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002268:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF14_I2C1;
 800226a:	9608      	str	r6, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800226c:	f000 fa68 	bl	8002740 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002270:	2380      	movs	r3, #128	@ 0x80
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_I2C1;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002272:	480d      	ldr	r0, [pc, #52]	@ (80022a8 <HAL_I2C_MspInit+0xa8>)
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002274:	01db      	lsls	r3, r3, #7
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002276:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002278:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800227a:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227c:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800227e:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF14_I2C1;
 8002280:	9608      	str	r6, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002282:	f000 fa5d 	bl	8002740 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002286:	2280      	movs	r2, #128	@ 0x80
 8002288:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800228a:	0392      	lsls	r2, r2, #14
 800228c:	4313      	orrs	r3, r2
 800228e:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8002290:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002292:	4013      	ands	r3, r2
 8002294:	9303      	str	r3, [sp, #12]
 8002296:	9b03      	ldr	r3, [sp, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002298:	b011      	add	sp, #68	@ 0x44
 800229a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800229c:	40005400 	.word	0x40005400
 80022a0:	40021000 	.word	0x40021000
 80022a4:	50000400 	.word	0x50000400
 80022a8:	50000800 	.word	0x50000800

080022ac <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 80022ac:	4b08      	ldr	r3, [pc, #32]	@ (80022d0 <HAL_TIM_Base_MspInit+0x24>)
 80022ae:	6802      	ldr	r2, [r0, #0]
{
 80022b0:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM1)
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d109      	bne.n	80022ca <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80022b6:	2180      	movs	r1, #128	@ 0x80
 80022b8:	4b06      	ldr	r3, [pc, #24]	@ (80022d4 <HAL_TIM_Base_MspInit+0x28>)
 80022ba:	0109      	lsls	r1, r1, #4
 80022bc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80022be:	430a      	orrs	r2, r1
 80022c0:	641a      	str	r2, [r3, #64]	@ 0x40
 80022c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c4:	400b      	ands	r3, r1
 80022c6:	9301      	str	r3, [sp, #4]
 80022c8:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80022ca:	b002      	add	sp, #8
 80022cc:	4770      	bx	lr
 80022ce:	46c0      	nop			@ (mov r8, r8)
 80022d0:	40012c00 	.word	0x40012c00
 80022d4:	40021000 	.word	0x40021000

080022d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80022d8:	b510      	push	{r4, lr}
 80022da:	0004      	movs	r4, r0
 80022dc:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022de:	2214      	movs	r2, #20
 80022e0:	2100      	movs	r1, #0
 80022e2:	a801      	add	r0, sp, #4
 80022e4:	f002 fae4 	bl	80048b0 <memset>
  if(htim->Instance==TIM1)
 80022e8:	4b13      	ldr	r3, [pc, #76]	@ (8002338 <HAL_TIM_MspPostInit+0x60>)
 80022ea:	6822      	ldr	r2, [r4, #0]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d121      	bne.n	8002334 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022f0:	2101      	movs	r1, #1
 80022f2:	4b12      	ldr	r3, [pc, #72]	@ (800233c <HAL_TIM_MspPostInit+0x64>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022f4:	20a0      	movs	r0, #160	@ 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f8:	2402      	movs	r4, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022fa:	430a      	orrs	r2, r1
 80022fc:	635a      	str	r2, [r3, #52]	@ 0x34
 80022fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002300:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002302:	400b      	ands	r3, r1
 8002304:	9300      	str	r3, [sp, #0]
 8002306:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8002308:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800230a:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800230c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM1;
 800230e:	3b02      	subs	r3, #2
 8002310:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002312:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002314:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002316:	f000 fa13 	bl	8002740 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800231a:	2380      	movs	r3, #128	@ 0x80
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800231c:	20a0      	movs	r0, #160	@ 0xa0
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800231e:	011b      	lsls	r3, r3, #4
 8002320:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002322:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002324:	a901      	add	r1, sp, #4
 8002326:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002328:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800232a:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800232c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800232e:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002330:	f000 fa06 	bl	8002740 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002334:	b006      	add	sp, #24
 8002336:	bd10      	pop	{r4, pc}
 8002338:	40012c00 	.word	0x40012c00
 800233c:	40021000 	.word	0x40021000

08002340 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002340:	b510      	push	{r4, lr}
 8002342:	0004      	movs	r4, r0
 8002344:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002346:	2214      	movs	r2, #20
 8002348:	2100      	movs	r1, #0
 800234a:	a803      	add	r0, sp, #12
 800234c:	f002 fab0 	bl	80048b0 <memset>
  if(huart->Instance==USART2)
 8002350:	4b14      	ldr	r3, [pc, #80]	@ (80023a4 <HAL_UART_MspInit+0x64>)
 8002352:	6822      	ldr	r2, [r4, #0]
 8002354:	429a      	cmp	r2, r3
 8002356:	d123      	bne.n	80023a0 <HAL_UART_MspInit+0x60>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002358:	2180      	movs	r1, #128	@ 0x80
 800235a:	4b13      	ldr	r3, [pc, #76]	@ (80023a8 <HAL_UART_MspInit+0x68>)
 800235c:	0289      	lsls	r1, r1, #10
 800235e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002360:	20a0      	movs	r0, #160	@ 0xa0
    __HAL_RCC_USART2_CLK_ENABLE();
 8002362:	430a      	orrs	r2, r1
 8002364:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002366:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002368:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_USART2_CLK_ENABLE();
 800236a:	400a      	ands	r2, r1
 800236c:	9201      	str	r2, [sp, #4]
 800236e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002370:	2201      	movs	r2, #1
 8002372:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002374:	4311      	orrs	r1, r2
 8002376:	6359      	str	r1, [r3, #52]	@ 0x34
 8002378:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800237a:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800237c:	4013      	ands	r3, r2
 800237e:	9302      	str	r3, [sp, #8]
 8002380:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8002382:	2318      	movs	r3, #24
 8002384:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002386:	3b16      	subs	r3, #22
 8002388:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800238a:	9207      	str	r2, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800238c:	f000 f9d8 	bl	8002740 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002390:	2200      	movs	r2, #0
 8002392:	201c      	movs	r0, #28
 8002394:	0011      	movs	r1, r2
 8002396:	f000 f90b 	bl	80025b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800239a:	201c      	movs	r0, #28
 800239c:	f000 f932 	bl	8002604 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80023a0:	b008      	add	sp, #32
 80023a2:	bd10      	pop	{r4, pc}
 80023a4:	40004400 	.word	0x40004400
 80023a8:	40021000 	.word	0x40021000

080023ac <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80023ac:	e7fe      	b.n	80023ac <NMI_Handler>

080023ae <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023ae:	e7fe      	b.n	80023ae <HardFault_Handler>

080023b0 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80023b0:	4770      	bx	lr

080023b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 80023b2:	4770      	bx	lr

080023b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023b4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023b6:	f000 f8d7 	bl	8002568 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023ba:	bd10      	pop	{r4, pc}

080023bc <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80023bc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80023be:	2040      	movs	r0, #64	@ 0x40
 80023c0:	f000 fa78 	bl	80028b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80023c4:	2080      	movs	r0, #128	@ 0x80
 80023c6:	0140      	lsls	r0, r0, #5
 80023c8:	f000 fa74 	bl	80028b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80023cc:	2080      	movs	r0, #128	@ 0x80
 80023ce:	0180      	lsls	r0, r0, #6
 80023d0:	f000 fa70 	bl	80028b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80023d4:	2080      	movs	r0, #128	@ 0x80
 80023d6:	01c0      	lsls	r0, r0, #7
 80023d8:	f000 fa6c 	bl	80028b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80023dc:	bd10      	pop	{r4, pc}
	...

080023e0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 interrupt.
  */
void USART2_IRQHandler(void)
{
 80023e0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80023e2:	4802      	ldr	r0, [pc, #8]	@ (80023ec <USART2_IRQHandler+0xc>)
 80023e4:	f001 f9fc 	bl	80037e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80023e8:	bd10      	pop	{r4, pc}
 80023ea:	46c0      	nop			@ (mov r8, r8)
 80023ec:	20000144 	.word	0x20000144

080023f0 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 80023f0:	2001      	movs	r0, #1
 80023f2:	4770      	bx	lr

080023f4 <_kill>:

int _kill(int pid, int sig)
{
 80023f4:	b510      	push	{r4, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80023f6:	f002 fa63 	bl	80048c0 <__errno>
 80023fa:	2316      	movs	r3, #22
 80023fc:	6003      	str	r3, [r0, #0]
  return -1;
 80023fe:	2001      	movs	r0, #1
}
 8002400:	4240      	negs	r0, r0
 8002402:	bd10      	pop	{r4, pc}

08002404 <_exit>:

void _exit (int status)
{
 8002404:	b510      	push	{r4, lr}
  errno = EINVAL;
 8002406:	f002 fa5b 	bl	80048c0 <__errno>
 800240a:	2316      	movs	r3, #22
 800240c:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 800240e:	e7fe      	b.n	800240e <_exit+0xa>

08002410 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002410:	b570      	push	{r4, r5, r6, lr}
 8002412:	000e      	movs	r6, r1
 8002414:	0014      	movs	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002416:	2500      	movs	r5, #0
 8002418:	42a5      	cmp	r5, r4
 800241a:	db01      	blt.n	8002420 <_read+0x10>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 800241c:	0020      	movs	r0, r4
 800241e:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 8002420:	e000      	b.n	8002424 <_read+0x14>
 8002422:	bf00      	nop
 8002424:	5570      	strb	r0, [r6, r5]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002426:	3501      	adds	r5, #1
 8002428:	e7f6      	b.n	8002418 <_read+0x8>

0800242a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800242a:	b570      	push	{r4, r5, r6, lr}
 800242c:	000e      	movs	r6, r1
 800242e:	0014      	movs	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002430:	2500      	movs	r5, #0
 8002432:	42a5      	cmp	r5, r4
 8002434:	db01      	blt.n	800243a <_write+0x10>
  {
    __io_putchar(*ptr++);
  }
  return len;
}
 8002436:	0020      	movs	r0, r4
 8002438:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
 800243a:	5d70      	ldrb	r0, [r6, r5]
 800243c:	e000      	b.n	8002440 <_write+0x16>
 800243e:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002440:	3501      	adds	r5, #1
 8002442:	e7f6      	b.n	8002432 <_write+0x8>

08002444 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
 8002444:	2001      	movs	r0, #1
}
 8002446:	4240      	negs	r0, r0
 8002448:	4770      	bx	lr

0800244a <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 800244a:	2380      	movs	r3, #128	@ 0x80
 800244c:	019b      	lsls	r3, r3, #6
  return 0;
}
 800244e:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 8002450:	604b      	str	r3, [r1, #4]
}
 8002452:	4770      	bx	lr

08002454 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8002454:	2001      	movs	r0, #1
 8002456:	4770      	bx	lr

08002458 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8002458:	2000      	movs	r0, #0
 800245a:	4770      	bx	lr

0800245c <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800245c:	490b      	ldr	r1, [pc, #44]	@ (800248c <_sbrk+0x30>)
 800245e:	4a0c      	ldr	r2, [pc, #48]	@ (8002490 <_sbrk+0x34>)
{
 8002460:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002462:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002464:	490b      	ldr	r1, [pc, #44]	@ (8002494 <_sbrk+0x38>)
{
 8002466:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8002468:	6808      	ldr	r0, [r1, #0]
 800246a:	2800      	cmp	r0, #0
 800246c:	d101      	bne.n	8002472 <_sbrk+0x16>
  {
    __sbrk_heap_end = &_end;
 800246e:	480a      	ldr	r0, [pc, #40]	@ (8002498 <_sbrk+0x3c>)
 8002470:	6008      	str	r0, [r1, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002472:	6808      	ldr	r0, [r1, #0]
 8002474:	18c3      	adds	r3, r0, r3
 8002476:	4293      	cmp	r3, r2
 8002478:	d906      	bls.n	8002488 <_sbrk+0x2c>
  {
    errno = ENOMEM;
 800247a:	f002 fa21 	bl	80048c0 <__errno>
 800247e:	230c      	movs	r3, #12
 8002480:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8002482:	2001      	movs	r0, #1
 8002484:	4240      	negs	r0, r0

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8002486:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8002488:	600b      	str	r3, [r1, #0]
  return (void *)prev_heap_end;
 800248a:	e7fc      	b.n	8002486 <_sbrk+0x2a>
 800248c:	00000400 	.word	0x00000400
 8002490:	20001800 	.word	0x20001800
 8002494:	20000278 	.word	0x20000278
 8002498:	200003d0 	.word	0x200003d0

0800249c <SystemInit>:
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800249c:	2280      	movs	r2, #128	@ 0x80
 800249e:	4b02      	ldr	r3, [pc, #8]	@ (80024a8 <SystemInit+0xc>)
 80024a0:	0512      	lsls	r2, r2, #20
 80024a2:	609a      	str	r2, [r3, #8]
#endif
}
 80024a4:	4770      	bx	lr
 80024a6:	46c0      	nop			@ (mov r8, r8)
 80024a8:	e000ed00 	.word	0xe000ed00

080024ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80024ac:	480d      	ldr	r0, [pc, #52]	@ (80024e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80024ae:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80024b0:	f7ff fff4 	bl	800249c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80024b4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80024b6:	e003      	b.n	80024c0 <LoopCopyDataInit>

080024b8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80024b8:	4b0b      	ldr	r3, [pc, #44]	@ (80024e8 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 80024ba:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80024bc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80024be:	3104      	adds	r1, #4

080024c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80024c0:	480a      	ldr	r0, [pc, #40]	@ (80024ec <LoopForever+0xa>)
  ldr r3, =_edata
 80024c2:	4b0b      	ldr	r3, [pc, #44]	@ (80024f0 <LoopForever+0xe>)
  adds r2, r0, r1
 80024c4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80024c6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80024c8:	d3f6      	bcc.n	80024b8 <CopyDataInit>
  ldr r2, =_sbss
 80024ca:	4a0a      	ldr	r2, [pc, #40]	@ (80024f4 <LoopForever+0x12>)
  b LoopFillZerobss
 80024cc:	e002      	b.n	80024d4 <LoopFillZerobss>

080024ce <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80024ce:	2300      	movs	r3, #0
  str  r3, [r2]
 80024d0:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024d2:	3204      	adds	r2, #4

080024d4 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 80024d4:	4b08      	ldr	r3, [pc, #32]	@ (80024f8 <LoopForever+0x16>)
  cmp r2, r3
 80024d6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80024d8:	d3f9      	bcc.n	80024ce <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80024da:	f002 f9f7 	bl	80048cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80024de:	f7ff fcd3 	bl	8001e88 <main>

080024e2 <LoopForever>:

LoopForever:
    b LoopForever
 80024e2:	e7fe      	b.n	80024e2 <LoopForever>
  ldr   r0, =_estack
 80024e4:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 80024e8:	080059c0 	.word	0x080059c0
  ldr r0, =_sdata
 80024ec:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80024f0:	2000006c 	.word	0x2000006c
  ldr r2, =_sbss
 80024f4:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 80024f8:	200003cc 	.word	0x200003cc

080024fc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80024fc:	e7fe      	b.n	80024fc <ADC1_IRQHandler>
	...

08002500 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002500:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if ((uint32_t)uwTickFreq != 0UL)
 8002502:	4b10      	ldr	r3, [pc, #64]	@ (8002544 <HAL_InitTick+0x44>)
{
 8002504:	0005      	movs	r5, r0
  if ((uint32_t)uwTickFreq != 0UL)
 8002506:	7819      	ldrb	r1, [r3, #0]
 8002508:	2900      	cmp	r1, #0
 800250a:	d101      	bne.n	8002510 <HAL_InitTick+0x10>
        status = HAL_ERROR;
      }
    }
    else
    {
      status = HAL_ERROR;
 800250c:	2001      	movs	r0, #1
    status = HAL_ERROR;
  }

  /* Return function status */
  return status;
}
 800250e:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8002510:	20fa      	movs	r0, #250	@ 0xfa
 8002512:	0080      	lsls	r0, r0, #2
 8002514:	f7fd fe14 	bl	8000140 <__udivsi3>
 8002518:	4c0b      	ldr	r4, [pc, #44]	@ (8002548 <HAL_InitTick+0x48>)
 800251a:	0001      	movs	r1, r0
 800251c:	6820      	ldr	r0, [r4, #0]
 800251e:	f7fd fe0f 	bl	8000140 <__udivsi3>
 8002522:	f000 f87b 	bl	800261c <HAL_SYSTICK_Config>
 8002526:	1e04      	subs	r4, r0, #0
 8002528:	d1f0      	bne.n	800250c <HAL_InitTick+0xc>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800252a:	2d03      	cmp	r5, #3
 800252c:	d8ee      	bhi.n	800250c <HAL_InitTick+0xc>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800252e:	0002      	movs	r2, r0
 8002530:	2001      	movs	r0, #1
 8002532:	0029      	movs	r1, r5
 8002534:	4240      	negs	r0, r0
 8002536:	f000 f83b 	bl	80025b0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800253a:	4b04      	ldr	r3, [pc, #16]	@ (800254c <HAL_InitTick+0x4c>)
 800253c:	0020      	movs	r0, r4
 800253e:	601d      	str	r5, [r3, #0]
  return status;
 8002540:	e7e5      	b.n	800250e <HAL_InitTick+0xe>
 8002542:	46c0      	nop			@ (mov r8, r8)
 8002544:	20000008 	.word	0x20000008
 8002548:	20000004 	.word	0x20000004
 800254c:	2000000c 	.word	0x2000000c

08002550 <HAL_Init>:
{
 8002550:	b510      	push	{r4, lr}
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002552:	2003      	movs	r0, #3
 8002554:	f7ff ffd4 	bl	8002500 <HAL_InitTick>
 8002558:	1e04      	subs	r4, r0, #0
 800255a:	d103      	bne.n	8002564 <HAL_Init+0x14>
    HAL_MspInit();
 800255c:	f7ff fe38 	bl	80021d0 <HAL_MspInit>
}
 8002560:	0020      	movs	r0, r4
 8002562:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8002564:	2401      	movs	r4, #1
 8002566:	e7fb      	b.n	8002560 <HAL_Init+0x10>

08002568 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8002568:	4a03      	ldr	r2, [pc, #12]	@ (8002578 <HAL_IncTick+0x10>)
 800256a:	4b04      	ldr	r3, [pc, #16]	@ (800257c <HAL_IncTick+0x14>)
 800256c:	6811      	ldr	r1, [r2, #0]
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	185b      	adds	r3, r3, r1
 8002572:	6013      	str	r3, [r2, #0]
}
 8002574:	4770      	bx	lr
 8002576:	46c0      	nop			@ (mov r8, r8)
 8002578:	2000027c 	.word	0x2000027c
 800257c:	20000008 	.word	0x20000008

08002580 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002580:	4b01      	ldr	r3, [pc, #4]	@ (8002588 <HAL_GetTick+0x8>)
 8002582:	6818      	ldr	r0, [r3, #0]
}
 8002584:	4770      	bx	lr
 8002586:	46c0      	nop			@ (mov r8, r8)
 8002588:	2000027c 	.word	0x2000027c

0800258c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800258c:	b570      	push	{r4, r5, r6, lr}
 800258e:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002590:	f7ff fff6 	bl	8002580 <HAL_GetTick>
 8002594:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002596:	1c63      	adds	r3, r4, #1
 8002598:	d002      	beq.n	80025a0 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800259a:	4b04      	ldr	r3, [pc, #16]	@ (80025ac <HAL_Delay+0x20>)
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	18e4      	adds	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025a0:	f7ff ffee 	bl	8002580 <HAL_GetTick>
 80025a4:	1b40      	subs	r0, r0, r5
 80025a6:	42a0      	cmp	r0, r4
 80025a8:	d3fa      	bcc.n	80025a0 <HAL_Delay+0x14>
  {
  }
}
 80025aa:	bd70      	pop	{r4, r5, r6, pc}
 80025ac:	20000008 	.word	0x20000008

080025b0 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025b0:	b510      	push	{r4, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80025b2:	24ff      	movs	r4, #255	@ 0xff
 80025b4:	2203      	movs	r2, #3
 80025b6:	000b      	movs	r3, r1
 80025b8:	0021      	movs	r1, r4
 80025ba:	4002      	ands	r2, r0
 80025bc:	00d2      	lsls	r2, r2, #3
 80025be:	4091      	lsls	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80025c0:	019b      	lsls	r3, r3, #6
 80025c2:	4023      	ands	r3, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80025c4:	43c9      	mvns	r1, r1
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80025c6:	4093      	lsls	r3, r2
  if ((int32_t)(IRQn) >= 0)
 80025c8:	2800      	cmp	r0, #0
 80025ca:	db0a      	blt.n	80025e2 <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80025cc:	24c0      	movs	r4, #192	@ 0xc0
 80025ce:	4a0b      	ldr	r2, [pc, #44]	@ (80025fc <HAL_NVIC_SetPriority+0x4c>)
 80025d0:	0880      	lsrs	r0, r0, #2
 80025d2:	0080      	lsls	r0, r0, #2
 80025d4:	1880      	adds	r0, r0, r2
 80025d6:	00a4      	lsls	r4, r4, #2
 80025d8:	5902      	ldr	r2, [r0, r4]
 80025da:	400a      	ands	r2, r1
 80025dc:	4313      	orrs	r3, r2
 80025de:	5103      	str	r3, [r0, r4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
}
 80025e0:	bd10      	pop	{r4, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80025e2:	220f      	movs	r2, #15
 80025e4:	4010      	ands	r0, r2
 80025e6:	3808      	subs	r0, #8
 80025e8:	4a05      	ldr	r2, [pc, #20]	@ (8002600 <HAL_NVIC_SetPriority+0x50>)
 80025ea:	0880      	lsrs	r0, r0, #2
 80025ec:	0080      	lsls	r0, r0, #2
 80025ee:	1880      	adds	r0, r0, r2
 80025f0:	69c2      	ldr	r2, [r0, #28]
 80025f2:	4011      	ands	r1, r2
 80025f4:	4319      	orrs	r1, r3
 80025f6:	61c1      	str	r1, [r0, #28]
 80025f8:	e7f2      	b.n	80025e0 <HAL_NVIC_SetPriority+0x30>
 80025fa:	46c0      	nop			@ (mov r8, r8)
 80025fc:	e000e100 	.word	0xe000e100
 8002600:	e000ed00 	.word	0xe000ed00

08002604 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002604:	2800      	cmp	r0, #0
 8002606:	db05      	blt.n	8002614 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002608:	231f      	movs	r3, #31
 800260a:	4018      	ands	r0, r3
 800260c:	3b1e      	subs	r3, #30
 800260e:	4083      	lsls	r3, r0
 8002610:	4a01      	ldr	r2, [pc, #4]	@ (8002618 <HAL_NVIC_EnableIRQ+0x14>)
 8002612:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002614:	4770      	bx	lr
 8002616:	46c0      	nop			@ (mov r8, r8)
 8002618:	e000e100 	.word	0xe000e100

0800261c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800261c:	2280      	movs	r2, #128	@ 0x80
 800261e:	1e43      	subs	r3, r0, #1
 8002620:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8002622:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002624:	4293      	cmp	r3, r2
 8002626:	d20d      	bcs.n	8002644 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002628:	21c0      	movs	r1, #192	@ 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800262a:	4a07      	ldr	r2, [pc, #28]	@ (8002648 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800262c:	4807      	ldr	r0, [pc, #28]	@ (800264c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800262e:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002630:	6a03      	ldr	r3, [r0, #32]
 8002632:	0609      	lsls	r1, r1, #24
 8002634:	021b      	lsls	r3, r3, #8
 8002636:	0a1b      	lsrs	r3, r3, #8
 8002638:	430b      	orrs	r3, r1
 800263a:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800263c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800263e:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002640:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002642:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 8002644:	4770      	bx	lr
 8002646:	46c0      	nop			@ (mov r8, r8)
 8002648:	e000e010 	.word	0xe000e010
 800264c:	e000ed00 	.word	0xe000ed00

08002650 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002650:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8002652:	2800      	cmp	r0, #0
 8002654:	d008      	beq.n	8002668 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002656:	1d84      	adds	r4, r0, #6
 8002658:	7fe3      	ldrb	r3, [r4, #31]
 800265a:	1d41      	adds	r1, r0, #5
 800265c:	2b02      	cmp	r3, #2
 800265e:	d005      	beq.n	800266c <HAL_DMA_Abort+0x1c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002660:	2304      	movs	r3, #4
 8002662:	63c3      	str	r3, [r0, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002664:	2300      	movs	r3, #0
 8002666:	77cb      	strb	r3, [r1, #31]
    return HAL_ERROR;
 8002668:	2001      	movs	r0, #1
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
  }

  return HAL_OK;
}
 800266a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800266c:	250e      	movs	r5, #14
 800266e:	6802      	ldr	r2, [r0, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002670:	6c46      	ldr	r6, [r0, #68]	@ 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002672:	6813      	ldr	r3, [r2, #0]
 8002674:	43ab      	bics	r3, r5
 8002676:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002678:	6833      	ldr	r3, [r6, #0]
 800267a:	4d10      	ldr	r5, [pc, #64]	@ (80026bc <HAL_DMA_Abort+0x6c>)
 800267c:	402b      	ands	r3, r5
 800267e:	6033      	str	r3, [r6, #0]
    __HAL_DMA_DISABLE(hdma);
 8002680:	2301      	movs	r3, #1
 8002682:	6816      	ldr	r6, [r2, #0]
 8002684:	439e      	bics	r6, r3
 8002686:	6016      	str	r6, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1cU)));
 8002688:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 800268a:	331b      	adds	r3, #27
 800268c:	401a      	ands	r2, r3
 800268e:	3b1b      	subs	r3, #27
 8002690:	4093      	lsls	r3, r2
 8002692:	4e0b      	ldr	r6, [pc, #44]	@ (80026c0 <HAL_DMA_Abort+0x70>)
 8002694:	6877      	ldr	r7, [r6, #4]
 8002696:	433b      	orrs	r3, r7
 8002698:	6073      	str	r3, [r6, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800269a:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 800269c:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 800269e:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 80026a0:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d005      	beq.n	80026b2 <HAL_DMA_Abort+0x62>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	402a      	ands	r2, r5
 80026aa:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80026ac:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80026ae:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 80026b0:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80026b2:	2301      	movs	r3, #1
    __HAL_UNLOCK(hdma);
 80026b4:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 80026b6:	77e3      	strb	r3, [r4, #31]
    __HAL_UNLOCK(hdma);
 80026b8:	77c8      	strb	r0, [r1, #31]
  return HAL_OK;
 80026ba:	e7d6      	b.n	800266a <HAL_DMA_Abort+0x1a>
 80026bc:	fffffeff 	.word	0xfffffeff
 80026c0:	40020000 	.word	0x40020000

080026c4 <HAL_DMA_Abort_IT>:
  * @param  hdma    pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80026c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef status = HAL_OK;

  /* Process Unlocked/locked */
  __HAL_UNLOCK(hdma);
  __HAL_LOCK(hdma);
 80026c6:	2301      	movs	r3, #1
 80026c8:	1d41      	adds	r1, r0, #5
 80026ca:	77cb      	strb	r3, [r1, #31]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80026cc:	1d84      	adds	r4, r0, #6
 80026ce:	7fe2      	ldrb	r2, [r4, #31]
 80026d0:	2a02      	cmp	r2, #2
 80026d2:	d003      	beq.n	80026dc <HAL_DMA_Abort_IT+0x18>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026d4:	2204      	movs	r2, #4
 80026d6:	63c2      	str	r2, [r0, #60]	@ 0x3c

    status = HAL_ERROR;
 80026d8:	0018      	movs	r0, r3
    {
      hdma->XferAbortCallback(hdma);
    }
  }
  return status;
}
 80026da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026dc:	260e      	movs	r6, #14
 80026de:	6802      	ldr	r2, [r0, #0]
 80026e0:	6815      	ldr	r5, [r2, #0]
 80026e2:	43b5      	bics	r5, r6
 80026e4:	6015      	str	r5, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80026e6:	6815      	ldr	r5, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80026e8:	6c46      	ldr	r6, [r0, #68]	@ 0x44
    __HAL_DMA_DISABLE(hdma);
 80026ea:	439d      	bics	r5, r3
 80026ec:	6015      	str	r5, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80026ee:	6832      	ldr	r2, [r6, #0]
 80026f0:	4d11      	ldr	r5, [pc, #68]	@ (8002738 <HAL_DMA_Abort_IT+0x74>)
 80026f2:	402a      	ands	r2, r5
 80026f4:	6032      	str	r2, [r6, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 80026f6:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 80026f8:	4e10      	ldr	r6, [pc, #64]	@ (800273c <HAL_DMA_Abort_IT+0x78>)
 80026fa:	0015      	movs	r5, r2
 80026fc:	221c      	movs	r2, #28
 80026fe:	4015      	ands	r5, r2
 8002700:	40ab      	lsls	r3, r5
 8002702:	6877      	ldr	r7, [r6, #4]
 8002704:	433b      	orrs	r3, r7
 8002706:	6073      	str	r3, [r6, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002708:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 800270a:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 800270c:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 800270e:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8002710:	2b00      	cmp	r3, #0
 8002712:	d006      	beq.n	8002722 <HAL_DMA_Abort_IT+0x5e>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	4d08      	ldr	r5, [pc, #32]	@ (8002738 <HAL_DMA_Abort_IT+0x74>)
 8002718:	402a      	ands	r2, r5
 800271a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800271c:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800271e:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8002720:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8002722:	2301      	movs	r3, #1
 8002724:	77e3      	strb	r3, [r4, #31]
    __HAL_UNLOCK(hdma);
 8002726:	2300      	movs	r3, #0
 8002728:	77cb      	strb	r3, [r1, #31]
    if (hdma->XferAbortCallback != NULL)
 800272a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800272c:	2b00      	cmp	r3, #0
 800272e:	d000      	beq.n	8002732 <HAL_DMA_Abort_IT+0x6e>
      hdma->XferAbortCallback(hdma);
 8002730:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8002732:	2000      	movs	r0, #0
 8002734:	e7d1      	b.n	80026da <HAL_DMA_Abort_IT+0x16>
 8002736:	46c0      	nop			@ (mov r8, r8)
 8002738:	fffffeff 	.word	0xfffffeff
 800273c:	40020000 	.word	0x40020000

08002740 <HAL_GPIO_Init>:
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8002740:	2300      	movs	r3, #0
 8002742:	469c      	mov	ip, r3
{
 8002744:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002746:	b085      	sub	sp, #20
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002748:	680b      	ldr	r3, [r1, #0]
 800274a:	4664      	mov	r4, ip
 800274c:	001a      	movs	r2, r3
 800274e:	40e2      	lsrs	r2, r4
 8002750:	d101      	bne.n	8002756 <HAL_GPIO_Init+0x16>
      }
    }

    position++;
  }
}
 8002752:	b005      	add	sp, #20
 8002754:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002756:	4662      	mov	r2, ip
 8002758:	2601      	movs	r6, #1
 800275a:	4096      	lsls	r6, r2
 800275c:	001a      	movs	r2, r3
 800275e:	4032      	ands	r2, r6
 8002760:	9201      	str	r2, [sp, #4]
    if (iocurrent != 0U)
 8002762:	4233      	tst	r3, r6
 8002764:	d100      	bne.n	8002768 <HAL_GPIO_Init+0x28>
 8002766:	e090      	b.n	800288a <HAL_GPIO_Init+0x14a>
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002768:	684f      	ldr	r7, [r1, #4]
 800276a:	2310      	movs	r3, #16
 800276c:	003d      	movs	r5, r7
 800276e:	439d      	bics	r5, r3
 8002770:	9503      	str	r5, [sp, #12]
 8002772:	2d02      	cmp	r5, #2
 8002774:	d114      	bne.n	80027a0 <HAL_GPIO_Init+0x60>
        tmp = GPIOx->AFR[position >> 3U];
 8002776:	4663      	mov	r3, ip
 8002778:	08da      	lsrs	r2, r3, #3
 800277a:	0092      	lsls	r2, r2, #2
 800277c:	1882      	adds	r2, r0, r2
 800277e:	6a13      	ldr	r3, [r2, #32]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 8002780:	2407      	movs	r4, #7
        tmp = GPIOx->AFR[position >> 3U];
 8002782:	001d      	movs	r5, r3
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 8002784:	4663      	mov	r3, ip
 8002786:	401c      	ands	r4, r3
 8002788:	230f      	movs	r3, #15
 800278a:	00a4      	lsls	r4, r4, #2
 800278c:	40a3      	lsls	r3, r4
 800278e:	439d      	bics	r5, r3
 8002790:	9502      	str	r5, [sp, #8]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8002792:	250f      	movs	r5, #15
 8002794:	690b      	ldr	r3, [r1, #16]
 8002796:	402b      	ands	r3, r5
 8002798:	40a3      	lsls	r3, r4
 800279a:	9c02      	ldr	r4, [sp, #8]
 800279c:	4323      	orrs	r3, r4
        GPIOx->AFR[position >> 3U] = tmp;
 800279e:	6213      	str	r3, [r2, #32]
      tmp = GPIOx->MODER;
 80027a0:	4663      	mov	r3, ip
 80027a2:	005a      	lsls	r2, r3, #1
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80027a4:	2303      	movs	r3, #3
 80027a6:	4093      	lsls	r3, r2
      tmp = GPIOx->MODER;
 80027a8:	6804      	ldr	r4, [r0, #0]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80027aa:	43dd      	mvns	r5, r3
 80027ac:	439c      	bics	r4, r3
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027ae:	2303      	movs	r3, #3
 80027b0:	403b      	ands	r3, r7
 80027b2:	4093      	lsls	r3, r2
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80027b4:	9502      	str	r5, [sp, #8]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80027b6:	9d03      	ldr	r5, [sp, #12]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027b8:	4323      	orrs	r3, r4
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80027ba:	3d01      	subs	r5, #1
      GPIOx->MODER = tmp;
 80027bc:	6003      	str	r3, [r0, #0]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80027be:	2d01      	cmp	r5, #1
 80027c0:	d80f      	bhi.n	80027e2 <HAL_GPIO_Init+0xa2>
        tmp = GPIOx->OSPEEDR;
 80027c2:	6884      	ldr	r4, [r0, #8]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80027c4:	9b02      	ldr	r3, [sp, #8]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80027c6:	2501      	movs	r5, #1
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80027c8:	401c      	ands	r4, r3
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 80027ca:	68cb      	ldr	r3, [r1, #12]
 80027cc:	4093      	lsls	r3, r2
 80027ce:	4323      	orrs	r3, r4
        GPIOx->OSPEEDR = tmp;
 80027d0:	6083      	str	r3, [r0, #8]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80027d2:	093b      	lsrs	r3, r7, #4
 80027d4:	402b      	ands	r3, r5
 80027d6:	4665      	mov	r5, ip
 80027d8:	40ab      	lsls	r3, r5
        tmp = GPIOx->OTYPER;
 80027da:	6844      	ldr	r4, [r0, #4]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80027dc:	43b4      	bics	r4, r6
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80027de:	4323      	orrs	r3, r4
        GPIOx->OTYPER = tmp;
 80027e0:	6043      	str	r3, [r0, #4]
      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80027e2:	2f03      	cmp	r7, #3
 80027e4:	d051      	beq.n	800288a <HAL_GPIO_Init+0x14a>
        tmp = GPIOx->PUPDR;
 80027e6:	68c4      	ldr	r4, [r0, #12]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80027e8:	9b02      	ldr	r3, [sp, #8]
 80027ea:	401c      	ands	r4, r3
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 80027ec:	688b      	ldr	r3, [r1, #8]
 80027ee:	4093      	lsls	r3, r2
 80027f0:	4323      	orrs	r3, r4
        GPIOx->PUPDR = tmp;
 80027f2:	60c3      	str	r3, [r0, #12]
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027f4:	2380      	movs	r3, #128	@ 0x80
 80027f6:	055b      	lsls	r3, r3, #21
 80027f8:	421f      	tst	r7, r3
 80027fa:	d046      	beq.n	800288a <HAL_GPIO_Init+0x14a>
        tmp = EXTI->EXTICR[position >> 2U];
 80027fc:	4663      	mov	r3, ip
 80027fe:	089a      	lsrs	r2, r3, #2
 8002800:	4b23      	ldr	r3, [pc, #140]	@ (8002890 <HAL_GPIO_Init+0x150>)
 8002802:	0092      	lsls	r2, r2, #2
 8002804:	18d2      	adds	r2, r2, r3
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8002806:	2403      	movs	r4, #3
 8002808:	4663      	mov	r3, ip
 800280a:	401c      	ands	r4, r3
 800280c:	230f      	movs	r3, #15
 800280e:	00e4      	lsls	r4, r4, #3
 8002810:	40a3      	lsls	r3, r4
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8002812:	26a0      	movs	r6, #160	@ 0xa0
        tmp = EXTI->EXTICR[position >> 2U];
 8002814:	6e15      	ldr	r5, [r2, #96]	@ 0x60
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8002816:	05f6      	lsls	r6, r6, #23
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8002818:	439d      	bics	r5, r3
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 800281a:	2300      	movs	r3, #0
 800281c:	42b0      	cmp	r0, r6
 800281e:	d00c      	beq.n	800283a <HAL_GPIO_Init+0xfa>
 8002820:	4e1c      	ldr	r6, [pc, #112]	@ (8002894 <HAL_GPIO_Init+0x154>)
 8002822:	3301      	adds	r3, #1
 8002824:	42b0      	cmp	r0, r6
 8002826:	d008      	beq.n	800283a <HAL_GPIO_Init+0xfa>
 8002828:	4e1b      	ldr	r6, [pc, #108]	@ (8002898 <HAL_GPIO_Init+0x158>)
 800282a:	3301      	adds	r3, #1
 800282c:	42b0      	cmp	r0, r6
 800282e:	d004      	beq.n	800283a <HAL_GPIO_Init+0xfa>
 8002830:	4b1a      	ldr	r3, [pc, #104]	@ (800289c <HAL_GPIO_Init+0x15c>)
 8002832:	18c3      	adds	r3, r0, r3
 8002834:	1e5e      	subs	r6, r3, #1
 8002836:	41b3      	sbcs	r3, r6
 8002838:	3305      	adds	r3, #5
 800283a:	40a3      	lsls	r3, r4
 800283c:	432b      	orrs	r3, r5
        EXTI->EXTICR[position >> 2U] = tmp;
 800283e:	6613      	str	r3, [r2, #96]	@ 0x60
        tmp = EXTI->IMR1;
 8002840:	4b17      	ldr	r3, [pc, #92]	@ (80028a0 <HAL_GPIO_Init+0x160>)
        tmp &= ~((uint32_t)iocurrent);
 8002842:	9a01      	ldr	r2, [sp, #4]
        tmp = EXTI->IMR1;
 8002844:	6fdd      	ldr	r5, [r3, #124]	@ 0x7c
          tmp |= iocurrent;
 8002846:	9c01      	ldr	r4, [sp, #4]
        tmp &= ~((uint32_t)iocurrent);
 8002848:	43d2      	mvns	r2, r2
          tmp |= iocurrent;
 800284a:	432c      	orrs	r4, r5
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800284c:	03fe      	lsls	r6, r7, #15
 800284e:	d401      	bmi.n	8002854 <HAL_GPIO_Init+0x114>
        tmp &= ~((uint32_t)iocurrent);
 8002850:	002c      	movs	r4, r5
 8002852:	4014      	ands	r4, r2
        EXTI->IMR1 = tmp;
 8002854:	67dc      	str	r4, [r3, #124]	@ 0x7c
        tmp = EXTI->EMR1;
 8002856:	4c13      	ldr	r4, [pc, #76]	@ (80028a4 <HAL_GPIO_Init+0x164>)
          tmp |= iocurrent;
 8002858:	9d01      	ldr	r5, [sp, #4]
        tmp = EXTI->EMR1;
 800285a:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
          tmp |= iocurrent;
 800285c:	431d      	orrs	r5, r3
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800285e:	03be      	lsls	r6, r7, #14
 8002860:	d401      	bmi.n	8002866 <HAL_GPIO_Init+0x126>
        tmp &= ~((uint32_t)iocurrent);
 8002862:	4013      	ands	r3, r2
 8002864:	001d      	movs	r5, r3
        EXTI->EMR1 = tmp;
 8002866:	4b0a      	ldr	r3, [pc, #40]	@ (8002890 <HAL_GPIO_Init+0x150>)
 8002868:	67e5      	str	r5, [r4, #124]	@ 0x7c
        tmp = EXTI->RTSR1;
 800286a:	681d      	ldr	r5, [r3, #0]
          tmp |= iocurrent;
 800286c:	9c01      	ldr	r4, [sp, #4]
 800286e:	432c      	orrs	r4, r5
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002870:	02fe      	lsls	r6, r7, #11
 8002872:	d401      	bmi.n	8002878 <HAL_GPIO_Init+0x138>
        tmp &= ~((uint32_t)iocurrent);
 8002874:	002c      	movs	r4, r5
 8002876:	4014      	ands	r4, r2
        EXTI->RTSR1 = tmp;
 8002878:	601c      	str	r4, [r3, #0]
        tmp = EXTI->FTSR1;
 800287a:	685c      	ldr	r4, [r3, #4]
          tmp |= iocurrent;
 800287c:	9d01      	ldr	r5, [sp, #4]
 800287e:	4325      	orrs	r5, r4
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002880:	02bf      	lsls	r7, r7, #10
 8002882:	d401      	bmi.n	8002888 <HAL_GPIO_Init+0x148>
        tmp &= ~((uint32_t)iocurrent);
 8002884:	4014      	ands	r4, r2
 8002886:	0025      	movs	r5, r4
        EXTI->FTSR1 = tmp;
 8002888:	605d      	str	r5, [r3, #4]
    position++;
 800288a:	2301      	movs	r3, #1
 800288c:	449c      	add	ip, r3
 800288e:	e75b      	b.n	8002748 <HAL_GPIO_Init+0x8>
 8002890:	40021800 	.word	0x40021800
 8002894:	50000400 	.word	0x50000400
 8002898:	50000800 	.word	0x50000800
 800289c:	afffec00 	.word	0xafffec00
 80028a0:	40021804 	.word	0x40021804
 80028a4:	40021808 	.word	0x40021808

080028a8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028a8:	2a00      	cmp	r2, #0
 80028aa:	d001      	beq.n	80028b0 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80028ac:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80028ae:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80028b0:	6281      	str	r1, [r0, #40]	@ 0x28
}
 80028b2:	e7fc      	b.n	80028ae <HAL_GPIO_WritePin+0x6>

080028b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80028b4:	b570      	push	{r4, r5, r6, lr}
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 80028b6:	4d08      	ldr	r5, [pc, #32]	@ (80028d8 <HAL_GPIO_EXTI_IRQHandler+0x24>)
{
 80028b8:	0004      	movs	r4, r0
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 80028ba:	68eb      	ldr	r3, [r5, #12]
 80028bc:	4218      	tst	r0, r3
 80028be:	d002      	beq.n	80028c6 <HAL_GPIO_EXTI_IRQHandler+0x12>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80028c0:	60e8      	str	r0, [r5, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80028c2:	f7ff f97b 	bl	8001bbc <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 80028c6:	692b      	ldr	r3, [r5, #16]
 80028c8:	4223      	tst	r3, r4
 80028ca:	d003      	beq.n	80028d4 <HAL_GPIO_EXTI_IRQHandler+0x20>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80028cc:	0020      	movs	r0, r4
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80028ce:	612c      	str	r4, [r5, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80028d0:	f7ff f9ce 	bl	8001c70 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80028d4:	bd70      	pop	{r4, r5, r6, pc}
 80028d6:	46c0      	nop			@ (mov r8, r8)
 80028d8:	40021800 	.word	0x40021800

080028dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028dc:	b570      	push	{r4, r5, r6, lr}
 80028de:	0004      	movs	r4, r0
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
  {
    return HAL_ERROR;
 80028e0:	2001      	movs	r0, #1
  if (hi2c == NULL)
 80028e2:	2c00      	cmp	r4, #0
 80028e4:	d04e      	beq.n	8002984 <HAL_I2C_Init+0xa8>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028e6:	0025      	movs	r5, r4
 80028e8:	3541      	adds	r5, #65	@ 0x41
 80028ea:	782b      	ldrb	r3, [r5, #0]
 80028ec:	b2da      	uxtb	r2, r3
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d105      	bne.n	80028fe <HAL_I2C_Init+0x22>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028f2:	0023      	movs	r3, r4
 80028f4:	3340      	adds	r3, #64	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80028f6:	0020      	movs	r0, r4
    hi2c->Lock = HAL_UNLOCKED;
 80028f8:	701a      	strb	r2, [r3, #0]
    HAL_I2C_MspInit(hi2c);
 80028fa:	f7ff fc81 	bl	8002200 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028fe:	2324      	movs	r3, #36	@ 0x24

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002900:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002902:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 8002904:	6823      	ldr	r3, [r4, #0]
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002906:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8002908:	681a      	ldr	r2, [r3, #0]
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800290a:	68a6      	ldr	r6, [r4, #8]
  __HAL_I2C_DISABLE(hi2c);
 800290c:	438a      	bics	r2, r1
 800290e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002910:	491d      	ldr	r1, [pc, #116]	@ (8002988 <HAL_I2C_Init+0xac>)
 8002912:	6862      	ldr	r2, [r4, #4]
 8002914:	400a      	ands	r2, r1
 8002916:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002918:	689a      	ldr	r2, [r3, #8]
 800291a:	491c      	ldr	r1, [pc, #112]	@ (800298c <HAL_I2C_Init+0xb0>)
 800291c:	400a      	ands	r2, r1
 800291e:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002920:	2801      	cmp	r0, #1
 8002922:	d107      	bne.n	8002934 <HAL_I2C_Init+0x58>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002924:	2280      	movs	r2, #128	@ 0x80
 8002926:	0212      	lsls	r2, r2, #8
 8002928:	4332      	orrs	r2, r6
 800292a:	609a      	str	r2, [r3, #8]
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800292c:	685a      	ldr	r2, [r3, #4]
 800292e:	4818      	ldr	r0, [pc, #96]	@ (8002990 <HAL_I2C_Init+0xb4>)
 8002930:	4002      	ands	r2, r0
 8002932:	e009      	b.n	8002948 <HAL_I2C_Init+0x6c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002934:	2284      	movs	r2, #132	@ 0x84
 8002936:	0212      	lsls	r2, r2, #8
 8002938:	4332      	orrs	r2, r6
 800293a:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800293c:	2802      	cmp	r0, #2
 800293e:	d1f5      	bne.n	800292c <HAL_I2C_Init+0x50>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002940:	2280      	movs	r2, #128	@ 0x80
 8002942:	6858      	ldr	r0, [r3, #4]
 8002944:	0112      	lsls	r2, r2, #4
 8002946:	4302      	orrs	r2, r0
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002948:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800294a:	6858      	ldr	r0, [r3, #4]
 800294c:	4a11      	ldr	r2, [pc, #68]	@ (8002994 <HAL_I2C_Init+0xb8>)
 800294e:	4302      	orrs	r2, r0
 8002950:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002952:	68da      	ldr	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002954:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002956:	400a      	ands	r2, r1
 8002958:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800295a:	6961      	ldr	r1, [r4, #20]
 800295c:	6922      	ldr	r2, [r4, #16]
 800295e:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002960:	69a1      	ldr	r1, [r4, #24]
 8002962:	0209      	lsls	r1, r1, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002964:	430a      	orrs	r2, r1
 8002966:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002968:	6a21      	ldr	r1, [r4, #32]
 800296a:	69e2      	ldr	r2, [r4, #28]
 800296c:	430a      	orrs	r2, r1
 800296e:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8002970:	2201      	movs	r2, #1
 8002972:	6819      	ldr	r1, [r3, #0]
 8002974:	430a      	orrs	r2, r1
 8002976:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8002978:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800297a:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800297c:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 800297e:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002980:	3442      	adds	r4, #66	@ 0x42
 8002982:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8002984:	bd70      	pop	{r4, r5, r6, pc}
 8002986:	46c0      	nop			@ (mov r8, r8)
 8002988:	f0ffffff 	.word	0xf0ffffff
 800298c:	ffff7fff 	.word	0xffff7fff
 8002990:	fffff7ff 	.word	0xfffff7ff
 8002994:	02008000 	.word	0x02008000

08002998 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002998:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800299a:	0004      	movs	r4, r0
 800299c:	3441      	adds	r4, #65	@ 0x41
 800299e:	7822      	ldrb	r2, [r4, #0]
{
 80029a0:	0003      	movs	r3, r0
 80029a2:	000f      	movs	r7, r1
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029a4:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80029a6:	b2d6      	uxtb	r6, r2
 80029a8:	2a20      	cmp	r2, #32
 80029aa:	d118      	bne.n	80029de <HAL_I2CEx_ConfigAnalogFilter+0x46>
    __HAL_LOCK(hi2c);
 80029ac:	001d      	movs	r5, r3
 80029ae:	3540      	adds	r5, #64	@ 0x40
 80029b0:	782a      	ldrb	r2, [r5, #0]
 80029b2:	2a01      	cmp	r2, #1
 80029b4:	d013      	beq.n	80029de <HAL_I2CEx_ConfigAnalogFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029b6:	2224      	movs	r2, #36	@ 0x24
 80029b8:	7022      	strb	r2, [r4, #0]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	3a23      	subs	r2, #35	@ 0x23
 80029be:	6819      	ldr	r1, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80029c0:	4807      	ldr	r0, [pc, #28]	@ (80029e0 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
    __HAL_I2C_DISABLE(hi2c);
 80029c2:	4391      	bics	r1, r2
 80029c4:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80029c6:	6819      	ldr	r1, [r3, #0]
 80029c8:	4001      	ands	r1, r0
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029ca:	2000      	movs	r0, #0
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80029cc:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 80029ce:	6819      	ldr	r1, [r3, #0]
 80029d0:	4339      	orrs	r1, r7
 80029d2:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 80029d4:	6819      	ldr	r1, [r3, #0]
 80029d6:	430a      	orrs	r2, r1
 80029d8:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80029da:	7026      	strb	r6, [r4, #0]
    __HAL_UNLOCK(hi2c);
 80029dc:	7028      	strb	r0, [r5, #0]
  }
  else
  {
    return HAL_BUSY;
  }
}
 80029de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029e0:	ffffefff 	.word	0xffffefff

080029e4 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029e4:	0002      	movs	r2, r0
{
 80029e6:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 80029e8:	3241      	adds	r2, #65	@ 0x41
 80029ea:	7814      	ldrb	r4, [r2, #0]
{
 80029ec:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80029ee:	b2e5      	uxtb	r5, r4
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029f0:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80029f2:	2c20      	cmp	r4, #32
 80029f4:	d117      	bne.n	8002a26 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 80029f6:	001c      	movs	r4, r3
 80029f8:	3440      	adds	r4, #64	@ 0x40
 80029fa:	7826      	ldrb	r6, [r4, #0]
 80029fc:	2e01      	cmp	r6, #1
 80029fe:	d012      	beq.n	8002a26 <HAL_I2CEx_ConfigDigitalFilter+0x42>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a00:	3022      	adds	r0, #34	@ 0x22
 8002a02:	7010      	strb	r0, [r2, #0]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	3823      	subs	r0, #35	@ 0x23
 8002a08:	681e      	ldr	r6, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002a0a:	4f07      	ldr	r7, [pc, #28]	@ (8002a28 <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    __HAL_I2C_DISABLE(hi2c);
 8002a0c:	4386      	bics	r6, r0
 8002a0e:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 8002a10:	681e      	ldr	r6, [r3, #0]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002a12:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 8002a14:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 8002a16:	4331      	orrs	r1, r6

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002a18:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a1a:	6819      	ldr	r1, [r3, #0]
 8002a1c:	4308      	orrs	r0, r1
 8002a1e:	6018      	str	r0, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a20:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8002a22:	7015      	strb	r5, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8002a24:	7020      	strb	r0, [r4, #0]
  }
  else
  {
    return HAL_BUSY;
  }
}
 8002a26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a28:	fffff0ff 	.word	0xfffff0ff

08002a2c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a2e:	1e05      	subs	r5, r0, #0
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a30:	d101      	bne.n	8002a36 <HAL_RCC_OscConfig+0xa>
  {
    return HAL_ERROR;
 8002a32:	2001      	movs	r0, #1
        __HAL_RCC_PWR_CLK_DISABLE();
      }
    }
  }
  return HAL_OK;
}
 8002a34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a36:	6803      	ldr	r3, [r0, #0]
 8002a38:	07db      	lsls	r3, r3, #31
 8002a3a:	d40d      	bmi.n	8002a58 <HAL_RCC_OscConfig+0x2c>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a3c:	682b      	ldr	r3, [r5, #0]
 8002a3e:	079b      	lsls	r3, r3, #30
 8002a40:	d44f      	bmi.n	8002ae2 <HAL_RCC_OscConfig+0xb6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a42:	682b      	ldr	r3, [r5, #0]
 8002a44:	071b      	lsls	r3, r3, #28
 8002a46:	d500      	bpl.n	8002a4a <HAL_RCC_OscConfig+0x1e>
 8002a48:	e0a4      	b.n	8002b94 <HAL_RCC_OscConfig+0x168>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a4a:	2204      	movs	r2, #4
 8002a4c:	682b      	ldr	r3, [r5, #0]
 8002a4e:	4213      	tst	r3, r2
 8002a50:	d000      	beq.n	8002a54 <HAL_RCC_OscConfig+0x28>
 8002a52:	e0cf      	b.n	8002bf4 <HAL_RCC_OscConfig+0x1c8>
  return HAL_OK;
 8002a54:	2000      	movs	r0, #0
 8002a56:	e7ed      	b.n	8002a34 <HAL_RCC_OscConfig+0x8>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a58:	2138      	movs	r1, #56	@ 0x38
 8002a5a:	4c85      	ldr	r4, [pc, #532]	@ (8002c70 <HAL_RCC_OscConfig+0x244>)
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002a5c:	6843      	ldr	r3, [r0, #4]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a5e:	68a2      	ldr	r2, [r4, #8]
 8002a60:	400a      	ands	r2, r1
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8002a62:	2a08      	cmp	r2, #8
 8002a64:	d102      	bne.n	8002a6c <HAL_RCC_OscConfig+0x40>
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d1e8      	bne.n	8002a3c <HAL_RCC_OscConfig+0x10>
 8002a6a:	e7e2      	b.n	8002a32 <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a6c:	2280      	movs	r2, #128	@ 0x80
 8002a6e:	0252      	lsls	r2, r2, #9
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d111      	bne.n	8002a98 <HAL_RCC_OscConfig+0x6c>
 8002a74:	6822      	ldr	r2, [r4, #0]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002a7a:	f7ff fd81 	bl	8002580 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a7e:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 8002a80:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a82:	02bf      	lsls	r7, r7, #10
 8002a84:	6823      	ldr	r3, [r4, #0]
 8002a86:	423b      	tst	r3, r7
 8002a88:	d1d8      	bne.n	8002a3c <HAL_RCC_OscConfig+0x10>
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002a8a:	f7ff fd79 	bl	8002580 <HAL_GetTick>
 8002a8e:	1b80      	subs	r0, r0, r6
 8002a90:	2864      	cmp	r0, #100	@ 0x64
 8002a92:	d9f7      	bls.n	8002a84 <HAL_RCC_OscConfig+0x58>
            return HAL_TIMEOUT;
 8002a94:	2003      	movs	r0, #3
 8002a96:	e7cd      	b.n	8002a34 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a98:	21a0      	movs	r1, #160	@ 0xa0
 8002a9a:	02c9      	lsls	r1, r1, #11
 8002a9c:	428b      	cmp	r3, r1
 8002a9e:	d108      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x86>
 8002aa0:	2380      	movs	r3, #128	@ 0x80
 8002aa2:	6821      	ldr	r1, [r4, #0]
 8002aa4:	02db      	lsls	r3, r3, #11
 8002aa6:	430b      	orrs	r3, r1
 8002aa8:	6023      	str	r3, [r4, #0]
 8002aaa:	6823      	ldr	r3, [r4, #0]
 8002aac:	431a      	orrs	r2, r3
 8002aae:	6022      	str	r2, [r4, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ab0:	e7e3      	b.n	8002a7a <HAL_RCC_OscConfig+0x4e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ab2:	6822      	ldr	r2, [r4, #0]
 8002ab4:	496f      	ldr	r1, [pc, #444]	@ (8002c74 <HAL_RCC_OscConfig+0x248>)
 8002ab6:	400a      	ands	r2, r1
 8002ab8:	6022      	str	r2, [r4, #0]
 8002aba:	6822      	ldr	r2, [r4, #0]
 8002abc:	496e      	ldr	r1, [pc, #440]	@ (8002c78 <HAL_RCC_OscConfig+0x24c>)
 8002abe:	400a      	ands	r2, r1
 8002ac0:	6022      	str	r2, [r4, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d1d9      	bne.n	8002a7a <HAL_RCC_OscConfig+0x4e>
        tickstart = HAL_GetTick();
 8002ac6:	f7ff fd5b 	bl	8002580 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002aca:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 8002acc:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ace:	02bf      	lsls	r7, r7, #10
 8002ad0:	6823      	ldr	r3, [r4, #0]
 8002ad2:	423b      	tst	r3, r7
 8002ad4:	d0b2      	beq.n	8002a3c <HAL_RCC_OscConfig+0x10>
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002ad6:	f7ff fd53 	bl	8002580 <HAL_GetTick>
 8002ada:	1b80      	subs	r0, r0, r6
 8002adc:	2864      	cmp	r0, #100	@ 0x64
 8002ade:	d9f7      	bls.n	8002ad0 <HAL_RCC_OscConfig+0xa4>
 8002ae0:	e7d8      	b.n	8002a94 <HAL_RCC_OscConfig+0x68>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ae2:	2238      	movs	r2, #56	@ 0x38
 8002ae4:	4c62      	ldr	r4, [pc, #392]	@ (8002c70 <HAL_RCC_OscConfig+0x244>)
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002ae6:	68eb      	ldr	r3, [r5, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ae8:	68a1      	ldr	r1, [r4, #8]
    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8002aea:	4211      	tst	r1, r2
 8002aec:	d11c      	bne.n	8002b28 <HAL_RCC_OscConfig+0xfc>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d09f      	beq.n	8002a32 <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002af2:	6862      	ldr	r2, [r4, #4]
 8002af4:	696b      	ldr	r3, [r5, #20]
 8002af6:	4961      	ldr	r1, [pc, #388]	@ (8002c7c <HAL_RCC_OscConfig+0x250>)
 8002af8:	021b      	lsls	r3, r3, #8
 8002afa:	400a      	ands	r2, r1
 8002afc:	4313      	orrs	r3, r2
 8002afe:	6063      	str	r3, [r4, #4]
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002b00:	6823      	ldr	r3, [r4, #0]
 8002b02:	4a5f      	ldr	r2, [pc, #380]	@ (8002c80 <HAL_RCC_OscConfig+0x254>)
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002b04:	495f      	ldr	r1, [pc, #380]	@ (8002c84 <HAL_RCC_OscConfig+0x258>)
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002b06:	4013      	ands	r3, r2
 8002b08:	692a      	ldr	r2, [r5, #16]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	6023      	str	r3, [r4, #0]
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002b0e:	6823      	ldr	r3, [r4, #0]
 8002b10:	4a5d      	ldr	r2, [pc, #372]	@ (8002c88 <HAL_RCC_OscConfig+0x25c>)
 8002b12:	049b      	lsls	r3, r3, #18
 8002b14:	0f5b      	lsrs	r3, r3, #29
 8002b16:	40da      	lsrs	r2, r3
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002b18:	4b5c      	ldr	r3, [pc, #368]	@ (8002c8c <HAL_RCC_OscConfig+0x260>)
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002b1a:	600a      	str	r2, [r1, #0]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002b1c:	6818      	ldr	r0, [r3, #0]
 8002b1e:	f7ff fcef 	bl	8002500 <HAL_InitTick>
 8002b22:	2800      	cmp	r0, #0
 8002b24:	d08d      	beq.n	8002a42 <HAL_RCC_OscConfig+0x16>
 8002b26:	e784      	b.n	8002a32 <HAL_RCC_OscConfig+0x6>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d020      	beq.n	8002b6e <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002b2c:	6823      	ldr	r3, [r4, #0]
 8002b2e:	4a54      	ldr	r2, [pc, #336]	@ (8002c80 <HAL_RCC_OscConfig+0x254>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b30:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002b32:	4013      	ands	r3, r2
 8002b34:	692a      	ldr	r2, [r5, #16]
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b36:	00ff      	lsls	r7, r7, #3
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	6023      	str	r3, [r4, #0]
        __HAL_RCC_HSI_ENABLE();
 8002b3c:	2380      	movs	r3, #128	@ 0x80
 8002b3e:	6822      	ldr	r2, [r4, #0]
 8002b40:	005b      	lsls	r3, r3, #1
 8002b42:	4313      	orrs	r3, r2
 8002b44:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002b46:	f7ff fd1b 	bl	8002580 <HAL_GetTick>
 8002b4a:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b4c:	6823      	ldr	r3, [r4, #0]
 8002b4e:	423b      	tst	r3, r7
 8002b50:	d007      	beq.n	8002b62 <HAL_RCC_OscConfig+0x136>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b52:	6862      	ldr	r2, [r4, #4]
 8002b54:	696b      	ldr	r3, [r5, #20]
 8002b56:	4949      	ldr	r1, [pc, #292]	@ (8002c7c <HAL_RCC_OscConfig+0x250>)
 8002b58:	021b      	lsls	r3, r3, #8
 8002b5a:	400a      	ands	r2, r1
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	6063      	str	r3, [r4, #4]
 8002b60:	e76f      	b.n	8002a42 <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002b62:	f7ff fd0d 	bl	8002580 <HAL_GetTick>
 8002b66:	1b80      	subs	r0, r0, r6
 8002b68:	2802      	cmp	r0, #2
 8002b6a:	d9ef      	bls.n	8002b4c <HAL_RCC_OscConfig+0x120>
 8002b6c:	e792      	b.n	8002a94 <HAL_RCC_OscConfig+0x68>
        __HAL_RCC_HSI_DISABLE();
 8002b6e:	6823      	ldr	r3, [r4, #0]
 8002b70:	4a47      	ldr	r2, [pc, #284]	@ (8002c90 <HAL_RCC_OscConfig+0x264>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b72:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_HSI_DISABLE();
 8002b74:	4013      	ands	r3, r2
 8002b76:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002b78:	f7ff fd02 	bl	8002580 <HAL_GetTick>
 8002b7c:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b7e:	00ff      	lsls	r7, r7, #3
 8002b80:	6823      	ldr	r3, [r4, #0]
 8002b82:	423b      	tst	r3, r7
 8002b84:	d100      	bne.n	8002b88 <HAL_RCC_OscConfig+0x15c>
 8002b86:	e75c      	b.n	8002a42 <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002b88:	f7ff fcfa 	bl	8002580 <HAL_GetTick>
 8002b8c:	1b80      	subs	r0, r0, r6
 8002b8e:	2802      	cmp	r0, #2
 8002b90:	d9f6      	bls.n	8002b80 <HAL_RCC_OscConfig+0x154>
 8002b92:	e77f      	b.n	8002a94 <HAL_RCC_OscConfig+0x68>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002b94:	2138      	movs	r1, #56	@ 0x38
 8002b96:	4c36      	ldr	r4, [pc, #216]	@ (8002c70 <HAL_RCC_OscConfig+0x244>)
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8002b98:	69aa      	ldr	r2, [r5, #24]
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002b9a:	68a3      	ldr	r3, [r4, #8]
 8002b9c:	400b      	ands	r3, r1
 8002b9e:	2b18      	cmp	r3, #24
 8002ba0:	d103      	bne.n	8002baa <HAL_RCC_OscConfig+0x17e>
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8002ba2:	2a00      	cmp	r2, #0
 8002ba4:	d000      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x17c>
 8002ba6:	e750      	b.n	8002a4a <HAL_RCC_OscConfig+0x1e>
 8002ba8:	e743      	b.n	8002a32 <HAL_RCC_OscConfig+0x6>
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002baa:	2301      	movs	r3, #1
 8002bac:	2a00      	cmp	r2, #0
 8002bae:	d010      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_LSI_ENABLE();
 8002bb0:	6e22      	ldr	r2, [r4, #96]	@ 0x60
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002bb2:	2702      	movs	r7, #2
        __HAL_RCC_LSI_ENABLE();
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	6623      	str	r3, [r4, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8002bb8:	f7ff fce2 	bl	8002580 <HAL_GetTick>
 8002bbc:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002bbe:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8002bc0:	423b      	tst	r3, r7
 8002bc2:	d000      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x19a>
 8002bc4:	e741      	b.n	8002a4a <HAL_RCC_OscConfig+0x1e>
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002bc6:	f7ff fcdb 	bl	8002580 <HAL_GetTick>
 8002bca:	1b80      	subs	r0, r0, r6
 8002bcc:	2802      	cmp	r0, #2
 8002bce:	d9f6      	bls.n	8002bbe <HAL_RCC_OscConfig+0x192>
 8002bd0:	e760      	b.n	8002a94 <HAL_RCC_OscConfig+0x68>
        __HAL_RCC_LSI_DISABLE();
 8002bd2:	6e22      	ldr	r2, [r4, #96]	@ 0x60
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8002bd4:	2702      	movs	r7, #2
        __HAL_RCC_LSI_DISABLE();
 8002bd6:	439a      	bics	r2, r3
 8002bd8:	6622      	str	r2, [r4, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8002bda:	f7ff fcd1 	bl	8002580 <HAL_GetTick>
 8002bde:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8002be0:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8002be2:	423b      	tst	r3, r7
 8002be4:	d100      	bne.n	8002be8 <HAL_RCC_OscConfig+0x1bc>
 8002be6:	e730      	b.n	8002a4a <HAL_RCC_OscConfig+0x1e>
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002be8:	f7ff fcca 	bl	8002580 <HAL_GetTick>
 8002bec:	1b80      	subs	r0, r0, r6
 8002bee:	2802      	cmp	r0, #2
 8002bf0:	d9f6      	bls.n	8002be0 <HAL_RCC_OscConfig+0x1b4>
 8002bf2:	e74f      	b.n	8002a94 <HAL_RCC_OscConfig+0x68>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002bf4:	2138      	movs	r1, #56	@ 0x38
 8002bf6:	4c1e      	ldr	r4, [pc, #120]	@ (8002c70 <HAL_RCC_OscConfig+0x244>)
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8002bf8:	68a8      	ldr	r0, [r5, #8]
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002bfa:	68a3      	ldr	r3, [r4, #8]
 8002bfc:	400b      	ands	r3, r1
 8002bfe:	2b20      	cmp	r3, #32
 8002c00:	d103      	bne.n	8002c0a <HAL_RCC_OscConfig+0x1de>
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8002c02:	4243      	negs	r3, r0
 8002c04:	4158      	adcs	r0, r3
 8002c06:	b2c0      	uxtb	r0, r0
 8002c08:	e714      	b.n	8002a34 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c0a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002c0c:	2801      	cmp	r0, #1
 8002c0e:	d110      	bne.n	8002c32 <HAL_RCC_OscConfig+0x206>
 8002c10:	4303      	orrs	r3, r0
 8002c12:	65e3      	str	r3, [r4, #92]	@ 0x5c
        tickstart = HAL_GetTick();
 8002c14:	f7ff fcb4 	bl	8002580 <HAL_GetTick>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002c18:	2602      	movs	r6, #2
        tickstart = HAL_GetTick();
 8002c1a:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002c1c:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002c1e:	4233      	tst	r3, r6
 8002c20:	d000      	beq.n	8002c24 <HAL_RCC_OscConfig+0x1f8>
 8002c22:	e717      	b.n	8002a54 <HAL_RCC_OscConfig+0x28>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c24:	f7ff fcac 	bl	8002580 <HAL_GetTick>
 8002c28:	4b1a      	ldr	r3, [pc, #104]	@ (8002c94 <HAL_RCC_OscConfig+0x268>)
 8002c2a:	1b40      	subs	r0, r0, r5
 8002c2c:	4298      	cmp	r0, r3
 8002c2e:	d9f5      	bls.n	8002c1c <HAL_RCC_OscConfig+0x1f0>
 8002c30:	e730      	b.n	8002a94 <HAL_RCC_OscConfig+0x68>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c32:	2805      	cmp	r0, #5
 8002c34:	d105      	bne.n	8002c42 <HAL_RCC_OscConfig+0x216>
 8002c36:	4313      	orrs	r3, r2
 8002c38:	65e3      	str	r3, [r4, #92]	@ 0x5c
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	e7e7      	b.n	8002c12 <HAL_RCC_OscConfig+0x1e6>
 8002c42:	2101      	movs	r1, #1
 8002c44:	438b      	bics	r3, r1
 8002c46:	65e3      	str	r3, [r4, #92]	@ 0x5c
 8002c48:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002c4a:	4393      	bics	r3, r2
 8002c4c:	65e3      	str	r3, [r4, #92]	@ 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c4e:	2800      	cmp	r0, #0
 8002c50:	d1e0      	bne.n	8002c14 <HAL_RCC_OscConfig+0x1e8>
        tickstart = HAL_GetTick();
 8002c52:	f7ff fc95 	bl	8002580 <HAL_GetTick>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8002c56:	2602      	movs	r6, #2
        tickstart = HAL_GetTick();
 8002c58:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8002c5a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002c5c:	4233      	tst	r3, r6
 8002c5e:	d100      	bne.n	8002c62 <HAL_RCC_OscConfig+0x236>
 8002c60:	e6f8      	b.n	8002a54 <HAL_RCC_OscConfig+0x28>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c62:	f7ff fc8d 	bl	8002580 <HAL_GetTick>
 8002c66:	4b0b      	ldr	r3, [pc, #44]	@ (8002c94 <HAL_RCC_OscConfig+0x268>)
 8002c68:	1b40      	subs	r0, r0, r5
 8002c6a:	4298      	cmp	r0, r3
 8002c6c:	d9f5      	bls.n	8002c5a <HAL_RCC_OscConfig+0x22e>
 8002c6e:	e711      	b.n	8002a94 <HAL_RCC_OscConfig+0x68>
 8002c70:	40021000 	.word	0x40021000
 8002c74:	fffeffff 	.word	0xfffeffff
 8002c78:	fffbffff 	.word	0xfffbffff
 8002c7c:	ffff80ff 	.word	0xffff80ff
 8002c80:	ffffc7ff 	.word	0xffffc7ff
 8002c84:	20000004 	.word	0x20000004
 8002c88:	02dc6c00 	.word	0x02dc6c00
 8002c8c:	2000000c 	.word	0x2000000c
 8002c90:	fffffeff 	.word	0xfffffeff
 8002c94:	00001388 	.word	0x00001388

08002c98 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002c98:	2238      	movs	r2, #56	@ 0x38
 8002c9a:	4b0f      	ldr	r3, [pc, #60]	@ (8002cd8 <HAL_RCC_GetSysClockFreq+0x40>)
 8002c9c:	6899      	ldr	r1, [r3, #8]
 8002c9e:	4211      	tst	r1, r2
 8002ca0:	d105      	bne.n	8002cae <HAL_RCC_GetSysClockFreq+0x16>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002ca2:	681b      	ldr	r3, [r3, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002ca4:	480d      	ldr	r0, [pc, #52]	@ (8002cdc <HAL_RCC_GetSysClockFreq+0x44>)
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002ca6:	049b      	lsls	r3, r3, #18
 8002ca8:	0f5b      	lsrs	r3, r3, #29
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002caa:	40d8      	lsrs	r0, r3
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 8002cac:	4770      	bx	lr
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002cae:	6899      	ldr	r1, [r3, #8]
 8002cb0:	4011      	ands	r1, r2
 8002cb2:	2908      	cmp	r1, #8
 8002cb4:	d00b      	beq.n	8002cce <HAL_RCC_GetSysClockFreq+0x36>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002cb6:	6899      	ldr	r1, [r3, #8]
 8002cb8:	4011      	ands	r1, r2
 8002cba:	2920      	cmp	r1, #32
 8002cbc:	d009      	beq.n	8002cd2 <HAL_RCC_GetSysClockFreq+0x3a>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002cbe:	689b      	ldr	r3, [r3, #8]
    sysclockfreq = 0U;
 8002cc0:	2000      	movs	r0, #0
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	2b18      	cmp	r3, #24
 8002cc6:	d1f1      	bne.n	8002cac <HAL_RCC_GetSysClockFreq+0x14>
    sysclockfreq = LSI_VALUE;
 8002cc8:	20fa      	movs	r0, #250	@ 0xfa
 8002cca:	01c0      	lsls	r0, r0, #7
 8002ccc:	e7ee      	b.n	8002cac <HAL_RCC_GetSysClockFreq+0x14>
    sysclockfreq = HSE_VALUE;
 8002cce:	4804      	ldr	r0, [pc, #16]	@ (8002ce0 <HAL_RCC_GetSysClockFreq+0x48>)
 8002cd0:	e7ec      	b.n	8002cac <HAL_RCC_GetSysClockFreq+0x14>
    sysclockfreq = LSE_VALUE;
 8002cd2:	2080      	movs	r0, #128	@ 0x80
 8002cd4:	0200      	lsls	r0, r0, #8
 8002cd6:	e7e9      	b.n	8002cac <HAL_RCC_GetSysClockFreq+0x14>
 8002cd8:	40021000 	.word	0x40021000
 8002cdc:	02dc6c00 	.word	0x02dc6c00
 8002ce0:	007a1200 	.word	0x007a1200

08002ce4 <HAL_RCC_ClockConfig>:
{
 8002ce4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002ce6:	0004      	movs	r4, r0
 8002ce8:	000d      	movs	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8002cea:	2800      	cmp	r0, #0
 8002cec:	d101      	bne.n	8002cf2 <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 8002cee:	2001      	movs	r0, #1
}
 8002cf0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cf2:	2707      	movs	r7, #7
 8002cf4:	4e4b      	ldr	r6, [pc, #300]	@ (8002e24 <HAL_RCC_ClockConfig+0x140>)
 8002cf6:	6833      	ldr	r3, [r6, #0]
 8002cf8:	403b      	ands	r3, r7
 8002cfa:	428b      	cmp	r3, r1
 8002cfc:	d32a      	bcc.n	8002d54 <HAL_RCC_ClockConfig+0x70>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cfe:	6822      	ldr	r2, [r4, #0]
 8002d00:	0793      	lsls	r3, r2, #30
 8002d02:	d43b      	bmi.n	8002d7c <HAL_RCC_ClockConfig+0x98>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d04:	07d2      	lsls	r2, r2, #31
 8002d06:	d44a      	bmi.n	8002d9e <HAL_RCC_ClockConfig+0xba>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d08:	2707      	movs	r7, #7
 8002d0a:	6833      	ldr	r3, [r6, #0]
 8002d0c:	403b      	ands	r3, r7
 8002d0e:	42ab      	cmp	r3, r5
 8002d10:	d90a      	bls.n	8002d28 <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d12:	6833      	ldr	r3, [r6, #0]
 8002d14:	43bb      	bics	r3, r7
 8002d16:	432b      	orrs	r3, r5
 8002d18:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8002d1a:	f7ff fc31 	bl	8002580 <HAL_GetTick>
 8002d1e:	9001      	str	r0, [sp, #4]
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002d20:	6833      	ldr	r3, [r6, #0]
 8002d22:	403b      	ands	r3, r7
 8002d24:	42ab      	cmp	r3, r5
 8002d26:	d16d      	bne.n	8002e04 <HAL_RCC_ClockConfig+0x120>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d28:	6823      	ldr	r3, [r4, #0]
 8002d2a:	4d3f      	ldr	r5, [pc, #252]	@ (8002e28 <HAL_RCC_ClockConfig+0x144>)
 8002d2c:	075b      	lsls	r3, r3, #29
 8002d2e:	d471      	bmi.n	8002e14 <HAL_RCC_ClockConfig+0x130>
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002d30:	f7ff ffb2 	bl	8002c98 <HAL_RCC_GetSysClockFreq>
 8002d34:	68ab      	ldr	r3, [r5, #8]
 8002d36:	493d      	ldr	r1, [pc, #244]	@ (8002e2c <HAL_RCC_ClockConfig+0x148>)
 8002d38:	051b      	lsls	r3, r3, #20
 8002d3a:	0f1b      	lsrs	r3, r3, #28
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	585b      	ldr	r3, [r3, r1]
 8002d40:	211f      	movs	r1, #31
 8002d42:	400b      	ands	r3, r1
 8002d44:	40d8      	lsrs	r0, r3
 8002d46:	4a3a      	ldr	r2, [pc, #232]	@ (8002e30 <HAL_RCC_ClockConfig+0x14c>)
  return HAL_InitTick(uwTickPrio);
 8002d48:	4b3a      	ldr	r3, [pc, #232]	@ (8002e34 <HAL_RCC_ClockConfig+0x150>)
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002d4a:	6010      	str	r0, [r2, #0]
  return HAL_InitTick(uwTickPrio);
 8002d4c:	6818      	ldr	r0, [r3, #0]
 8002d4e:	f7ff fbd7 	bl	8002500 <HAL_InitTick>
 8002d52:	e7cd      	b.n	8002cf0 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d54:	6833      	ldr	r3, [r6, #0]
 8002d56:	43bb      	bics	r3, r7
 8002d58:	430b      	orrs	r3, r1
 8002d5a:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8002d5c:	f7ff fc10 	bl	8002580 <HAL_GetTick>
 8002d60:	9001      	str	r0, [sp, #4]
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002d62:	6833      	ldr	r3, [r6, #0]
 8002d64:	403b      	ands	r3, r7
 8002d66:	42ab      	cmp	r3, r5
 8002d68:	d0c9      	beq.n	8002cfe <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002d6a:	f7ff fc09 	bl	8002580 <HAL_GetTick>
 8002d6e:	9b01      	ldr	r3, [sp, #4]
 8002d70:	1ac0      	subs	r0, r0, r3
 8002d72:	4b31      	ldr	r3, [pc, #196]	@ (8002e38 <HAL_RCC_ClockConfig+0x154>)
 8002d74:	4298      	cmp	r0, r3
 8002d76:	d9f4      	bls.n	8002d62 <HAL_RCC_ClockConfig+0x7e>
        return HAL_TIMEOUT;
 8002d78:	2003      	movs	r0, #3
 8002d7a:	e7b9      	b.n	8002cf0 <HAL_RCC_ClockConfig+0xc>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d7c:	492a      	ldr	r1, [pc, #168]	@ (8002e28 <HAL_RCC_ClockConfig+0x144>)
 8002d7e:	0753      	lsls	r3, r2, #29
 8002d80:	d506      	bpl.n	8002d90 <HAL_RCC_ClockConfig+0xac>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002d82:	6888      	ldr	r0, [r1, #8]
 8002d84:	4b2d      	ldr	r3, [pc, #180]	@ (8002e3c <HAL_RCC_ClockConfig+0x158>)
 8002d86:	4018      	ands	r0, r3
 8002d88:	23b0      	movs	r3, #176	@ 0xb0
 8002d8a:	011b      	lsls	r3, r3, #4
 8002d8c:	4303      	orrs	r3, r0
 8002d8e:	608b      	str	r3, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d90:	688b      	ldr	r3, [r1, #8]
 8002d92:	482b      	ldr	r0, [pc, #172]	@ (8002e40 <HAL_RCC_ClockConfig+0x15c>)
 8002d94:	4003      	ands	r3, r0
 8002d96:	68e0      	ldr	r0, [r4, #12]
 8002d98:	4303      	orrs	r3, r0
 8002d9a:	608b      	str	r3, [r1, #8]
 8002d9c:	e7b2      	b.n	8002d04 <HAL_RCC_ClockConfig+0x20>
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8002d9e:	221c      	movs	r2, #28
 8002da0:	4f21      	ldr	r7, [pc, #132]	@ (8002e28 <HAL_RCC_ClockConfig+0x144>)
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	4393      	bics	r3, r2
 8002da6:	68a2      	ldr	r2, [r4, #8]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	603b      	str	r3, [r7, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dac:	6862      	ldr	r2, [r4, #4]
 8002dae:	2a01      	cmp	r2, #1
 8002db0:	d119      	bne.n	8002de6 <HAL_RCC_ClockConfig+0x102>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	039b      	lsls	r3, r3, #14
 8002db6:	d59a      	bpl.n	8002cee <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002db8:	2107      	movs	r1, #7
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	438b      	bics	r3, r1
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	60bb      	str	r3, [r7, #8]
    tickstart = HAL_GetTick();
 8002dc2:	f7ff fbdd 	bl	8002580 <HAL_GetTick>
 8002dc6:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dc8:	2338      	movs	r3, #56	@ 0x38
 8002dca:	68ba      	ldr	r2, [r7, #8]
 8002dcc:	401a      	ands	r2, r3
 8002dce:	6863      	ldr	r3, [r4, #4]
 8002dd0:	00db      	lsls	r3, r3, #3
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d098      	beq.n	8002d08 <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002dd6:	f7ff fbd3 	bl	8002580 <HAL_GetTick>
 8002dda:	9b01      	ldr	r3, [sp, #4]
 8002ddc:	1ac0      	subs	r0, r0, r3
 8002dde:	4b16      	ldr	r3, [pc, #88]	@ (8002e38 <HAL_RCC_ClockConfig+0x154>)
 8002de0:	4298      	cmp	r0, r3
 8002de2:	d9f1      	bls.n	8002dc8 <HAL_RCC_ClockConfig+0xe4>
 8002de4:	e7c8      	b.n	8002d78 <HAL_RCC_ClockConfig+0x94>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002de6:	2a00      	cmp	r2, #0
 8002de8:	d103      	bne.n	8002df2 <HAL_RCC_ClockConfig+0x10e>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	055b      	lsls	r3, r3, #21
 8002dee:	d4e3      	bmi.n	8002db8 <HAL_RCC_ClockConfig+0xd4>
 8002df0:	e77d      	b.n	8002cee <HAL_RCC_ClockConfig+0xa>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002df2:	2302      	movs	r3, #2
 8002df4:	2a03      	cmp	r2, #3
 8002df6:	d103      	bne.n	8002e00 <HAL_RCC_ClockConfig+0x11c>
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002df8:	6e39      	ldr	r1, [r7, #96]	@ 0x60
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002dfa:	4219      	tst	r1, r3
 8002dfc:	d1dc      	bne.n	8002db8 <HAL_RCC_ClockConfig+0xd4>
 8002dfe:	e776      	b.n	8002cee <HAL_RCC_ClockConfig+0xa>
 8002e00:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8002e02:	e7fa      	b.n	8002dfa <HAL_RCC_ClockConfig+0x116>
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002e04:	f7ff fbbc 	bl	8002580 <HAL_GetTick>
 8002e08:	9b01      	ldr	r3, [sp, #4]
 8002e0a:	1ac0      	subs	r0, r0, r3
 8002e0c:	4b0a      	ldr	r3, [pc, #40]	@ (8002e38 <HAL_RCC_ClockConfig+0x154>)
 8002e0e:	4298      	cmp	r0, r3
 8002e10:	d986      	bls.n	8002d20 <HAL_RCC_ClockConfig+0x3c>
 8002e12:	e7b1      	b.n	8002d78 <HAL_RCC_ClockConfig+0x94>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002e14:	68ab      	ldr	r3, [r5, #8]
 8002e16:	4a0b      	ldr	r2, [pc, #44]	@ (8002e44 <HAL_RCC_ClockConfig+0x160>)
 8002e18:	4013      	ands	r3, r2
 8002e1a:	6922      	ldr	r2, [r4, #16]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	60ab      	str	r3, [r5, #8]
 8002e20:	e786      	b.n	8002d30 <HAL_RCC_ClockConfig+0x4c>
 8002e22:	46c0      	nop			@ (mov r8, r8)
 8002e24:	40022000 	.word	0x40022000
 8002e28:	40021000 	.word	0x40021000
 8002e2c:	080058ec 	.word	0x080058ec
 8002e30:	20000004 	.word	0x20000004
 8002e34:	2000000c 	.word	0x2000000c
 8002e38:	00001388 	.word	0x00001388
 8002e3c:	ffff84ff 	.word	0xffff84ff
 8002e40:	fffff0ff 	.word	0xfffff0ff
 8002e44:	ffff8fff 	.word	0xffff8fff

08002e48 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8002e48:	4b06      	ldr	r3, [pc, #24]	@ (8002e64 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002e4a:	4907      	ldr	r1, [pc, #28]	@ (8002e68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e4c:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8002e4e:	4a07      	ldr	r2, [pc, #28]	@ (8002e6c <HAL_RCC_GetPCLK1Freq+0x24>)
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8002e50:	045b      	lsls	r3, r3, #17
 8002e52:	0f5b      	lsrs	r3, r3, #29
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	585b      	ldr	r3, [r3, r1]
 8002e58:	211f      	movs	r1, #31
 8002e5a:	6810      	ldr	r0, [r2, #0]
 8002e5c:	400b      	ands	r3, r1
 8002e5e:	40d8      	lsrs	r0, r3
}
 8002e60:	4770      	bx	lr
 8002e62:	46c0      	nop			@ (mov r8, r8)
 8002e64:	40021000 	.word	0x40021000
 8002e68:	080058cc 	.word	0x080058cc
 8002e6c:	20000004 	.word	0x20000004

08002e70 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e70:	6803      	ldr	r3, [r0, #0]
{
 8002e72:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002e74:	0005      	movs	r5, r0
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e76:	2000      	movs	r0, #0
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e78:	039b      	lsls	r3, r3, #14
 8002e7a:	d523      	bpl.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x54>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e7c:	2280      	movs	r2, #128	@ 0x80
 8002e7e:	4c39      	ldr	r4, [pc, #228]	@ (8002f64 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 8002e80:	0552      	lsls	r2, r2, #21
 8002e82:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
    FlagStatus       pwrclkchanged = RESET;
 8002e84:	0007      	movs	r7, r0
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e86:	4213      	tst	r3, r2
 8002e88:	d107      	bne.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x2a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e8a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
      pwrclkchanged = SET;
 8002e8c:	3701      	adds	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8002e92:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002e94:	4013      	ands	r3, r2
 8002e96:	9301      	str	r3, [sp, #4]
 8002e98:	9b01      	ldr	r3, [sp, #4]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8002e9a:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8002e9c:	22c0      	movs	r2, #192	@ 0xc0
 8002e9e:	0008      	movs	r0, r1
 8002ea0:	0092      	lsls	r2, r2, #2

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002ea2:	69ab      	ldr	r3, [r5, #24]
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8002ea4:	4010      	ands	r0, r2
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002ea6:	4211      	tst	r1, r2
 8002ea8:	d13b      	bne.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0xb2>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002eaa:	2000      	movs	r0, #0
    }

    if (ret == HAL_OK)
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002eac:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002eae:	4a2e      	ldr	r2, [pc, #184]	@ (8002f68 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	69aa      	ldr	r2, [r5, #24]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	65e3      	str	r3, [r4, #92]	@ 0x5c
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002eb8:	2f01      	cmp	r7, #1
 8002eba:	d103      	bne.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ebc:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002ebe:	4a2b      	ldr	r2, [pc, #172]	@ (8002f6c <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	63e3      	str	r3, [r4, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ec4:	682a      	ldr	r2, [r5, #0]
 8002ec6:	07d3      	lsls	r3, r2, #31
 8002ec8:	d506      	bpl.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002eca:	2403      	movs	r4, #3
 8002ecc:	4925      	ldr	r1, [pc, #148]	@ (8002f64 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 8002ece:	6d4b      	ldr	r3, [r1, #84]	@ 0x54
 8002ed0:	43a3      	bics	r3, r4
 8002ed2:	68ac      	ldr	r4, [r5, #8]
 8002ed4:	4323      	orrs	r3, r4
 8002ed6:	654b      	str	r3, [r1, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ed8:	0653      	lsls	r3, r2, #25
 8002eda:	d506      	bpl.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002edc:	4921      	ldr	r1, [pc, #132]	@ (8002f64 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 8002ede:	4c24      	ldr	r4, [pc, #144]	@ (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8002ee0:	6d4b      	ldr	r3, [r1, #84]	@ 0x54
 8002ee2:	4023      	ands	r3, r4
 8002ee4:	68ec      	ldr	r4, [r5, #12]
 8002ee6:	4323      	orrs	r3, r4
 8002ee8:	654b      	str	r3, [r1, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002eea:	0453      	lsls	r3, r2, #17
 8002eec:	d506      	bpl.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002eee:	491d      	ldr	r1, [pc, #116]	@ (8002f64 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 8002ef0:	696c      	ldr	r4, [r5, #20]
 8002ef2:	6d4b      	ldr	r3, [r1, #84]	@ 0x54
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	089b      	lsrs	r3, r3, #2
 8002ef8:	4323      	orrs	r3, r4
 8002efa:	654b      	str	r3, [r1, #84]	@ 0x54

  }

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002efc:	0513      	lsls	r3, r2, #20
 8002efe:	d506      	bpl.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002f00:	4918      	ldr	r1, [pc, #96]	@ (8002f64 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 8002f02:	4c1c      	ldr	r4, [pc, #112]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x104>)
 8002f04:	6d4b      	ldr	r3, [r1, #84]	@ 0x54
 8002f06:	4023      	ands	r3, r4
 8002f08:	692c      	ldr	r4, [r5, #16]
 8002f0a:	4323      	orrs	r3, r4
 8002f0c:	654b      	str	r3, [r1, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8002f0e:	2a00      	cmp	r2, #0
 8002f10:	da06      	bge.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8002f12:	21e0      	movs	r1, #224	@ 0xe0
 8002f14:	4a13      	ldr	r2, [pc, #76]	@ (8002f64 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 8002f16:	6813      	ldr	r3, [r2, #0]
 8002f18:	438b      	bics	r3, r1
 8002f1a:	6869      	ldr	r1, [r5, #4]
 8002f1c:	430b      	orrs	r3, r1
 8002f1e:	6013      	str	r3, [r2, #0]
  }
  return status;
}
 8002f20:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002f22:	4298      	cmp	r0, r3
 8002f24:	d00c      	beq.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8002f26:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002f28:	4a0f      	ldr	r2, [pc, #60]	@ (8002f68 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f2a:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8002f2c:	4013      	ands	r3, r2
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f2e:	2280      	movs	r2, #128	@ 0x80
 8002f30:	0252      	lsls	r2, r2, #9
 8002f32:	430a      	orrs	r2, r1
 8002f34:	65e2      	str	r2, [r4, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f36:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8002f38:	490f      	ldr	r1, [pc, #60]	@ (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8002f3a:	400a      	ands	r2, r1
 8002f3c:	65e2      	str	r2, [r4, #92]	@ 0x5c
      RCC->CSR1 = tmpregister;
 8002f3e:	65e3      	str	r3, [r4, #92]	@ 0x5c
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8002f40:	07db      	lsls	r3, r3, #31
 8002f42:	d5b2      	bpl.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x3a>
      tickstart = HAL_GetTick();
 8002f44:	f7ff fb1c 	bl	8002580 <HAL_GetTick>
 8002f48:	0006      	movs	r6, r0
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002f4a:	2202      	movs	r2, #2
 8002f4c:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002f4e:	4213      	tst	r3, r2
 8002f50:	d1ab      	bne.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f52:	f7ff fb15 	bl	8002580 <HAL_GetTick>
 8002f56:	4b09      	ldr	r3, [pc, #36]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8002f58:	1b80      	subs	r0, r0, r6
 8002f5a:	4298      	cmp	r0, r3
 8002f5c:	d9f5      	bls.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002f5e:	2003      	movs	r0, #3
 8002f60:	e7aa      	b.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x48>
 8002f62:	46c0      	nop			@ (mov r8, r8)
 8002f64:	40021000 	.word	0x40021000
 8002f68:	fffffcff 	.word	0xfffffcff
 8002f6c:	efffffff 	.word	0xefffffff
 8002f70:	ffffcfff 	.word	0xffffcfff
 8002f74:	ffff3fff 	.word	0xffff3fff
 8002f78:	fffeffff 	.word	0xfffeffff
 8002f7c:	00001388 	.word	0x00001388

08002f80 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f80:	b570      	push	{r4, r5, r6, lr}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f82:	2401      	movs	r4, #1
  tmpccer = TIMx->CCER;
 8002f84:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f86:	6a02      	ldr	r2, [r0, #32]
 8002f88:	43a2      	bics	r2, r4
 8002f8a:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f8c:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002f8e:	4a16      	ldr	r2, [pc, #88]	@ (8002fe8 <TIM_OC1_SetConfig+0x68>)
  tmpccmrx = TIMx->CCMR1;
 8002f90:	6985      	ldr	r5, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002f92:	4015      	ands	r5, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f94:	680a      	ldr	r2, [r1, #0]
 8002f96:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002f98:	2202      	movs	r2, #2
 8002f9a:	4393      	bics	r3, r2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002f9c:	688a      	ldr	r2, [r1, #8]
 8002f9e:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002fa0:	4a12      	ldr	r2, [pc, #72]	@ (8002fec <TIM_OC1_SetConfig+0x6c>)
 8002fa2:	4290      	cmp	r0, r2
 8002fa4:	d005      	beq.n	8002fb2 <TIM_OC1_SetConfig+0x32>
 8002fa6:	4e12      	ldr	r6, [pc, #72]	@ (8002ff0 <TIM_OC1_SetConfig+0x70>)
 8002fa8:	42b0      	cmp	r0, r6
 8002faa:	d002      	beq.n	8002fb2 <TIM_OC1_SetConfig+0x32>
 8002fac:	4e11      	ldr	r6, [pc, #68]	@ (8002ff4 <TIM_OC1_SetConfig+0x74>)
 8002fae:	42b0      	cmp	r0, r6
 8002fb0:	d113      	bne.n	8002fda <TIM_OC1_SetConfig+0x5a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002fb2:	2608      	movs	r6, #8
 8002fb4:	43b3      	bics	r3, r6
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002fb6:	68ce      	ldr	r6, [r1, #12]
 8002fb8:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002fba:	2604      	movs	r6, #4
 8002fbc:	43b3      	bics	r3, r6
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fbe:	4290      	cmp	r0, r2
 8002fc0:	d005      	beq.n	8002fce <TIM_OC1_SetConfig+0x4e>
 8002fc2:	4a0b      	ldr	r2, [pc, #44]	@ (8002ff0 <TIM_OC1_SetConfig+0x70>)
 8002fc4:	4290      	cmp	r0, r2
 8002fc6:	d002      	beq.n	8002fce <TIM_OC1_SetConfig+0x4e>
 8002fc8:	4a0a      	ldr	r2, [pc, #40]	@ (8002ff4 <TIM_OC1_SetConfig+0x74>)
 8002fca:	4290      	cmp	r0, r2
 8002fcc:	d105      	bne.n	8002fda <TIM_OC1_SetConfig+0x5a>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002fce:	4a0a      	ldr	r2, [pc, #40]	@ (8002ff8 <TIM_OC1_SetConfig+0x78>)
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002fd0:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002fd2:	4022      	ands	r2, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 8002fd4:	694c      	ldr	r4, [r1, #20]
 8002fd6:	4334      	orrs	r4, r6
 8002fd8:	4314      	orrs	r4, r2

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002fda:	684a      	ldr	r2, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8002fdc:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002fde:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8002fe0:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fe2:	6203      	str	r3, [r0, #32]
}
 8002fe4:	bd70      	pop	{r4, r5, r6, pc}
 8002fe6:	46c0      	nop			@ (mov r8, r8)
 8002fe8:	fffeff8c 	.word	0xfffeff8c
 8002fec:	40012c00 	.word	0x40012c00
 8002ff0:	40014400 	.word	0x40014400
 8002ff4:	40014800 	.word	0x40014800
 8002ff8:	fffffcff 	.word	0xfffffcff

08002ffc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ffc:	b570      	push	{r4, r5, r6, lr}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002ffe:	4a17      	ldr	r2, [pc, #92]	@ (800305c <TIM_OC3_SetConfig+0x60>)
  tmpccer = TIMx->CCER;
 8003000:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003002:	6a03      	ldr	r3, [r0, #32]
 8003004:	4013      	ands	r3, r2
 8003006:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003008:	6842      	ldr	r2, [r0, #4]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800300a:	4b15      	ldr	r3, [pc, #84]	@ (8003060 <TIM_OC3_SetConfig+0x64>)
  tmpccmrx = TIMx->CCMR2;
 800300c:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800300e:	401c      	ands	r4, r3
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003010:	680b      	ldr	r3, [r1, #0]
 8003012:	431c      	orrs	r4, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003014:	4b13      	ldr	r3, [pc, #76]	@ (8003064 <TIM_OC3_SetConfig+0x68>)
 8003016:	401d      	ands	r5, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003018:	688b      	ldr	r3, [r1, #8]
 800301a:	021b      	lsls	r3, r3, #8
 800301c:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800301e:	4d12      	ldr	r5, [pc, #72]	@ (8003068 <TIM_OC3_SetConfig+0x6c>)
 8003020:	42a8      	cmp	r0, r5
 8003022:	d10e      	bne.n	8003042 <TIM_OC3_SetConfig+0x46>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003024:	4d11      	ldr	r5, [pc, #68]	@ (800306c <TIM_OC3_SetConfig+0x70>)
 8003026:	401d      	ands	r5, r3
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003028:	68cb      	ldr	r3, [r1, #12]
 800302a:	021b      	lsls	r3, r3, #8
 800302c:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800302e:	4d10      	ldr	r5, [pc, #64]	@ (8003070 <TIM_OC3_SetConfig+0x74>)
 8003030:	402b      	ands	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003032:	4d10      	ldr	r5, [pc, #64]	@ (8003074 <TIM_OC3_SetConfig+0x78>)
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003034:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003036:	4015      	ands	r5, r2
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003038:	698a      	ldr	r2, [r1, #24]
 800303a:	4332      	orrs	r2, r6
 800303c:	0112      	lsls	r2, r2, #4
 800303e:	432a      	orrs	r2, r5
 8003040:	e005      	b.n	800304e <TIM_OC3_SetConfig+0x52>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003042:	4d0d      	ldr	r5, [pc, #52]	@ (8003078 <TIM_OC3_SetConfig+0x7c>)
 8003044:	42a8      	cmp	r0, r5
 8003046:	d0f4      	beq.n	8003032 <TIM_OC3_SetConfig+0x36>
 8003048:	4d0c      	ldr	r5, [pc, #48]	@ (800307c <TIM_OC3_SetConfig+0x80>)
 800304a:	42a8      	cmp	r0, r5
 800304c:	d0f1      	beq.n	8003032 <TIM_OC3_SetConfig+0x36>
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800304e:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003050:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8003052:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8003054:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003056:	6203      	str	r3, [r0, #32]
}
 8003058:	bd70      	pop	{r4, r5, r6, pc}
 800305a:	46c0      	nop			@ (mov r8, r8)
 800305c:	fffffeff 	.word	0xfffffeff
 8003060:	fffeff8c 	.word	0xfffeff8c
 8003064:	fffffdff 	.word	0xfffffdff
 8003068:	40012c00 	.word	0x40012c00
 800306c:	fffff7ff 	.word	0xfffff7ff
 8003070:	fffffbff 	.word	0xfffffbff
 8003074:	ffffcfff 	.word	0xffffcfff
 8003078:	40014400 	.word	0x40014400
 800307c:	40014800 	.word	0x40014800

08003080 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003080:	b530      	push	{r4, r5, lr}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003082:	4a12      	ldr	r2, [pc, #72]	@ (80030cc <TIM_OC4_SetConfig+0x4c>)
  tmpccer = TIMx->CCER;
 8003084:	6a04      	ldr	r4, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003086:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003088:	4d11      	ldr	r5, [pc, #68]	@ (80030d0 <TIM_OC4_SetConfig+0x50>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800308a:	4013      	ands	r3, r2
 800308c:	6203      	str	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800308e:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8003090:	69c2      	ldr	r2, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003092:	402a      	ands	r2, r5

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003094:	680d      	ldr	r5, [r1, #0]
 8003096:	022d      	lsls	r5, r5, #8
 8003098:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800309a:	4a0e      	ldr	r2, [pc, #56]	@ (80030d4 <TIM_OC4_SetConfig+0x54>)
 800309c:	4014      	ands	r4, r2
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800309e:	688a      	ldr	r2, [r1, #8]
 80030a0:	0312      	lsls	r2, r2, #12
 80030a2:	4322      	orrs	r2, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030a4:	4c0c      	ldr	r4, [pc, #48]	@ (80030d8 <TIM_OC4_SetConfig+0x58>)
 80030a6:	42a0      	cmp	r0, r4
 80030a8:	d005      	beq.n	80030b6 <TIM_OC4_SetConfig+0x36>
 80030aa:	4c0c      	ldr	r4, [pc, #48]	@ (80030dc <TIM_OC4_SetConfig+0x5c>)
 80030ac:	42a0      	cmp	r0, r4
 80030ae:	d002      	beq.n	80030b6 <TIM_OC4_SetConfig+0x36>
 80030b0:	4c0b      	ldr	r4, [pc, #44]	@ (80030e0 <TIM_OC4_SetConfig+0x60>)
 80030b2:	42a0      	cmp	r0, r4
 80030b4:	d104      	bne.n	80030c0 <TIM_OC4_SetConfig+0x40>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80030b6:	4c0b      	ldr	r4, [pc, #44]	@ (80030e4 <TIM_OC4_SetConfig+0x64>)
 80030b8:	401c      	ands	r4, r3

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80030ba:	694b      	ldr	r3, [r1, #20]
 80030bc:	019b      	lsls	r3, r3, #6
 80030be:	4323      	orrs	r3, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030c0:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80030c2:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 80030c4:	61c5      	str	r5, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 80030c6:	6403      	str	r3, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030c8:	6202      	str	r2, [r0, #32]
}
 80030ca:	bd30      	pop	{r4, r5, pc}
 80030cc:	ffffefff 	.word	0xffffefff
 80030d0:	feff8cff 	.word	0xfeff8cff
 80030d4:	ffffdfff 	.word	0xffffdfff
 80030d8:	40012c00 	.word	0x40012c00
 80030dc:	40014400 	.word	0x40014400
 80030e0:	40014800 	.word	0x40014800
 80030e4:	ffffbfff 	.word	0xffffbfff

080030e8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80030e8:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030ea:	6a06      	ldr	r6, [r0, #32]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80030ec:	4c10      	ldr	r4, [pc, #64]	@ (8003130 <TIM_OC5_SetConfig+0x48>)
 80030ee:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80030f0:	4a10      	ldr	r2, [pc, #64]	@ (8003134 <TIM_OC5_SetConfig+0x4c>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80030f2:	4023      	ands	r3, r4
 80030f4:	6203      	str	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80030f6:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR3;
 80030f8:	6d45      	ldr	r5, [r0, #84]	@ 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80030fa:	4015      	ands	r5, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030fc:	680a      	ldr	r2, [r1, #0]
 80030fe:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003100:	4a0d      	ldr	r2, [pc, #52]	@ (8003138 <TIM_OC5_SetConfig+0x50>)
 8003102:	4016      	ands	r6, r2
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003104:	688a      	ldr	r2, [r1, #8]
 8003106:	0412      	lsls	r2, r2, #16
 8003108:	4332      	orrs	r2, r6

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800310a:	4e0c      	ldr	r6, [pc, #48]	@ (800313c <TIM_OC5_SetConfig+0x54>)
 800310c:	42b0      	cmp	r0, r6
 800310e:	d005      	beq.n	800311c <TIM_OC5_SetConfig+0x34>
 8003110:	4e0b      	ldr	r6, [pc, #44]	@ (8003140 <TIM_OC5_SetConfig+0x58>)
 8003112:	42b0      	cmp	r0, r6
 8003114:	d002      	beq.n	800311c <TIM_OC5_SetConfig+0x34>
 8003116:	4e0b      	ldr	r6, [pc, #44]	@ (8003144 <TIM_OC5_SetConfig+0x5c>)
 8003118:	42b0      	cmp	r0, r6
 800311a:	d103      	bne.n	8003124 <TIM_OC5_SetConfig+0x3c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800311c:	401c      	ands	r4, r3
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800311e:	694b      	ldr	r3, [r1, #20]
 8003120:	021b      	lsls	r3, r3, #8
 8003122:	4323      	orrs	r3, r4
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003124:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003126:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR3 = tmpccmrx;
 8003128:	6545      	str	r5, [r0, #84]	@ 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 800312a:	6583      	str	r3, [r0, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800312c:	6202      	str	r2, [r0, #32]
}
 800312e:	bd70      	pop	{r4, r5, r6, pc}
 8003130:	fffeffff 	.word	0xfffeffff
 8003134:	fffeff8f 	.word	0xfffeff8f
 8003138:	fffdffff 	.word	0xfffdffff
 800313c:	40012c00 	.word	0x40012c00
 8003140:	40014400 	.word	0x40014400
 8003144:	40014800 	.word	0x40014800

08003148 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003148:	b530      	push	{r4, r5, lr}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800314a:	4a12      	ldr	r2, [pc, #72]	@ (8003194 <TIM_OC6_SetConfig+0x4c>)
  tmpccer = TIMx->CCER;
 800314c:	6a04      	ldr	r4, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800314e:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003150:	4d11      	ldr	r5, [pc, #68]	@ (8003198 <TIM_OC6_SetConfig+0x50>)
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003152:	4013      	ands	r3, r2
 8003154:	6203      	str	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8003156:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR3;
 8003158:	6d42      	ldr	r2, [r0, #84]	@ 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800315a:	402a      	ands	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800315c:	680d      	ldr	r5, [r1, #0]
 800315e:	022d      	lsls	r5, r5, #8
 8003160:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003162:	4a0e      	ldr	r2, [pc, #56]	@ (800319c <TIM_OC6_SetConfig+0x54>)
 8003164:	4014      	ands	r4, r2
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003166:	688a      	ldr	r2, [r1, #8]
 8003168:	0512      	lsls	r2, r2, #20
 800316a:	4322      	orrs	r2, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800316c:	4c0c      	ldr	r4, [pc, #48]	@ (80031a0 <TIM_OC6_SetConfig+0x58>)
 800316e:	42a0      	cmp	r0, r4
 8003170:	d005      	beq.n	800317e <TIM_OC6_SetConfig+0x36>
 8003172:	4c0c      	ldr	r4, [pc, #48]	@ (80031a4 <TIM_OC6_SetConfig+0x5c>)
 8003174:	42a0      	cmp	r0, r4
 8003176:	d002      	beq.n	800317e <TIM_OC6_SetConfig+0x36>
 8003178:	4c0b      	ldr	r4, [pc, #44]	@ (80031a8 <TIM_OC6_SetConfig+0x60>)
 800317a:	42a0      	cmp	r0, r4
 800317c:	d104      	bne.n	8003188 <TIM_OC6_SetConfig+0x40>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800317e:	4c0b      	ldr	r4, [pc, #44]	@ (80031ac <TIM_OC6_SetConfig+0x64>)
 8003180:	401c      	ands	r4, r3
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003182:	694b      	ldr	r3, [r1, #20]
 8003184:	029b      	lsls	r3, r3, #10
 8003186:	4323      	orrs	r3, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003188:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800318a:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR3 = tmpccmrx;
 800318c:	6545      	str	r5, [r0, #84]	@ 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 800318e:	65c3      	str	r3, [r0, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003190:	6202      	str	r2, [r0, #32]
}
 8003192:	bd30      	pop	{r4, r5, pc}
 8003194:	ffefffff 	.word	0xffefffff
 8003198:	feff8fff 	.word	0xfeff8fff
 800319c:	ffdfffff 	.word	0xffdfffff
 80031a0:	40012c00 	.word	0x40012c00
 80031a4:	40014400 	.word	0x40014400
 80031a8:	40014800 	.word	0x40014800
 80031ac:	fffbffff 	.word	0xfffbffff

080031b0 <HAL_TIM_PWM_MspInit>:
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
 80031b0:	4770      	bx	lr
	...

080031b4 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031b4:	4a19      	ldr	r2, [pc, #100]	@ (800321c <TIM_Base_SetConfig+0x68>)
{
 80031b6:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 80031b8:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031ba:	4290      	cmp	r0, r2
 80031bc:	d002      	beq.n	80031c4 <TIM_Base_SetConfig+0x10>
 80031be:	4c18      	ldr	r4, [pc, #96]	@ (8003220 <TIM_Base_SetConfig+0x6c>)
 80031c0:	42a0      	cmp	r0, r4
 80031c2:	d108      	bne.n	80031d6 <TIM_Base_SetConfig+0x22>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031c4:	2470      	movs	r4, #112	@ 0x70
 80031c6:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 80031c8:	684c      	ldr	r4, [r1, #4]
 80031ca:	4323      	orrs	r3, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031cc:	4290      	cmp	r0, r2
 80031ce:	d00b      	beq.n	80031e8 <TIM_Base_SetConfig+0x34>
 80031d0:	4c13      	ldr	r4, [pc, #76]	@ (8003220 <TIM_Base_SetConfig+0x6c>)
 80031d2:	42a0      	cmp	r0, r4
 80031d4:	d008      	beq.n	80031e8 <TIM_Base_SetConfig+0x34>
 80031d6:	4c13      	ldr	r4, [pc, #76]	@ (8003224 <TIM_Base_SetConfig+0x70>)
 80031d8:	42a0      	cmp	r0, r4
 80031da:	d005      	beq.n	80031e8 <TIM_Base_SetConfig+0x34>
 80031dc:	4c12      	ldr	r4, [pc, #72]	@ (8003228 <TIM_Base_SetConfig+0x74>)
 80031de:	42a0      	cmp	r0, r4
 80031e0:	d002      	beq.n	80031e8 <TIM_Base_SetConfig+0x34>
 80031e2:	4c12      	ldr	r4, [pc, #72]	@ (800322c <TIM_Base_SetConfig+0x78>)
 80031e4:	42a0      	cmp	r0, r4
 80031e6:	d103      	bne.n	80031f0 <TIM_Base_SetConfig+0x3c>
    tmpcr1 &= ~TIM_CR1_CKD;
 80031e8:	4c11      	ldr	r4, [pc, #68]	@ (8003230 <TIM_Base_SetConfig+0x7c>)
 80031ea:	401c      	ands	r4, r3
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031ec:	68cb      	ldr	r3, [r1, #12]
 80031ee:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031f0:	2480      	movs	r4, #128	@ 0x80
 80031f2:	43a3      	bics	r3, r4
 80031f4:	694c      	ldr	r4, [r1, #20]
 80031f6:	4323      	orrs	r3, r4
  TIMx->CR1 = tmpcr1;
 80031f8:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031fa:	688b      	ldr	r3, [r1, #8]
 80031fc:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80031fe:	680b      	ldr	r3, [r1, #0]
 8003200:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003202:	4290      	cmp	r0, r2
 8003204:	d005      	beq.n	8003212 <TIM_Base_SetConfig+0x5e>
 8003206:	4b08      	ldr	r3, [pc, #32]	@ (8003228 <TIM_Base_SetConfig+0x74>)
 8003208:	4298      	cmp	r0, r3
 800320a:	d002      	beq.n	8003212 <TIM_Base_SetConfig+0x5e>
 800320c:	4b07      	ldr	r3, [pc, #28]	@ (800322c <TIM_Base_SetConfig+0x78>)
 800320e:	4298      	cmp	r0, r3
 8003210:	d101      	bne.n	8003216 <TIM_Base_SetConfig+0x62>
    TIMx->RCR = Structure->RepetitionCounter;
 8003212:	690b      	ldr	r3, [r1, #16]
 8003214:	6303      	str	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 8003216:	2301      	movs	r3, #1
 8003218:	6143      	str	r3, [r0, #20]
}
 800321a:	bd10      	pop	{r4, pc}
 800321c:	40012c00 	.word	0x40012c00
 8003220:	40000400 	.word	0x40000400
 8003224:	40002000 	.word	0x40002000
 8003228:	40014400 	.word	0x40014400
 800322c:	40014800 	.word	0x40014800
 8003230:	fffffcff 	.word	0xfffffcff

08003234 <HAL_TIM_Base_Init>:
{
 8003234:	b570      	push	{r4, r5, r6, lr}
 8003236:	0004      	movs	r4, r0
    return HAL_ERROR;
 8003238:	2001      	movs	r0, #1
  if (htim == NULL)
 800323a:	2c00      	cmp	r4, #0
 800323c:	d023      	beq.n	8003286 <HAL_TIM_Base_Init+0x52>
  if (htim->State == HAL_TIM_STATE_RESET)
 800323e:	0025      	movs	r5, r4
 8003240:	353d      	adds	r5, #61	@ 0x3d
 8003242:	782b      	ldrb	r3, [r5, #0]
 8003244:	b2da      	uxtb	r2, r3
 8003246:	2b00      	cmp	r3, #0
 8003248:	d105      	bne.n	8003256 <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 800324a:	0023      	movs	r3, r4
 800324c:	333c      	adds	r3, #60	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800324e:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 8003250:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_MspInit(htim);
 8003252:	f7ff f82b 	bl	80022ac <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8003256:	2302      	movs	r3, #2
 8003258:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800325a:	6820      	ldr	r0, [r4, #0]
 800325c:	1d21      	adds	r1, r4, #4
 800325e:	f7ff ffa9 	bl	80031b4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003262:	0022      	movs	r2, r4
 8003264:	2301      	movs	r3, #1
  return HAL_OK;
 8003266:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003268:	3248      	adds	r2, #72	@ 0x48
 800326a:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800326c:	3447      	adds	r4, #71	@ 0x47
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800326e:	3a0a      	subs	r2, #10
 8003270:	7013      	strb	r3, [r2, #0]
 8003272:	7053      	strb	r3, [r2, #1]
 8003274:	7093      	strb	r3, [r2, #2]
 8003276:	70d3      	strb	r3, [r2, #3]
 8003278:	7113      	strb	r3, [r2, #4]
 800327a:	7153      	strb	r3, [r2, #5]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800327c:	7193      	strb	r3, [r2, #6]
 800327e:	71d3      	strb	r3, [r2, #7]
 8003280:	7213      	strb	r3, [r2, #8]
 8003282:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 8003284:	702b      	strb	r3, [r5, #0]
}
 8003286:	bd70      	pop	{r4, r5, r6, pc}

08003288 <HAL_TIM_PWM_Init>:
{
 8003288:	b570      	push	{r4, r5, r6, lr}
 800328a:	0004      	movs	r4, r0
    return HAL_ERROR;
 800328c:	2001      	movs	r0, #1
  if (htim == NULL)
 800328e:	2c00      	cmp	r4, #0
 8003290:	d023      	beq.n	80032da <HAL_TIM_PWM_Init+0x52>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003292:	0025      	movs	r5, r4
 8003294:	353d      	adds	r5, #61	@ 0x3d
 8003296:	782b      	ldrb	r3, [r5, #0]
 8003298:	b2da      	uxtb	r2, r3
 800329a:	2b00      	cmp	r3, #0
 800329c:	d105      	bne.n	80032aa <HAL_TIM_PWM_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 800329e:	0023      	movs	r3, r4
 80032a0:	333c      	adds	r3, #60	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80032a2:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 80032a4:	701a      	strb	r2, [r3, #0]
    HAL_TIM_PWM_MspInit(htim);
 80032a6:	f7ff ff83 	bl	80031b0 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80032aa:	2302      	movs	r3, #2
 80032ac:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032ae:	6820      	ldr	r0, [r4, #0]
 80032b0:	1d21      	adds	r1, r4, #4
 80032b2:	f7ff ff7f 	bl	80031b4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032b6:	0022      	movs	r2, r4
 80032b8:	2301      	movs	r3, #1
  return HAL_OK;
 80032ba:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032bc:	3248      	adds	r2, #72	@ 0x48
 80032be:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032c0:	3447      	adds	r4, #71	@ 0x47
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032c2:	3a0a      	subs	r2, #10
 80032c4:	7013      	strb	r3, [r2, #0]
 80032c6:	7053      	strb	r3, [r2, #1]
 80032c8:	7093      	strb	r3, [r2, #2]
 80032ca:	70d3      	strb	r3, [r2, #3]
 80032cc:	7113      	strb	r3, [r2, #4]
 80032ce:	7153      	strb	r3, [r2, #5]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032d0:	7193      	strb	r3, [r2, #6]
 80032d2:	71d3      	strb	r3, [r2, #7]
 80032d4:	7213      	strb	r3, [r2, #8]
 80032d6:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 80032d8:	702b      	strb	r3, [r5, #0]
}
 80032da:	bd70      	pop	{r4, r5, r6, pc}

080032dc <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032dc:	2210      	movs	r2, #16
{
 80032de:	b570      	push	{r4, r5, r6, lr}
  tmpccer = TIMx->CCER;
 80032e0:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032e2:	6a03      	ldr	r3, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80032e4:	4c16      	ldr	r4, [pc, #88]	@ (8003340 <TIM_OC2_SetConfig+0x64>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032e6:	4393      	bics	r3, r2
 80032e8:	6203      	str	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80032ea:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80032ec:	6983      	ldr	r3, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80032ee:	4023      	ands	r3, r4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032f0:	680c      	ldr	r4, [r1, #0]
 80032f2:	0224      	lsls	r4, r4, #8
 80032f4:	431c      	orrs	r4, r3
  tmpccer &= ~TIM_CCER_CC2P;
 80032f6:	2320      	movs	r3, #32
 80032f8:	439d      	bics	r5, r3
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80032fa:	688b      	ldr	r3, [r1, #8]
 80032fc:	011b      	lsls	r3, r3, #4
 80032fe:	432b      	orrs	r3, r5
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003300:	4d10      	ldr	r5, [pc, #64]	@ (8003344 <TIM_OC2_SetConfig+0x68>)
 8003302:	42a8      	cmp	r0, r5
 8003304:	d10f      	bne.n	8003326 <TIM_OC2_SetConfig+0x4a>
    tmpccer &= ~TIM_CCER_CC2NP;
 8003306:	2580      	movs	r5, #128	@ 0x80
 8003308:	43ab      	bics	r3, r5
 800330a:	001e      	movs	r6, r3
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800330c:	68cb      	ldr	r3, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NE;
 800330e:	3d40      	subs	r5, #64	@ 0x40
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003310:	011b      	lsls	r3, r3, #4
 8003312:	4333      	orrs	r3, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8003314:	43ab      	bics	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003316:	4d0c      	ldr	r5, [pc, #48]	@ (8003348 <TIM_OC2_SetConfig+0x6c>)
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003318:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800331a:	4015      	ands	r5, r2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800331c:	698a      	ldr	r2, [r1, #24]
 800331e:	4332      	orrs	r2, r6
 8003320:	0092      	lsls	r2, r2, #2
 8003322:	432a      	orrs	r2, r5
 8003324:	e005      	b.n	8003332 <TIM_OC2_SetConfig+0x56>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003326:	4d09      	ldr	r5, [pc, #36]	@ (800334c <TIM_OC2_SetConfig+0x70>)
 8003328:	42a8      	cmp	r0, r5
 800332a:	d0f4      	beq.n	8003316 <TIM_OC2_SetConfig+0x3a>
 800332c:	4d08      	ldr	r5, [pc, #32]	@ (8003350 <TIM_OC2_SetConfig+0x74>)
 800332e:	42a8      	cmp	r0, r5
 8003330:	d0f1      	beq.n	8003316 <TIM_OC2_SetConfig+0x3a>
  TIMx->CR2 = tmpcr2;
 8003332:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8003334:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003336:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8003338:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 800333a:	6203      	str	r3, [r0, #32]
}
 800333c:	bd70      	pop	{r4, r5, r6, pc}
 800333e:	46c0      	nop			@ (mov r8, r8)
 8003340:	feff8cff 	.word	0xfeff8cff
 8003344:	40012c00 	.word	0x40012c00
 8003348:	fffff3ff 	.word	0xfffff3ff
 800334c:	40014400 	.word	0x40014400
 8003350:	40014800 	.word	0x40014800

08003354 <HAL_TIM_PWM_ConfigChannel>:
{
 8003354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8003356:	0007      	movs	r7, r0
 8003358:	373c      	adds	r7, #60	@ 0x3c
{
 800335a:	0015      	movs	r5, r2
  __HAL_LOCK(htim);
 800335c:	783a      	ldrb	r2, [r7, #0]
{
 800335e:	0003      	movs	r3, r0
 8003360:	000c      	movs	r4, r1
  __HAL_LOCK(htim);
 8003362:	2002      	movs	r0, #2
 8003364:	2a01      	cmp	r2, #1
 8003366:	d00c      	beq.n	8003382 <HAL_TIM_PWM_ConfigChannel+0x2e>
 8003368:	3801      	subs	r0, #1
 800336a:	7038      	strb	r0, [r7, #0]
  switch (Channel)
 800336c:	2d0c      	cmp	r5, #12
 800336e:	d051      	beq.n	8003414 <HAL_TIM_PWM_ConfigChannel+0xc0>
 8003370:	d808      	bhi.n	8003384 <HAL_TIM_PWM_ConfigChannel+0x30>
 8003372:	2d04      	cmp	r5, #4
 8003374:	d02d      	beq.n	80033d2 <HAL_TIM_PWM_ConfigChannel+0x7e>
 8003376:	2d08      	cmp	r5, #8
 8003378:	d03c      	beq.n	80033f4 <HAL_TIM_PWM_ConfigChannel+0xa0>
 800337a:	2d00      	cmp	r5, #0
 800337c:	d017      	beq.n	80033ae <HAL_TIM_PWM_ConfigChannel+0x5a>
  __HAL_UNLOCK(htim);
 800337e:	2300      	movs	r3, #0
 8003380:	703b      	strb	r3, [r7, #0]
}
 8003382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (Channel)
 8003384:	2d10      	cmp	r5, #16
 8003386:	d058      	beq.n	800343a <HAL_TIM_PWM_ConfigChannel+0xe6>
 8003388:	2d14      	cmp	r5, #20
 800338a:	d1f8      	bne.n	800337e <HAL_TIM_PWM_ConfigChannel+0x2a>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800338c:	681d      	ldr	r5, [r3, #0]
 800338e:	0028      	movs	r0, r5
 8003390:	f7ff feda 	bl	8003148 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003394:	2380      	movs	r3, #128	@ 0x80
 8003396:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 8003398:	011b      	lsls	r3, r3, #4
 800339a:	4313      	orrs	r3, r2
 800339c:	656b      	str	r3, [r5, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800339e:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 80033a0:	4a2e      	ldr	r2, [pc, #184]	@ (800345c <HAL_TIM_PWM_ConfigChannel+0x108>)
 80033a2:	4013      	ands	r3, r2
 80033a4:	656b      	str	r3, [r5, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80033a6:	6923      	ldr	r3, [r4, #16]
 80033a8:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 80033aa:	021b      	lsls	r3, r3, #8
 80033ac:	e053      	b.n	8003456 <HAL_TIM_PWM_ConfigChannel+0x102>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80033ae:	681d      	ldr	r5, [r3, #0]
 80033b0:	0028      	movs	r0, r5
 80033b2:	f7ff fde5 	bl	8002f80 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80033b6:	2308      	movs	r3, #8
 80033b8:	69aa      	ldr	r2, [r5, #24]
 80033ba:	4313      	orrs	r3, r2
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80033bc:	2204      	movs	r2, #4
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80033be:	61ab      	str	r3, [r5, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80033c0:	69ab      	ldr	r3, [r5, #24]
 80033c2:	4393      	bics	r3, r2
 80033c4:	61ab      	str	r3, [r5, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80033c6:	69ab      	ldr	r3, [r5, #24]
 80033c8:	6922      	ldr	r2, [r4, #16]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80033ca:	4313      	orrs	r3, r2
 80033cc:	61ab      	str	r3, [r5, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80033ce:	2000      	movs	r0, #0
 80033d0:	e7d5      	b.n	800337e <HAL_TIM_PWM_ConfigChannel+0x2a>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80033d2:	681d      	ldr	r5, [r3, #0]
 80033d4:	0028      	movs	r0, r5
 80033d6:	f7ff ff81 	bl	80032dc <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80033da:	2380      	movs	r3, #128	@ 0x80
 80033dc:	69aa      	ldr	r2, [r5, #24]
 80033de:	011b      	lsls	r3, r3, #4
 80033e0:	4313      	orrs	r3, r2
 80033e2:	61ab      	str	r3, [r5, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80033e4:	69ab      	ldr	r3, [r5, #24]
 80033e6:	4a1d      	ldr	r2, [pc, #116]	@ (800345c <HAL_TIM_PWM_ConfigChannel+0x108>)
 80033e8:	4013      	ands	r3, r2
 80033ea:	61ab      	str	r3, [r5, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80033ec:	6923      	ldr	r3, [r4, #16]
 80033ee:	69aa      	ldr	r2, [r5, #24]
 80033f0:	021b      	lsls	r3, r3, #8
 80033f2:	e7ea      	b.n	80033ca <HAL_TIM_PWM_ConfigChannel+0x76>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80033f4:	681e      	ldr	r6, [r3, #0]
 80033f6:	0030      	movs	r0, r6
 80033f8:	f7ff fe00 	bl	8002ffc <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80033fc:	2204      	movs	r2, #4
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80033fe:	69f3      	ldr	r3, [r6, #28]
 8003400:	431d      	orrs	r5, r3
 8003402:	61f5      	str	r5, [r6, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003404:	69f3      	ldr	r3, [r6, #28]
 8003406:	4393      	bics	r3, r2
 8003408:	61f3      	str	r3, [r6, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800340a:	69f3      	ldr	r3, [r6, #28]
 800340c:	6922      	ldr	r2, [r4, #16]
 800340e:	4313      	orrs	r3, r2
 8003410:	61f3      	str	r3, [r6, #28]
      break;
 8003412:	e7dc      	b.n	80033ce <HAL_TIM_PWM_ConfigChannel+0x7a>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003414:	681d      	ldr	r5, [r3, #0]
 8003416:	0028      	movs	r0, r5
 8003418:	f7ff fe32 	bl	8003080 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800341c:	2380      	movs	r3, #128	@ 0x80
 800341e:	69ea      	ldr	r2, [r5, #28]
 8003420:	011b      	lsls	r3, r3, #4
 8003422:	4313      	orrs	r3, r2
 8003424:	61eb      	str	r3, [r5, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003426:	69eb      	ldr	r3, [r5, #28]
 8003428:	4a0c      	ldr	r2, [pc, #48]	@ (800345c <HAL_TIM_PWM_ConfigChannel+0x108>)
 800342a:	4013      	ands	r3, r2
 800342c:	61eb      	str	r3, [r5, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800342e:	6923      	ldr	r3, [r4, #16]
 8003430:	69ea      	ldr	r2, [r5, #28]
 8003432:	021b      	lsls	r3, r3, #8
 8003434:	4313      	orrs	r3, r2
 8003436:	61eb      	str	r3, [r5, #28]
      break;
 8003438:	e7c9      	b.n	80033ce <HAL_TIM_PWM_ConfigChannel+0x7a>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800343a:	681d      	ldr	r5, [r3, #0]
 800343c:	0028      	movs	r0, r5
 800343e:	f7ff fe53 	bl	80030e8 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003442:	2308      	movs	r3, #8
 8003444:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 8003446:	4313      	orrs	r3, r2
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003448:	2204      	movs	r2, #4
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800344a:	656b      	str	r3, [r5, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800344c:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800344e:	4393      	bics	r3, r2
 8003450:	656b      	str	r3, [r5, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003452:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 8003454:	6922      	ldr	r2, [r4, #16]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003456:	4313      	orrs	r3, r2
 8003458:	656b      	str	r3, [r5, #84]	@ 0x54
      break;
 800345a:	e7b8      	b.n	80033ce <HAL_TIM_PWM_ConfigChannel+0x7a>
 800345c:	fffffbff 	.word	0xfffffbff

08003460 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003460:	b530      	push	{r4, r5, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003462:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003464:	4d03      	ldr	r5, [pc, #12]	@ (8003474 <TIM_ETR_SetConfig+0x14>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003466:	430a      	orrs	r2, r1
 8003468:	021b      	lsls	r3, r3, #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800346a:	402c      	ands	r4, r5
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800346c:	4313      	orrs	r3, r2
 800346e:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003470:	6083      	str	r3, [r0, #8]
}
 8003472:	bd30      	pop	{r4, r5, pc}
 8003474:	ffff00ff 	.word	0xffff00ff

08003478 <TIM_SlaveTimer_SetConfig.constprop.0>:
  tmpsmcr = htim->Instance->SMCR;
 8003478:	6800      	ldr	r0, [r0, #0]
  tmpsmcr &= ~TIM_SMCR_TS;
 800347a:	4b30      	ldr	r3, [pc, #192]	@ (800353c <TIM_SlaveTimer_SetConfig.constprop.0+0xc4>)
  tmpsmcr = htim->Instance->SMCR;
 800347c:	6882      	ldr	r2, [r0, #8]
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
 800347e:	b570      	push	{r4, r5, r6, lr}
  tmpsmcr &= ~TIM_SMCR_TS;
 8003480:	401a      	ands	r2, r3
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003482:	684b      	ldr	r3, [r1, #4]
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003484:	4c2e      	ldr	r4, [pc, #184]	@ (8003540 <TIM_SlaveTimer_SetConfig.constprop.0+0xc8>)
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003486:	431a      	orrs	r2, r3
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003488:	4022      	ands	r2, r4
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800348a:	680c      	ldr	r4, [r1, #0]
 800348c:	4322      	orrs	r2, r4
  htim->Instance->SMCR = tmpsmcr;
 800348e:	6082      	str	r2, [r0, #8]
  switch (sSlaveConfig->InputTrigger)
 8003490:	2b50      	cmp	r3, #80	@ 0x50
 8003492:	d02d      	beq.n	80034f0 <TIM_SlaveTimer_SetConfig.constprop.0+0x78>
 8003494:	d810      	bhi.n	80034b8 <TIM_SlaveTimer_SetConfig.constprop.0+0x40>
 8003496:	2b40      	cmp	r3, #64	@ 0x40
 8003498:	d019      	beq.n	80034ce <TIM_SlaveTimer_SetConfig.constprop.0+0x56>
        return HAL_ERROR;
 800349a:	2201      	movs	r2, #1
  switch (sSlaveConfig->InputTrigger)
 800349c:	2b40      	cmp	r3, #64	@ 0x40
 800349e:	d809      	bhi.n	80034b4 <TIM_SlaveTimer_SetConfig.constprop.0+0x3c>
 80034a0:	2b20      	cmp	r3, #32
 80034a2:	d003      	beq.n	80034ac <TIM_SlaveTimer_SetConfig.constprop.0+0x34>
 80034a4:	d804      	bhi.n	80034b0 <TIM_SlaveTimer_SetConfig.constprop.0+0x38>
 80034a6:	2110      	movs	r1, #16
 80034a8:	438b      	bics	r3, r1
 80034aa:	d103      	bne.n	80034b4 <TIM_SlaveTimer_SetConfig.constprop.0+0x3c>
  HAL_StatusTypeDef status = HAL_OK;
 80034ac:	2200      	movs	r2, #0
 80034ae:	e001      	b.n	80034b4 <TIM_SlaveTimer_SetConfig.constprop.0+0x3c>
  switch (sSlaveConfig->InputTrigger)
 80034b0:	2b30      	cmp	r3, #48	@ 0x30
 80034b2:	d0fb      	beq.n	80034ac <TIM_SlaveTimer_SetConfig.constprop.0+0x34>
}
 80034b4:	0010      	movs	r0, r2
 80034b6:	bd70      	pop	{r4, r5, r6, pc}
  switch (sSlaveConfig->InputTrigger)
 80034b8:	2b60      	cmp	r3, #96	@ 0x60
 80034ba:	d02b      	beq.n	8003514 <TIM_SlaveTimer_SetConfig.constprop.0+0x9c>
        return HAL_ERROR;
 80034bc:	2201      	movs	r2, #1
  switch (sSlaveConfig->InputTrigger)
 80034be:	2b70      	cmp	r3, #112	@ 0x70
 80034c0:	d1f8      	bne.n	80034b4 <TIM_SlaveTimer_SetConfig.constprop.0+0x3c>
      TIM_ETR_SetConfig(htim->Instance,
 80034c2:	690b      	ldr	r3, [r1, #16]
 80034c4:	688a      	ldr	r2, [r1, #8]
 80034c6:	68c9      	ldr	r1, [r1, #12]
 80034c8:	f7ff ffca 	bl	8003460 <TIM_ETR_SetConfig>
      break;
 80034cc:	e7ee      	b.n	80034ac <TIM_SlaveTimer_SetConfig.constprop.0+0x34>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80034ce:	2501      	movs	r5, #1
        return HAL_ERROR;
 80034d0:	002a      	movs	r2, r5
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80034d2:	2c05      	cmp	r4, #5
 80034d4:	d0ee      	beq.n	80034b4 <TIM_SlaveTimer_SetConfig.constprop.0+0x3c>
      tmpccer = htim->Instance->CCER;
 80034d6:	6a04      	ldr	r4, [r0, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80034d8:	6a03      	ldr	r3, [r0, #32]
 80034da:	43ab      	bics	r3, r5
 80034dc:	6203      	str	r3, [r0, #32]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80034de:	23f0      	movs	r3, #240	@ 0xf0
      tmpccmr1 = htim->Instance->CCMR1;
 80034e0:	6982      	ldr	r2, [r0, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80034e2:	439a      	bics	r2, r3
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80034e4:	690b      	ldr	r3, [r1, #16]
 80034e6:	011b      	lsls	r3, r3, #4
 80034e8:	4313      	orrs	r3, r2
      htim->Instance->CCMR1 = tmpccmr1;
 80034ea:	6183      	str	r3, [r0, #24]
      htim->Instance->CCER = tmpccer;
 80034ec:	6204      	str	r4, [r0, #32]
      break;
 80034ee:	e7dd      	b.n	80034ac <TIM_SlaveTimer_SetConfig.constprop.0+0x34>
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034f0:	2501      	movs	r5, #1
                               sSlaveConfig->TriggerPolarity,
 80034f2:	688a      	ldr	r2, [r1, #8]
                               sSlaveConfig->TriggerFilter);
 80034f4:	690b      	ldr	r3, [r1, #16]
  tmpccer = TIMx->CCER;
 80034f6:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034f8:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80034fa:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034fc:	43ac      	bics	r4, r5
 80034fe:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003500:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003502:	35ef      	adds	r5, #239	@ 0xef
 8003504:	43ac      	bics	r4, r5
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003506:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003508:	240a      	movs	r4, #10
 800350a:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 800350c:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 800350e:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8003510:	6202      	str	r2, [r0, #32]
}
 8003512:	e7cb      	b.n	80034ac <TIM_SlaveTimer_SetConfig.constprop.0+0x34>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003514:	2510      	movs	r5, #16
                               sSlaveConfig->TriggerPolarity,
 8003516:	688b      	ldr	r3, [r1, #8]
                               sSlaveConfig->TriggerFilter);
 8003518:	690a      	ldr	r2, [r1, #16]
  tmpccer = TIMx->CCER;
 800351a:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800351c:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800351e:	0312      	lsls	r2, r2, #12
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003520:	43ac      	bics	r4, r5
 8003522:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003524:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003526:	4d07      	ldr	r5, [pc, #28]	@ (8003544 <TIM_SlaveTimer_SetConfig.constprop.0+0xcc>)
  tmpccer |= (TIM_ICPolarity << 4U);
 8003528:	011b      	lsls	r3, r3, #4
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800352a:	402c      	ands	r4, r5
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800352c:	4322      	orrs	r2, r4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800352e:	24a0      	movs	r4, #160	@ 0xa0
 8003530:	43a1      	bics	r1, r4
  tmpccer |= (TIM_ICPolarity << 4U);
 8003532:	430b      	orrs	r3, r1
  TIMx->CCMR1 = tmpccmr1 ;
 8003534:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003536:	6203      	str	r3, [r0, #32]
}
 8003538:	e7b8      	b.n	80034ac <TIM_SlaveTimer_SetConfig.constprop.0+0x34>
 800353a:	46c0      	nop			@ (mov r8, r8)
 800353c:	ffcfff8f 	.word	0xffcfff8f
 8003540:	fffefff8 	.word	0xfffefff8
 8003544:	ffff0fff 	.word	0xffff0fff

08003548 <HAL_TIM_SlaveConfigSynchro>:
{
 8003548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 800354a:	0005      	movs	r5, r0
 800354c:	2302      	movs	r3, #2
 800354e:	353c      	adds	r5, #60	@ 0x3c
 8003550:	782a      	ldrb	r2, [r5, #0]
{
 8003552:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 8003554:	0018      	movs	r0, r3
 8003556:	2a01      	cmp	r2, #1
 8003558:	d00d      	beq.n	8003576 <HAL_TIM_SlaveConfigSynchro+0x2e>
  htim->State = HAL_TIM_STATE_BUSY;
 800355a:	0027      	movs	r7, r4
  __HAL_LOCK(htim);
 800355c:	2601      	movs	r6, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800355e:	373d      	adds	r7, #61	@ 0x3d
  __HAL_LOCK(htim);
 8003560:	702e      	strb	r6, [r5, #0]
  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003562:	0020      	movs	r0, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8003564:	703b      	strb	r3, [r7, #0]
  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003566:	f7ff ff87 	bl	8003478 <TIM_SlaveTimer_SetConfig.constprop.0>
 800356a:	2800      	cmp	r0, #0
 800356c:	d004      	beq.n	8003578 <HAL_TIM_SlaveConfigSynchro+0x30>
    __HAL_UNLOCK(htim);
 800356e:	2300      	movs	r3, #0
    return HAL_ERROR;
 8003570:	0030      	movs	r0, r6
    htim->State = HAL_TIM_STATE_READY;
 8003572:	703e      	strb	r6, [r7, #0]
    __HAL_UNLOCK(htim);
 8003574:	702b      	strb	r3, [r5, #0]
}
 8003576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003578:	2140      	movs	r1, #64	@ 0x40
 800357a:	6823      	ldr	r3, [r4, #0]
 800357c:	68da      	ldr	r2, [r3, #12]
 800357e:	438a      	bics	r2, r1
 8003580:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003582:	68da      	ldr	r2, [r3, #12]
 8003584:	4902      	ldr	r1, [pc, #8]	@ (8003590 <HAL_TIM_SlaveConfigSynchro+0x48>)
 8003586:	400a      	ands	r2, r1
 8003588:	60da      	str	r2, [r3, #12]
  htim->State = HAL_TIM_STATE_READY;
 800358a:	703e      	strb	r6, [r7, #0]
  __HAL_UNLOCK(htim);
 800358c:	7028      	strb	r0, [r5, #0]
  return HAL_OK;
 800358e:	e7f2      	b.n	8003576 <HAL_TIM_SlaveConfigSynchro+0x2e>
 8003590:	ffffbfff 	.word	0xffffbfff

08003594 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003594:	231f      	movs	r3, #31
{
 8003596:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003598:	2401      	movs	r4, #1
 800359a:	4019      	ands	r1, r3
 800359c:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800359e:	408a      	lsls	r2, r1
  TIMx->CCER &= ~tmp;
 80035a0:	6a03      	ldr	r3, [r0, #32]
 80035a2:	43a3      	bics	r3, r4
 80035a4:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80035a6:	6a03      	ldr	r3, [r0, #32]
 80035a8:	431a      	orrs	r2, r3
 80035aa:	6202      	str	r2, [r0, #32]
}
 80035ac:	bd10      	pop	{r4, pc}
	...

080035b0 <HAL_TIM_OC_Start>:
{
 80035b0:	0002      	movs	r2, r0
 80035b2:	b510      	push	{r4, lr}
 80035b4:	2908      	cmp	r1, #8
 80035b6:	d01c      	beq.n	80035f2 <HAL_TIM_OC_Start+0x42>
 80035b8:	d806      	bhi.n	80035c8 <HAL_TIM_OC_Start+0x18>
 80035ba:	2900      	cmp	r1, #0
 80035bc:	d00b      	beq.n	80035d6 <HAL_TIM_OC_Start+0x26>
 80035be:	2904      	cmp	r1, #4
 80035c0:	d014      	beq.n	80035ec <HAL_TIM_OC_Start+0x3c>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80035c2:	0013      	movs	r3, r2
 80035c4:	3343      	adds	r3, #67	@ 0x43
 80035c6:	e008      	b.n	80035da <HAL_TIM_OC_Start+0x2a>
 80035c8:	290c      	cmp	r1, #12
 80035ca:	d015      	beq.n	80035f8 <HAL_TIM_OC_Start+0x48>
 80035cc:	2910      	cmp	r1, #16
 80035ce:	d1f8      	bne.n	80035c2 <HAL_TIM_OC_Start+0x12>
 80035d0:	0003      	movs	r3, r0
 80035d2:	3342      	adds	r3, #66	@ 0x42
 80035d4:	e001      	b.n	80035da <HAL_TIM_OC_Start+0x2a>
 80035d6:	0003      	movs	r3, r0
 80035d8:	333e      	adds	r3, #62	@ 0x3e
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	3b01      	subs	r3, #1
 80035de:	1e58      	subs	r0, r3, #1
 80035e0:	4183      	sbcs	r3, r0
 80035e2:	b2db      	uxtb	r3, r3
    return HAL_ERROR;
 80035e4:	2001      	movs	r0, #1
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d009      	beq.n	80035fe <HAL_TIM_OC_Start+0x4e>
}
 80035ea:	bd10      	pop	{r4, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80035ec:	0003      	movs	r3, r0
 80035ee:	333f      	adds	r3, #63	@ 0x3f
 80035f0:	e7f3      	b.n	80035da <HAL_TIM_OC_Start+0x2a>
 80035f2:	0003      	movs	r3, r0
 80035f4:	3340      	adds	r3, #64	@ 0x40
 80035f6:	e7f0      	b.n	80035da <HAL_TIM_OC_Start+0x2a>
 80035f8:	0003      	movs	r3, r0
 80035fa:	3341      	adds	r3, #65	@ 0x41
 80035fc:	e7ed      	b.n	80035da <HAL_TIM_OC_Start+0x2a>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80035fe:	2302      	movs	r3, #2
 8003600:	2908      	cmp	r1, #8
 8003602:	d033      	beq.n	800366c <HAL_TIM_OC_Start+0xbc>
 8003604:	d806      	bhi.n	8003614 <HAL_TIM_OC_Start+0x64>
 8003606:	2900      	cmp	r1, #0
 8003608:	d00b      	beq.n	8003622 <HAL_TIM_OC_Start+0x72>
 800360a:	2904      	cmp	r1, #4
 800360c:	d02b      	beq.n	8003666 <HAL_TIM_OC_Start+0xb6>
 800360e:	0010      	movs	r0, r2
 8003610:	3043      	adds	r0, #67	@ 0x43
 8003612:	e008      	b.n	8003626 <HAL_TIM_OC_Start+0x76>
 8003614:	290c      	cmp	r1, #12
 8003616:	d02c      	beq.n	8003672 <HAL_TIM_OC_Start+0xc2>
 8003618:	2910      	cmp	r1, #16
 800361a:	d1f8      	bne.n	800360e <HAL_TIM_OC_Start+0x5e>
 800361c:	0010      	movs	r0, r2
 800361e:	3042      	adds	r0, #66	@ 0x42
 8003620:	e001      	b.n	8003626 <HAL_TIM_OC_Start+0x76>
 8003622:	0010      	movs	r0, r2
 8003624:	303e      	adds	r0, #62	@ 0x3e
 8003626:	7003      	strb	r3, [r0, #0]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003628:	6814      	ldr	r4, [r2, #0]
 800362a:	2201      	movs	r2, #1
 800362c:	0020      	movs	r0, r4
 800362e:	f7ff ffb1 	bl	8003594 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003632:	4a15      	ldr	r2, [pc, #84]	@ (8003688 <HAL_TIM_OC_Start+0xd8>)
 8003634:	4294      	cmp	r4, r2
 8003636:	d01f      	beq.n	8003678 <HAL_TIM_OC_Start+0xc8>
 8003638:	4b14      	ldr	r3, [pc, #80]	@ (800368c <HAL_TIM_OC_Start+0xdc>)
 800363a:	429c      	cmp	r4, r3
 800363c:	d01c      	beq.n	8003678 <HAL_TIM_OC_Start+0xc8>
 800363e:	4b14      	ldr	r3, [pc, #80]	@ (8003690 <HAL_TIM_OC_Start+0xe0>)
 8003640:	429c      	cmp	r4, r3
 8003642:	d019      	beq.n	8003678 <HAL_TIM_OC_Start+0xc8>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003644:	4b13      	ldr	r3, [pc, #76]	@ (8003694 <HAL_TIM_OC_Start+0xe4>)
 8003646:	429c      	cmp	r4, r3
 8003648:	d107      	bne.n	800365a <HAL_TIM_OC_Start+0xaa>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800364a:	68a3      	ldr	r3, [r4, #8]
 800364c:	4a12      	ldr	r2, [pc, #72]	@ (8003698 <HAL_TIM_OC_Start+0xe8>)
 800364e:	4013      	ands	r3, r2
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003650:	2b06      	cmp	r3, #6
 8003652:	d006      	beq.n	8003662 <HAL_TIM_OC_Start+0xb2>
 8003654:	3a07      	subs	r2, #7
 8003656:	4293      	cmp	r3, r2
 8003658:	d003      	beq.n	8003662 <HAL_TIM_OC_Start+0xb2>
      __HAL_TIM_ENABLE(htim);
 800365a:	2301      	movs	r3, #1
 800365c:	6822      	ldr	r2, [r4, #0]
 800365e:	4313      	orrs	r3, r2
 8003660:	6023      	str	r3, [r4, #0]
  return HAL_OK;
 8003662:	2000      	movs	r0, #0
 8003664:	e7c1      	b.n	80035ea <HAL_TIM_OC_Start+0x3a>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003666:	0010      	movs	r0, r2
 8003668:	303f      	adds	r0, #63	@ 0x3f
 800366a:	e7dc      	b.n	8003626 <HAL_TIM_OC_Start+0x76>
 800366c:	0010      	movs	r0, r2
 800366e:	3040      	adds	r0, #64	@ 0x40
 8003670:	e7d9      	b.n	8003626 <HAL_TIM_OC_Start+0x76>
 8003672:	0010      	movs	r0, r2
 8003674:	3041      	adds	r0, #65	@ 0x41
 8003676:	e7d6      	b.n	8003626 <HAL_TIM_OC_Start+0x76>
    __HAL_TIM_MOE_ENABLE(htim);
 8003678:	2380      	movs	r3, #128	@ 0x80
 800367a:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800367c:	021b      	lsls	r3, r3, #8
 800367e:	430b      	orrs	r3, r1
 8003680:	6463      	str	r3, [r4, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003682:	4294      	cmp	r4, r2
 8003684:	d0e1      	beq.n	800364a <HAL_TIM_OC_Start+0x9a>
 8003686:	e7dd      	b.n	8003644 <HAL_TIM_OC_Start+0x94>
 8003688:	40012c00 	.word	0x40012c00
 800368c:	40014400 	.word	0x40014400
 8003690:	40014800 	.word	0x40014800
 8003694:	40000400 	.word	0x40000400
 8003698:	00010007 	.word	0x00010007

0800369c <HAL_TIM_PWM_Start>:
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
 800369c:	b510      	push	{r4, lr}
 800369e:	f7ff ff87 	bl	80035b0 <HAL_TIM_OC_Start>
 80036a2:	bd10      	pop	{r4, pc}

080036a4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80036a4:	b510      	push	{r4, lr}
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80036a6:	0004      	movs	r4, r0
 80036a8:	343c      	adds	r4, #60	@ 0x3c
 80036aa:	7823      	ldrb	r3, [r4, #0]
{
 80036ac:	0002      	movs	r2, r0
  __HAL_LOCK(htim);
 80036ae:	2002      	movs	r0, #2
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d039      	beq.n	8003728 <HAL_TIMEx_ConfigBreakDeadTime+0x84>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80036b4:	481d      	ldr	r0, [pc, #116]	@ (800372c <HAL_TIMEx_ConfigBreakDeadTime+0x88>)
 80036b6:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80036b8:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80036ba:	4003      	ands	r3, r0
 80036bc:	6888      	ldr	r0, [r1, #8]
 80036be:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80036c0:	481b      	ldr	r0, [pc, #108]	@ (8003730 <HAL_TIMEx_ConfigBreakDeadTime+0x8c>)
 80036c2:	4003      	ands	r3, r0
 80036c4:	6848      	ldr	r0, [r1, #4]
 80036c6:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80036c8:	481a      	ldr	r0, [pc, #104]	@ (8003734 <HAL_TIMEx_ConfigBreakDeadTime+0x90>)
 80036ca:	4003      	ands	r3, r0
 80036cc:	6808      	ldr	r0, [r1, #0]
 80036ce:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80036d0:	4819      	ldr	r0, [pc, #100]	@ (8003738 <HAL_TIMEx_ConfigBreakDeadTime+0x94>)
 80036d2:	4003      	ands	r3, r0
 80036d4:	6908      	ldr	r0, [r1, #16]
 80036d6:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80036d8:	4818      	ldr	r0, [pc, #96]	@ (800373c <HAL_TIMEx_ConfigBreakDeadTime+0x98>)
 80036da:	4003      	ands	r3, r0
 80036dc:	6948      	ldr	r0, [r1, #20]
 80036de:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80036e0:	4817      	ldr	r0, [pc, #92]	@ (8003740 <HAL_TIMEx_ConfigBreakDeadTime+0x9c>)
 80036e2:	4003      	ands	r3, r0
 80036e4:	6b08      	ldr	r0, [r1, #48]	@ 0x30
 80036e6:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80036e8:	4816      	ldr	r0, [pc, #88]	@ (8003744 <HAL_TIMEx_ConfigBreakDeadTime+0xa0>)
 80036ea:	4003      	ands	r3, r0
 80036ec:	6988      	ldr	r0, [r1, #24]
 80036ee:	0400      	lsls	r0, r0, #16
 80036f0:	4303      	orrs	r3, r0
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80036f2:	4815      	ldr	r0, [pc, #84]	@ (8003748 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 80036f4:	4282      	cmp	r2, r0
 80036f6:	d114      	bne.n	8003722 <HAL_TIMEx_ConfigBreakDeadTime+0x7e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80036f8:	4814      	ldr	r0, [pc, #80]	@ (800374c <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 80036fa:	4018      	ands	r0, r3
 80036fc:	69cb      	ldr	r3, [r1, #28]
 80036fe:	4318      	orrs	r0, r3
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003700:	4b13      	ldr	r3, [pc, #76]	@ (8003750 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8003702:	4018      	ands	r0, r3
 8003704:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8003706:	051b      	lsls	r3, r3, #20
 8003708:	4303      	orrs	r3, r0
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800370a:	4812      	ldr	r0, [pc, #72]	@ (8003754 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 800370c:	4003      	ands	r3, r0
 800370e:	6a08      	ldr	r0, [r1, #32]
 8003710:	4303      	orrs	r3, r0
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003712:	4811      	ldr	r0, [pc, #68]	@ (8003758 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8003714:	4003      	ands	r3, r0
 8003716:	6a48      	ldr	r0, [r1, #36]	@ 0x24
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003718:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800371a:	4303      	orrs	r3, r0
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800371c:	480f      	ldr	r0, [pc, #60]	@ (800375c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 800371e:	4003      	ands	r3, r0
 8003720:	430b      	orrs	r3, r1
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 8003722:	2000      	movs	r0, #0
  htim->Instance->BDTR = tmpbdtr;
 8003724:	6453      	str	r3, [r2, #68]	@ 0x44
  __HAL_UNLOCK(htim);
 8003726:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8003728:	bd10      	pop	{r4, pc}
 800372a:	46c0      	nop			@ (mov r8, r8)
 800372c:	fffffcff 	.word	0xfffffcff
 8003730:	fffffbff 	.word	0xfffffbff
 8003734:	fffff7ff 	.word	0xfffff7ff
 8003738:	ffffefff 	.word	0xffffefff
 800373c:	ffffdfff 	.word	0xffffdfff
 8003740:	ffffbfff 	.word	0xffffbfff
 8003744:	fff0ffff 	.word	0xfff0ffff
 8003748:	40012c00 	.word	0x40012c00
 800374c:	efffffff 	.word	0xefffffff
 8003750:	ff0fffff 	.word	0xff0fffff
 8003754:	feffffff 	.word	0xfeffffff
 8003758:	fdffffff 	.word	0xfdffffff
 800375c:	dfffffff 	.word	0xdfffffff

08003760 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003760:	b530      	push	{r4, r5, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003762:	f3ef 8410 	mrs	r4, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003766:	2201      	movs	r2, #1
 8003768:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800376c:	6801      	ldr	r1, [r0, #0]
 800376e:	4d13      	ldr	r5, [pc, #76]	@ (80037bc <UART_EndRxTransfer+0x5c>)
 8003770:	680b      	ldr	r3, [r1, #0]
 8003772:	402b      	ands	r3, r5
 8003774:	600b      	str	r3, [r1, #0]
 8003776:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800377a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800377e:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003782:	6802      	ldr	r2, [r0, #0]
 8003784:	4c0e      	ldr	r4, [pc, #56]	@ (80037c0 <UART_EndRxTransfer+0x60>)
 8003786:	6893      	ldr	r3, [r2, #8]
 8003788:	4023      	ands	r3, r4
 800378a:	6093      	str	r3, [r2, #8]
 800378c:	f381 8810 	msr	PRIMASK, r1

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003790:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8003792:	2b01      	cmp	r3, #1
 8003794:	d10a      	bne.n	80037ac <UART_EndRxTransfer+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003796:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800379a:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800379e:	2410      	movs	r4, #16
 80037a0:	6802      	ldr	r2, [r0, #0]
 80037a2:	6813      	ldr	r3, [r2, #0]
 80037a4:	43a3      	bics	r3, r4
 80037a6:	6013      	str	r3, [r2, #0]
 80037a8:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80037ac:	0003      	movs	r3, r0
 80037ae:	2220      	movs	r2, #32
 80037b0:	338c      	adds	r3, #140	@ 0x8c
 80037b2:	601a      	str	r2, [r3, #0]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037b4:	2300      	movs	r3, #0
 80037b6:	66c3      	str	r3, [r0, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80037b8:	6743      	str	r3, [r0, #116]	@ 0x74
}
 80037ba:	bd30      	pop	{r4, r5, pc}
 80037bc:	fffffedf 	.word	0xfffffedf
 80037c0:	effffffe 	.word	0xeffffffe

080037c4 <HAL_UART_TxCpltCallback>:
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
 80037c4:	4770      	bx	lr

080037c6 <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 80037c6:	4770      	bx	lr

080037c8 <UART_DMAAbortOnError>:
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80037c8:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  huart->RxXferCount = 0U;
 80037ca:	2300      	movs	r3, #0
 80037cc:	0002      	movs	r2, r0
{
 80037ce:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 80037d0:	325e      	adds	r2, #94	@ 0x5e
 80037d2:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 80037d4:	3a08      	subs	r2, #8
 80037d6:	8013      	strh	r3, [r2, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80037d8:	f7ff fff5 	bl	80037c6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037dc:	bd10      	pop	{r4, pc}
	...

080037e0 <HAL_UART_IRQHandler>:
{
 80037e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80037e2:	6801      	ldr	r1, [r0, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80037e4:	4dc1      	ldr	r5, [pc, #772]	@ (8003aec <HAL_UART_IRQHandler+0x30c>)
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80037e6:	69cb      	ldr	r3, [r1, #28]
{
 80037e8:	0004      	movs	r4, r0
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80037ea:	680a      	ldr	r2, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80037ec:	6888      	ldr	r0, [r1, #8]
  if (errorflags == 0U)
 80037ee:	422b      	tst	r3, r5
 80037f0:	d110      	bne.n	8003814 <HAL_UART_IRQHandler+0x34>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80037f2:	2520      	movs	r5, #32
 80037f4:	422b      	tst	r3, r5
 80037f6:	d100      	bne.n	80037fa <HAL_UART_IRQHandler+0x1a>
 80037f8:	e09b      	b.n	8003932 <HAL_UART_IRQHandler+0x152>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80037fa:	2680      	movs	r6, #128	@ 0x80
 80037fc:	0576      	lsls	r6, r6, #21
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80037fe:	4015      	ands	r5, r2
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003800:	4006      	ands	r6, r0
 8003802:	4335      	orrs	r5, r6
 8003804:	d100      	bne.n	8003808 <HAL_UART_IRQHandler+0x28>
 8003806:	e094      	b.n	8003932 <HAL_UART_IRQHandler+0x152>
      if (huart->RxISR != NULL)
 8003808:	6f63      	ldr	r3, [r4, #116]	@ 0x74
      huart->TxISR(huart);
 800380a:	0020      	movs	r0, r4
    if (huart->TxISR != NULL)
 800380c:	2b00      	cmp	r3, #0
 800380e:	d000      	beq.n	8003812 <HAL_UART_IRQHandler+0x32>
 8003810:	e085      	b.n	800391e <HAL_UART_IRQHandler+0x13e>
 8003812:	e085      	b.n	8003920 <HAL_UART_IRQHandler+0x140>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003814:	4db6      	ldr	r5, [pc, #728]	@ (8003af0 <HAL_UART_IRQHandler+0x310>)
 8003816:	4005      	ands	r5, r0
 8003818:	9500      	str	r5, [sp, #0]
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800381a:	4db6      	ldr	r5, [pc, #728]	@ (8003af4 <HAL_UART_IRQHandler+0x314>)
 800381c:	9e00      	ldr	r6, [sp, #0]
 800381e:	4015      	ands	r5, r2
 8003820:	4335      	orrs	r5, r6
 8003822:	d100      	bne.n	8003826 <HAL_UART_IRQHandler+0x46>
 8003824:	e085      	b.n	8003932 <HAL_UART_IRQHandler+0x152>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003826:	0025      	movs	r5, r4
 8003828:	2601      	movs	r6, #1
 800382a:	3590      	adds	r5, #144	@ 0x90
 800382c:	4233      	tst	r3, r6
 800382e:	d005      	beq.n	800383c <HAL_UART_IRQHandler+0x5c>
 8003830:	05d7      	lsls	r7, r2, #23
 8003832:	d503      	bpl.n	800383c <HAL_UART_IRQHandler+0x5c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003834:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003836:	682f      	ldr	r7, [r5, #0]
 8003838:	433e      	orrs	r6, r7
 800383a:	602e      	str	r6, [r5, #0]
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800383c:	2602      	movs	r6, #2
 800383e:	4233      	tst	r3, r6
 8003840:	d00c      	beq.n	800385c <HAL_UART_IRQHandler+0x7c>
 8003842:	07c7      	lsls	r7, r0, #31
 8003844:	d50a      	bpl.n	800385c <HAL_UART_IRQHandler+0x7c>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003846:	0027      	movs	r7, r4
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003848:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800384a:	3790      	adds	r7, #144	@ 0x90
 800384c:	683e      	ldr	r6, [r7, #0]
 800384e:	9701      	str	r7, [sp, #4]
 8003850:	46b4      	mov	ip, r6
 8003852:	2604      	movs	r6, #4
 8003854:	4667      	mov	r7, ip
 8003856:	433e      	orrs	r6, r7
 8003858:	9f01      	ldr	r7, [sp, #4]
 800385a:	603e      	str	r6, [r7, #0]
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800385c:	2604      	movs	r6, #4
 800385e:	4233      	tst	r3, r6
 8003860:	d00c      	beq.n	800387c <HAL_UART_IRQHandler+0x9c>
 8003862:	07c7      	lsls	r7, r0, #31
 8003864:	d50a      	bpl.n	800387c <HAL_UART_IRQHandler+0x9c>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003866:	0027      	movs	r7, r4
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003868:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800386a:	3790      	adds	r7, #144	@ 0x90
 800386c:	683e      	ldr	r6, [r7, #0]
 800386e:	9701      	str	r7, [sp, #4]
 8003870:	46b4      	mov	ip, r6
 8003872:	2602      	movs	r6, #2
 8003874:	4667      	mov	r7, ip
 8003876:	433e      	orrs	r6, r7
 8003878:	9f01      	ldr	r7, [sp, #4]
 800387a:	603e      	str	r6, [r7, #0]
    if (((isrflags & USART_ISR_ORE) != 0U)
 800387c:	2608      	movs	r6, #8
 800387e:	46b4      	mov	ip, r6
 8003880:	4233      	tst	r3, r6
 8003882:	d009      	beq.n	8003898 <HAL_UART_IRQHandler+0xb8>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003884:	2720      	movs	r7, #32
 8003886:	9e00      	ldr	r6, [sp, #0]
 8003888:	4017      	ands	r7, r2
 800388a:	4337      	orrs	r7, r6
 800388c:	d004      	beq.n	8003898 <HAL_UART_IRQHandler+0xb8>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800388e:	4666      	mov	r6, ip
 8003890:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003892:	682f      	ldr	r7, [r5, #0]
 8003894:	433e      	orrs	r6, r7
 8003896:	602e      	str	r6, [r5, #0]
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003898:	2680      	movs	r6, #128	@ 0x80
 800389a:	0136      	lsls	r6, r6, #4
 800389c:	4233      	tst	r3, r6
 800389e:	d006      	beq.n	80038ae <HAL_UART_IRQHandler+0xce>
 80038a0:	0157      	lsls	r7, r2, #5
 80038a2:	d504      	bpl.n	80038ae <HAL_UART_IRQHandler+0xce>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80038a4:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80038a6:	2120      	movs	r1, #32
 80038a8:	682e      	ldr	r6, [r5, #0]
 80038aa:	4331      	orrs	r1, r6
 80038ac:	6029      	str	r1, [r5, #0]
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80038ae:	6829      	ldr	r1, [r5, #0]
 80038b0:	2900      	cmp	r1, #0
 80038b2:	d035      	beq.n	8003920 <HAL_UART_IRQHandler+0x140>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80038b4:	2120      	movs	r1, #32
 80038b6:	420b      	tst	r3, r1
 80038b8:	d00a      	beq.n	80038d0 <HAL_UART_IRQHandler+0xf0>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80038ba:	2380      	movs	r3, #128	@ 0x80
 80038bc:	055b      	lsls	r3, r3, #21
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80038be:	4011      	ands	r1, r2
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80038c0:	4003      	ands	r3, r0
 80038c2:	4319      	orrs	r1, r3
 80038c4:	d004      	beq.n	80038d0 <HAL_UART_IRQHandler+0xf0>
        if (huart->RxISR != NULL)
 80038c6:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d001      	beq.n	80038d0 <HAL_UART_IRQHandler+0xf0>
          huart->RxISR(huart);
 80038cc:	0020      	movs	r0, r4
 80038ce:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80038d0:	6822      	ldr	r2, [r4, #0]
      errorcode = huart->ErrorCode;
 80038d2:	682b      	ldr	r3, [r5, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80038d4:	2740      	movs	r7, #64	@ 0x40
 80038d6:	6896      	ldr	r6, [r2, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80038d8:	2228      	movs	r2, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80038da:	403e      	ands	r6, r7
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80038dc:	4013      	ands	r3, r2
        UART_EndRxTransfer(huart);
 80038de:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80038e0:	431e      	orrs	r6, r3
 80038e2:	d022      	beq.n	800392a <HAL_UART_IRQHandler+0x14a>
        UART_EndRxTransfer(huart);
 80038e4:	f7ff ff3c 	bl	8003760 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038e8:	6823      	ldr	r3, [r4, #0]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	423b      	tst	r3, r7
 80038ee:	d018      	beq.n	8003922 <HAL_UART_IRQHandler+0x142>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80038f0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038f4:	2301      	movs	r3, #1
 80038f6:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038fa:	0025      	movs	r5, r4
 80038fc:	cd04      	ldmia	r5!, {r2}
 80038fe:	6893      	ldr	r3, [r2, #8]
 8003900:	43bb      	bics	r3, r7
 8003902:	6093      	str	r3, [r2, #8]
 8003904:	f381 8810 	msr	PRIMASK, r1
          if (huart->hdmarx != NULL)
 8003908:	6fe8      	ldr	r0, [r5, #124]	@ 0x7c
 800390a:	2800      	cmp	r0, #0
 800390c:	d009      	beq.n	8003922 <HAL_UART_IRQHandler+0x142>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800390e:	4b7a      	ldr	r3, [pc, #488]	@ (8003af8 <HAL_UART_IRQHandler+0x318>)
 8003910:	6383      	str	r3, [r0, #56]	@ 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003912:	f7fe fed7 	bl	80026c4 <HAL_DMA_Abort_IT>
 8003916:	2800      	cmp	r0, #0
 8003918:	d002      	beq.n	8003920 <HAL_UART_IRQHandler+0x140>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800391a:	6fe8      	ldr	r0, [r5, #124]	@ 0x7c
 800391c:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800391e:	4798      	blx	r3
}
 8003920:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
            HAL_UART_ErrorCallback(huart);
 8003922:	0020      	movs	r0, r4
 8003924:	f7ff ff4f 	bl	80037c6 <HAL_UART_ErrorCallback>
 8003928:	e7fa      	b.n	8003920 <HAL_UART_IRQHandler+0x140>
        HAL_UART_ErrorCallback(huart);
 800392a:	f7ff ff4c 	bl	80037c6 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800392e:	602e      	str	r6, [r5, #0]
 8003930:	e7f6      	b.n	8003920 <HAL_UART_IRQHandler+0x140>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003932:	6ee5      	ldr	r5, [r4, #108]	@ 0x6c
 8003934:	2d01      	cmp	r5, #1
 8003936:	d000      	beq.n	800393a <HAL_UART_IRQHandler+0x15a>
 8003938:	e09f      	b.n	8003a7a <HAL_UART_IRQHandler+0x29a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800393a:	2610      	movs	r6, #16
 800393c:	4233      	tst	r3, r6
 800393e:	d100      	bne.n	8003942 <HAL_UART_IRQHandler+0x162>
 8003940:	e09b      	b.n	8003a7a <HAL_UART_IRQHandler+0x29a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003942:	4232      	tst	r2, r6
 8003944:	d100      	bne.n	8003948 <HAL_UART_IRQHandler+0x168>
 8003946:	e098      	b.n	8003a7a <HAL_UART_IRQHandler+0x29a>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003948:	620e      	str	r6, [r1, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800394a:	6889      	ldr	r1, [r1, #8]
 800394c:	2340      	movs	r3, #64	@ 0x40
 800394e:	000a      	movs	r2, r1
 8003950:	401a      	ands	r2, r3
 8003952:	4219      	tst	r1, r3
 8003954:	d057      	beq.n	8003a06 <HAL_UART_IRQHandler+0x226>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003956:	1d21      	adds	r1, r4, #4
 8003958:	6fca      	ldr	r2, [r1, #124]	@ 0x7c
 800395a:	6810      	ldr	r0, [r2, #0]
 800395c:	6842      	ldr	r2, [r0, #4]
 800395e:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8003960:	2a00      	cmp	r2, #0
 8003962:	d0dd      	beq.n	8003920 <HAL_UART_IRQHandler+0x140>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003964:	0027      	movs	r7, r4
 8003966:	375c      	adds	r7, #92	@ 0x5c
 8003968:	883f      	ldrh	r7, [r7, #0]
 800396a:	4297      	cmp	r7, r2
 800396c:	d9d8      	bls.n	8003920 <HAL_UART_IRQHandler+0x140>
        huart->RxXferCount = nb_remaining_rx_data;
 800396e:	0027      	movs	r7, r4
 8003970:	375e      	adds	r7, #94	@ 0x5e
 8003972:	803a      	strh	r2, [r7, #0]
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003974:	6802      	ldr	r2, [r0, #0]
 8003976:	2020      	movs	r0, #32
 8003978:	4684      	mov	ip, r0
 800397a:	4010      	ands	r0, r2
 800397c:	9000      	str	r0, [sp, #0]
 800397e:	4660      	mov	r0, ip
 8003980:	4202      	tst	r2, r0
 8003982:	d132      	bne.n	80039ea <HAL_UART_IRQHandler+0x20a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003984:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003988:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800398c:	6820      	ldr	r0, [r4, #0]
 800398e:	4e5b      	ldr	r6, [pc, #364]	@ (8003afc <HAL_UART_IRQHandler+0x31c>)
 8003990:	6802      	ldr	r2, [r0, #0]
 8003992:	4032      	ands	r2, r6
 8003994:	6002      	str	r2, [r0, #0]
 8003996:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800399a:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800399e:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039a2:	6820      	ldr	r0, [r4, #0]
 80039a4:	6882      	ldr	r2, [r0, #8]
 80039a6:	43aa      	bics	r2, r5
 80039a8:	6082      	str	r2, [r0, #8]
 80039aa:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80039ae:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039b2:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039b6:	6820      	ldr	r0, [r4, #0]
 80039b8:	6882      	ldr	r2, [r0, #8]
 80039ba:	439a      	bics	r2, r3
 80039bc:	6082      	str	r2, [r0, #8]
 80039be:	f387 8810 	msr	PRIMASK, r7
          huart->RxState = HAL_UART_STATE_READY;
 80039c2:	0023      	movs	r3, r4
 80039c4:	4662      	mov	r2, ip
 80039c6:	338c      	adds	r3, #140	@ 0x8c
 80039c8:	601a      	str	r2, [r3, #0]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039ca:	9b00      	ldr	r3, [sp, #0]
 80039cc:	66e3      	str	r3, [r4, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80039ce:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039d2:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039d6:	6822      	ldr	r2, [r4, #0]
 80039d8:	350f      	adds	r5, #15
 80039da:	6813      	ldr	r3, [r2, #0]
 80039dc:	43ab      	bics	r3, r5
 80039de:	6013      	str	r3, [r2, #0]
 80039e0:	f380 8810 	msr	PRIMASK, r0
          (void)HAL_DMA_Abort(huart->hdmarx);
 80039e4:	6fc8      	ldr	r0, [r1, #124]	@ 0x7c
 80039e6:	f7fe fe33 	bl	8002650 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80039ea:	2302      	movs	r3, #2
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80039ec:	0022      	movs	r2, r4
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80039ee:	6723      	str	r3, [r4, #112]	@ 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80039f0:	0023      	movs	r3, r4
 80039f2:	325c      	adds	r2, #92	@ 0x5c
 80039f4:	335e      	adds	r3, #94	@ 0x5e
 80039f6:	881b      	ldrh	r3, [r3, #0]
 80039f8:	8811      	ldrh	r1, [r2, #0]
 80039fa:	1ac9      	subs	r1, r1, r3
 80039fc:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80039fe:	0020      	movs	r0, r4
 8003a00:	f7fe f862 	bl	8001ac8 <HAL_UARTEx_RxEventCallback>
 8003a04:	e78c      	b.n	8003920 <HAL_UART_IRQHandler+0x140>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a06:	0023      	movs	r3, r4
 8003a08:	0020      	movs	r0, r4
 8003a0a:	335c      	adds	r3, #92	@ 0x5c
 8003a0c:	305e      	adds	r0, #94	@ 0x5e
 8003a0e:	8819      	ldrh	r1, [r3, #0]
 8003a10:	8803      	ldrh	r3, [r0, #0]
      if ((huart->RxXferCount > 0U)
 8003a12:	8800      	ldrh	r0, [r0, #0]
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a14:	b29b      	uxth	r3, r3
      if ((huart->RxXferCount > 0U)
 8003a16:	2800      	cmp	r0, #0
 8003a18:	d100      	bne.n	8003a1c <HAL_UART_IRQHandler+0x23c>
 8003a1a:	e781      	b.n	8003920 <HAL_UART_IRQHandler+0x140>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a1c:	1ac9      	subs	r1, r1, r3
 8003a1e:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8003a20:	2900      	cmp	r1, #0
 8003a22:	d100      	bne.n	8003a26 <HAL_UART_IRQHandler+0x246>
 8003a24:	e77c      	b.n	8003920 <HAL_UART_IRQHandler+0x140>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003a26:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a2a:	f385 8810 	msr	PRIMASK, r5
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003a2e:	6820      	ldr	r0, [r4, #0]
 8003a30:	4e33      	ldr	r6, [pc, #204]	@ (8003b00 <HAL_UART_IRQHandler+0x320>)
 8003a32:	6803      	ldr	r3, [r0, #0]
 8003a34:	4033      	ands	r3, r6
 8003a36:	6003      	str	r3, [r0, #0]
 8003a38:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003a3c:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a40:	f385 8810 	msr	PRIMASK, r5
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003a44:	6820      	ldr	r0, [r4, #0]
 8003a46:	4e2f      	ldr	r6, [pc, #188]	@ (8003b04 <HAL_UART_IRQHandler+0x324>)
 8003a48:	6883      	ldr	r3, [r0, #8]
 8003a4a:	4033      	ands	r3, r6
 8003a4c:	6083      	str	r3, [r0, #8]
 8003a4e:	f387 8810 	msr	PRIMASK, r7
        huart->RxState = HAL_UART_STATE_READY;
 8003a52:	0023      	movs	r3, r4
 8003a54:	2020      	movs	r0, #32
 8003a56:	338c      	adds	r3, #140	@ 0x8c
 8003a58:	6018      	str	r0, [r3, #0]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a5a:	66e2      	str	r2, [r4, #108]	@ 0x6c
        huart->RxISR = NULL;
 8003a5c:	6762      	str	r2, [r4, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003a5e:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a62:	f385 8810 	msr	PRIMASK, r5
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a66:	2510      	movs	r5, #16
 8003a68:	6822      	ldr	r2, [r4, #0]
 8003a6a:	6813      	ldr	r3, [r2, #0]
 8003a6c:	43ab      	bics	r3, r5
 8003a6e:	6013      	str	r3, [r2, #0]
 8003a70:	f380 8810 	msr	PRIMASK, r0
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a74:	2302      	movs	r3, #2
 8003a76:	6723      	str	r3, [r4, #112]	@ 0x70
 8003a78:	e7c1      	b.n	80039fe <HAL_UART_IRQHandler+0x21e>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003a7a:	2580      	movs	r5, #128	@ 0x80
 8003a7c:	036d      	lsls	r5, r5, #13
 8003a7e:	422b      	tst	r3, r5
 8003a80:	d006      	beq.n	8003a90 <HAL_UART_IRQHandler+0x2b0>
 8003a82:	0246      	lsls	r6, r0, #9
 8003a84:	d504      	bpl.n	8003a90 <HAL_UART_IRQHandler+0x2b0>
    HAL_UARTEx_WakeupCallback(huart);
 8003a86:	0020      	movs	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003a88:	620d      	str	r5, [r1, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8003a8a:	f000 fe1b 	bl	80046c4 <HAL_UARTEx_WakeupCallback>
    return;
 8003a8e:	e747      	b.n	8003920 <HAL_UART_IRQHandler+0x140>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003a90:	2180      	movs	r1, #128	@ 0x80
 8003a92:	420b      	tst	r3, r1
 8003a94:	d007      	beq.n	8003aa6 <HAL_UART_IRQHandler+0x2c6>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003a96:	2580      	movs	r5, #128	@ 0x80
 8003a98:	042d      	lsls	r5, r5, #16
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003a9a:	4011      	ands	r1, r2
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003a9c:	4028      	ands	r0, r5
 8003a9e:	4301      	orrs	r1, r0
 8003aa0:	d001      	beq.n	8003aa6 <HAL_UART_IRQHandler+0x2c6>
    if (huart->TxISR != NULL)
 8003aa2:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8003aa4:	e6b1      	b.n	800380a <HAL_UART_IRQHandler+0x2a>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003aa6:	2140      	movs	r1, #64	@ 0x40
 8003aa8:	420b      	tst	r3, r1
 8003aaa:	d016      	beq.n	8003ada <HAL_UART_IRQHandler+0x2fa>
 8003aac:	420a      	tst	r2, r1
 8003aae:	d014      	beq.n	8003ada <HAL_UART_IRQHandler+0x2fa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003ab0:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	f383 8810 	msr	PRIMASK, r3
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003aba:	6822      	ldr	r2, [r4, #0]
 8003abc:	6813      	ldr	r3, [r2, #0]
 8003abe:	438b      	bics	r3, r1
 8003ac0:	6013      	str	r3, [r2, #0]
 8003ac2:	f380 8810 	msr	PRIMASK, r0

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ac6:	0023      	movs	r3, r4
 8003ac8:	2220      	movs	r2, #32
 8003aca:	3388      	adds	r3, #136	@ 0x88
 8003acc:	601a      	str	r2, [r3, #0]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003ace:	2300      	movs	r3, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003ad0:	0020      	movs	r0, r4
  huart->TxISR = NULL;
 8003ad2:	67a3      	str	r3, [r4, #120]	@ 0x78
  HAL_UART_TxCpltCallback(huart);
 8003ad4:	f7ff fe76 	bl	80037c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ad8:	e722      	b.n	8003920 <HAL_UART_IRQHandler+0x140>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003ada:	0219      	lsls	r1, r3, #8
 8003adc:	d514      	bpl.n	8003b08 <HAL_UART_IRQHandler+0x328>
 8003ade:	0051      	lsls	r1, r2, #1
 8003ae0:	d512      	bpl.n	8003b08 <HAL_UART_IRQHandler+0x328>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003ae2:	0020      	movs	r0, r4
 8003ae4:	f000 fdf0 	bl	80046c8 <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 8003ae8:	e71a      	b.n	8003920 <HAL_UART_IRQHandler+0x140>
 8003aea:	46c0      	nop			@ (mov r8, r8)
 8003aec:	0000080f 	.word	0x0000080f
 8003af0:	10000001 	.word	0x10000001
 8003af4:	04000120 	.word	0x04000120
 8003af8:	080037c9 	.word	0x080037c9
 8003afc:	fffffeff 	.word	0xfffffeff
 8003b00:	fffffedf 	.word	0xfffffedf
 8003b04:	effffffe 	.word	0xeffffffe
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003b08:	01db      	lsls	r3, r3, #7
 8003b0a:	d400      	bmi.n	8003b0e <HAL_UART_IRQHandler+0x32e>
 8003b0c:	e708      	b.n	8003920 <HAL_UART_IRQHandler+0x140>
 8003b0e:	2a00      	cmp	r2, #0
 8003b10:	db00      	blt.n	8003b14 <HAL_UART_IRQHandler+0x334>
 8003b12:	e705      	b.n	8003920 <HAL_UART_IRQHandler+0x140>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003b14:	0020      	movs	r0, r4
 8003b16:	f000 fdd6 	bl	80046c6 <HAL_UARTEx_RxFifoFullCallback>
    return;
 8003b1a:	e701      	b.n	8003920 <HAL_UART_IRQHandler+0x140>

08003b1c <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003b1c:	0001      	movs	r1, r0
{
 8003b1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint16_t uhMask = huart->Mask;
 8003b20:	0003      	movs	r3, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003b22:	318c      	adds	r1, #140	@ 0x8c
 8003b24:	680c      	ldr	r4, [r1, #0]
  uint16_t uhMask = huart->Mask;
 8003b26:	3360      	adds	r3, #96	@ 0x60
 8003b28:	881a      	ldrh	r2, [r3, #0]
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003b2a:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003b2c:	2c22      	cmp	r4, #34	@ 0x22
 8003b2e:	d157      	bne.n	8003be0 <UART_RxISR_8BIT+0xc4>
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003b32:	6d84      	ldr	r4, [r0, #88]	@ 0x58
 8003b34:	4013      	ands	r3, r2
    huart->pRxBuffPtr++;
    huart->RxXferCount--;
 8003b36:	0002      	movs	r2, r0
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003b38:	7023      	strb	r3, [r4, #0]
    huart->pRxBuffPtr++;
 8003b3a:	6d83      	ldr	r3, [r0, #88]	@ 0x58
    huart->RxXferCount--;
 8003b3c:	325e      	adds	r2, #94	@ 0x5e
    huart->pRxBuffPtr++;
 8003b3e:	3301      	adds	r3, #1
 8003b40:	6583      	str	r3, [r0, #88]	@ 0x58
    huart->RxXferCount--;
 8003b42:	8813      	ldrh	r3, [r2, #0]
 8003b44:	3b01      	subs	r3, #1
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	8013      	strh	r3, [r2, #0]

    if (huart->RxXferCount == 0U)
 8003b4a:	8813      	ldrh	r3, [r2, #0]
 8003b4c:	b29c      	uxth	r4, r3
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d142      	bne.n	8003bd8 <UART_RxISR_8BIT+0xbc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003b52:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b56:	3301      	adds	r3, #1
 8003b58:	f383 8810 	msr	PRIMASK, r3
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003b5c:	6805      	ldr	r5, [r0, #0]
 8003b5e:	4f23      	ldr	r7, [pc, #140]	@ (8003bec <UART_RxISR_8BIT+0xd0>)
 8003b60:	682a      	ldr	r2, [r5, #0]
 8003b62:	403a      	ands	r2, r7
 8003b64:	602a      	str	r2, [r5, #0]
 8003b66:	f386 8810 	msr	PRIMASK, r6
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003b6a:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b6e:	f383 8810 	msr	PRIMASK, r3

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b72:	6805      	ldr	r5, [r0, #0]
 8003b74:	68aa      	ldr	r2, [r5, #8]
 8003b76:	439a      	bics	r2, r3
 8003b78:	60aa      	str	r2, [r5, #8]
 8003b7a:	f386 8810 	msr	PRIMASK, r6

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003b7e:	2220      	movs	r2, #32
 8003b80:	600a      	str	r2, [r1, #0]

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003b82:	6802      	ldr	r2, [r0, #0]
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b84:	6704      	str	r4, [r0, #112]	@ 0x70
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003b86:	6852      	ldr	r2, [r2, #4]
      huart->RxISR = NULL;
 8003b88:	6744      	str	r4, [r0, #116]	@ 0x74
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003b8a:	0212      	lsls	r2, r2, #8
 8003b8c:	d50a      	bpl.n	8003ba4 <UART_RxISR_8BIT+0x88>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003b8e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b92:	f383 8810 	msr	PRIMASK, r3
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003b96:	6802      	ldr	r2, [r0, #0]
 8003b98:	4c15      	ldr	r4, [pc, #84]	@ (8003bf0 <UART_RxISR_8BIT+0xd4>)
 8003b9a:	6813      	ldr	r3, [r2, #0]
 8003b9c:	4023      	ands	r3, r4
 8003b9e:	6013      	str	r3, [r2, #0]
 8003ba0:	f381 8810 	msr	PRIMASK, r1
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ba4:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d117      	bne.n	8003bda <UART_RxISR_8BIT+0xbe>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003baa:	2200      	movs	r2, #0
 8003bac:	66c2      	str	r2, [r0, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003bae:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bb2:	f383 8810 	msr	PRIMASK, r3

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bb6:	6801      	ldr	r1, [r0, #0]
 8003bb8:	330f      	adds	r3, #15
 8003bba:	680a      	ldr	r2, [r1, #0]
 8003bbc:	439a      	bics	r2, r3
 8003bbe:	600a      	str	r2, [r1, #0]
 8003bc0:	f384 8810 	msr	PRIMASK, r4

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003bc4:	6802      	ldr	r2, [r0, #0]
 8003bc6:	69d1      	ldr	r1, [r2, #28]
 8003bc8:	4219      	tst	r1, r3
 8003bca:	d000      	beq.n	8003bce <UART_RxISR_8BIT+0xb2>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003bcc:	6213      	str	r3, [r2, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003bce:	0003      	movs	r3, r0
 8003bd0:	335c      	adds	r3, #92	@ 0x5c
 8003bd2:	8819      	ldrh	r1, [r3, #0]
 8003bd4:	f7fd ff78 	bl	8001ac8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003bd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        HAL_UART_RxCpltCallback(huart);
 8003bda:	f7fd ff5b 	bl	8001a94 <HAL_UART_RxCpltCallback>
 8003bde:	e7fb      	b.n	8003bd8 <UART_RxISR_8BIT+0xbc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003be0:	2208      	movs	r2, #8
 8003be2:	6999      	ldr	r1, [r3, #24]
 8003be4:	430a      	orrs	r2, r1
 8003be6:	619a      	str	r2, [r3, #24]
}
 8003be8:	e7f6      	b.n	8003bd8 <UART_RxISR_8BIT+0xbc>
 8003bea:	46c0      	nop			@ (mov r8, r8)
 8003bec:	fffffedf 	.word	0xfffffedf
 8003bf0:	fbffffff 	.word	0xfbffffff

08003bf4 <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003bf4:	0002      	movs	r2, r0
{
 8003bf6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint16_t uhMask = huart->Mask;
 8003bf8:	0003      	movs	r3, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003bfa:	328c      	adds	r2, #140	@ 0x8c
 8003bfc:	6811      	ldr	r1, [r2, #0]
  uint16_t uhMask = huart->Mask;
 8003bfe:	3360      	adds	r3, #96	@ 0x60
 8003c00:	881c      	ldrh	r4, [r3, #0]
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003c02:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c04:	2922      	cmp	r1, #34	@ 0x22
 8003c06:	d156      	bne.n	8003cb6 <UART_RxISR_16BIT+0xc2>
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003c08:	6a59      	ldr	r1, [r3, #36]	@ 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003c0a:	6d83      	ldr	r3, [r0, #88]	@ 0x58
    *tmp = (uint16_t)(uhdata & uhMask);
 8003c0c:	4021      	ands	r1, r4
 8003c0e:	8019      	strh	r1, [r3, #0]
    huart->pRxBuffPtr += 2U;
    huart->RxXferCount--;
 8003c10:	0001      	movs	r1, r0
    huart->pRxBuffPtr += 2U;
 8003c12:	3302      	adds	r3, #2
 8003c14:	6583      	str	r3, [r0, #88]	@ 0x58
    huart->RxXferCount--;
 8003c16:	315e      	adds	r1, #94	@ 0x5e
 8003c18:	880b      	ldrh	r3, [r1, #0]
 8003c1a:	3b01      	subs	r3, #1
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	800b      	strh	r3, [r1, #0]

    if (huart->RxXferCount == 0U)
 8003c20:	880b      	ldrh	r3, [r1, #0]
 8003c22:	b29c      	uxth	r4, r3
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d142      	bne.n	8003cae <UART_RxISR_16BIT+0xba>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003c28:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c2c:	3301      	adds	r3, #1
 8003c2e:	f383 8810 	msr	PRIMASK, r3
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003c32:	6805      	ldr	r5, [r0, #0]
 8003c34:	4f22      	ldr	r7, [pc, #136]	@ (8003cc0 <UART_RxISR_16BIT+0xcc>)
 8003c36:	6829      	ldr	r1, [r5, #0]
 8003c38:	4039      	ands	r1, r7
 8003c3a:	6029      	str	r1, [r5, #0]
 8003c3c:	f386 8810 	msr	PRIMASK, r6
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003c40:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c44:	f383 8810 	msr	PRIMASK, r3

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c48:	6805      	ldr	r5, [r0, #0]
 8003c4a:	68a9      	ldr	r1, [r5, #8]
 8003c4c:	4399      	bics	r1, r3
 8003c4e:	60a9      	str	r1, [r5, #8]
 8003c50:	f386 8810 	msr	PRIMASK, r6

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c54:	2120      	movs	r1, #32
 8003c56:	6011      	str	r1, [r2, #0]

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003c58:	6802      	ldr	r2, [r0, #0]
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c5a:	6704      	str	r4, [r0, #112]	@ 0x70
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003c5c:	6852      	ldr	r2, [r2, #4]
      huart->RxISR = NULL;
 8003c5e:	6744      	str	r4, [r0, #116]	@ 0x74
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003c60:	0212      	lsls	r2, r2, #8
 8003c62:	d50a      	bpl.n	8003c7a <UART_RxISR_16BIT+0x86>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003c64:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c68:	f383 8810 	msr	PRIMASK, r3
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003c6c:	6802      	ldr	r2, [r0, #0]
 8003c6e:	4c15      	ldr	r4, [pc, #84]	@ (8003cc4 <UART_RxISR_16BIT+0xd0>)
 8003c70:	6813      	ldr	r3, [r2, #0]
 8003c72:	4023      	ands	r3, r4
 8003c74:	6013      	str	r3, [r2, #0]
 8003c76:	f381 8810 	msr	PRIMASK, r1
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c7a:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d117      	bne.n	8003cb0 <UART_RxISR_16BIT+0xbc>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c80:	2200      	movs	r2, #0
 8003c82:	66c2      	str	r2, [r0, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003c84:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c88:	f383 8810 	msr	PRIMASK, r3

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c8c:	6801      	ldr	r1, [r0, #0]
 8003c8e:	330f      	adds	r3, #15
 8003c90:	680a      	ldr	r2, [r1, #0]
 8003c92:	439a      	bics	r2, r3
 8003c94:	600a      	str	r2, [r1, #0]
 8003c96:	f384 8810 	msr	PRIMASK, r4

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003c9a:	6802      	ldr	r2, [r0, #0]
 8003c9c:	69d1      	ldr	r1, [r2, #28]
 8003c9e:	4219      	tst	r1, r3
 8003ca0:	d000      	beq.n	8003ca4 <UART_RxISR_16BIT+0xb0>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003ca2:	6213      	str	r3, [r2, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ca4:	0003      	movs	r3, r0
 8003ca6:	335c      	adds	r3, #92	@ 0x5c
 8003ca8:	8819      	ldrh	r1, [r3, #0]
 8003caa:	f7fd ff0d 	bl	8001ac8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003cae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        HAL_UART_RxCpltCallback(huart);
 8003cb0:	f7fd fef0 	bl	8001a94 <HAL_UART_RxCpltCallback>
 8003cb4:	e7fb      	b.n	8003cae <UART_RxISR_16BIT+0xba>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003cb6:	2208      	movs	r2, #8
 8003cb8:	6999      	ldr	r1, [r3, #24]
 8003cba:	430a      	orrs	r2, r1
 8003cbc:	619a      	str	r2, [r3, #24]
}
 8003cbe:	e7f6      	b.n	8003cae <UART_RxISR_16BIT+0xba>
 8003cc0:	fffffedf 	.word	0xfffffedf
 8003cc4:	fbffffff 	.word	0xfbffffff

08003cc8 <UART_RxISR_8BIT_FIFOEN>:
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
  uint16_t  uhMask = huart->Mask;
 8003cc8:	0003      	movs	r3, r0
{
 8003cca:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint16_t  uhMask = huart->Mask;
 8003ccc:	3360      	adds	r3, #96	@ 0x60
 8003cce:	881b      	ldrh	r3, [r3, #0]
{
 8003cd0:	b085      	sub	sp, #20
  uint16_t  uhMask = huart->Mask;
 8003cd2:	9302      	str	r3, [sp, #8]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8003cd4:	6803      	ldr	r3, [r0, #0]
{
 8003cd6:	0004      	movs	r4, r0
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8003cd8:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	9203      	str	r2, [sp, #12]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8003cde:	689a      	ldr	r2, [r3, #8]
 8003ce0:	9201      	str	r2, [sp, #4]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ce2:	0002      	movs	r2, r0
 8003ce4:	328c      	adds	r2, #140	@ 0x8c
 8003ce6:	6812      	ldr	r2, [r2, #0]
 8003ce8:	2a22      	cmp	r2, #34	@ 0x22
 8003cea:	d000      	beq.n	8003cee <UART_RxISR_8BIT_FIFOEN+0x26>
 8003cec:	e0c2      	b.n	8003e74 <UART_RxISR_8BIT_FIFOEN+0x1ac>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8003cee:	0003      	movs	r3, r0
 8003cf0:	3368      	adds	r3, #104	@ 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003cf2:	881b      	ldrh	r3, [r3, #0]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d002      	beq.n	8003cfe <UART_RxISR_8BIT_FIFOEN+0x36>
 8003cf8:	2320      	movs	r3, #32
 8003cfa:	421d      	tst	r5, r3
 8003cfc:	d125      	bne.n	8003d4a <UART_RxISR_8BIT_FIFOEN+0x82>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8003cfe:	0023      	movs	r3, r4
 8003d00:	335e      	adds	r3, #94	@ 0x5e
 8003d02:	881b      	ldrh	r3, [r3, #0]
 8003d04:	b29a      	uxth	r2, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d01d      	beq.n	8003d46 <UART_RxISR_8BIT_FIFOEN+0x7e>
 8003d0a:	0023      	movs	r3, r4
 8003d0c:	3368      	adds	r3, #104	@ 0x68
 8003d0e:	881b      	ldrh	r3, [r3, #0]
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d918      	bls.n	8003d46 <UART_RxISR_8BIT_FIFOEN+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003d14:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d18:	2201      	movs	r2, #1
 8003d1a:	f382 8810 	msr	PRIMASK, r2
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003d1e:	6821      	ldr	r1, [r4, #0]
 8003d20:	4d57      	ldr	r5, [pc, #348]	@ (8003e80 <UART_RxISR_8BIT_FIFOEN+0x1b8>)
 8003d22:	688b      	ldr	r3, [r1, #8]
 8003d24:	402b      	ands	r3, r5
 8003d26:	608b      	str	r3, [r1, #8]
 8003d28:	f380 8810 	msr	PRIMASK, r0

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8003d2c:	4b55      	ldr	r3, [pc, #340]	@ (8003e84 <UART_RxISR_8BIT_FIFOEN+0x1bc>)
 8003d2e:	6763      	str	r3, [r4, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003d30:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d34:	f382 8810 	msr	PRIMASK, r2

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003d38:	2320      	movs	r3, #32
 8003d3a:	6822      	ldr	r2, [r4, #0]
 8003d3c:	6810      	ldr	r0, [r2, #0]
 8003d3e:	4303      	orrs	r3, r0
 8003d40:	6013      	str	r3, [r2, #0]
 8003d42:	f381 8810 	msr	PRIMASK, r1
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003d46:	b005      	add	sp, #20
 8003d48:	bdf0      	pop	{r4, r5, r6, r7, pc}
      huart->RxXferCount--;
 8003d4a:	0026      	movs	r6, r4
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003d4c:	6823      	ldr	r3, [r4, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003d4e:	9902      	ldr	r1, [sp, #8]
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003d50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003d52:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8003d54:	400b      	ands	r3, r1
 8003d56:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 8003d58:	6da3      	ldr	r3, [r4, #88]	@ 0x58
      huart->RxXferCount--;
 8003d5a:	365e      	adds	r6, #94	@ 0x5e
      huart->pRxBuffPtr++;
 8003d5c:	3301      	adds	r3, #1
 8003d5e:	65a3      	str	r3, [r4, #88]	@ 0x58
      huart->RxXferCount--;
 8003d60:	8833      	ldrh	r3, [r6, #0]
      isrflags = READ_REG(huart->Instance->ISR);
 8003d62:	6822      	ldr	r2, [r4, #0]
      huart->RxXferCount--;
 8003d64:	3b01      	subs	r3, #1
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	8033      	strh	r3, [r6, #0]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8003d6a:	2307      	movs	r3, #7
      isrflags = READ_REG(huart->Instance->ISR);
 8003d6c:	69d5      	ldr	r5, [r2, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8003d6e:	421d      	tst	r5, r3
 8003d70:	d02f      	beq.n	8003dd2 <UART_RxISR_8BIT_FIFOEN+0x10a>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003d72:	3b06      	subs	r3, #6
 8003d74:	421d      	tst	r5, r3
 8003d76:	d008      	beq.n	8003d8a <UART_RxISR_8BIT_FIFOEN+0xc2>
 8003d78:	9903      	ldr	r1, [sp, #12]
 8003d7a:	05c9      	lsls	r1, r1, #23
 8003d7c:	d505      	bpl.n	8003d8a <UART_RxISR_8BIT_FIFOEN+0xc2>
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d7e:	0021      	movs	r1, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003d80:	6213      	str	r3, [r2, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d82:	3190      	adds	r1, #144	@ 0x90
 8003d84:	6808      	ldr	r0, [r1, #0]
 8003d86:	4303      	orrs	r3, r0
 8003d88:	600b      	str	r3, [r1, #0]
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003d8a:	2302      	movs	r3, #2
 8003d8c:	421d      	tst	r5, r3
 8003d8e:	d009      	beq.n	8003da4 <UART_RxISR_8BIT_FIFOEN+0xdc>
 8003d90:	9901      	ldr	r1, [sp, #4]
 8003d92:	07c9      	lsls	r1, r1, #31
 8003d94:	d506      	bpl.n	8003da4 <UART_RxISR_8BIT_FIFOEN+0xdc>
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d96:	0021      	movs	r1, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003d98:	6213      	str	r3, [r2, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d9a:	3190      	adds	r1, #144	@ 0x90
 8003d9c:	6808      	ldr	r0, [r1, #0]
 8003d9e:	18db      	adds	r3, r3, r3
 8003da0:	4303      	orrs	r3, r0
 8003da2:	600b      	str	r3, [r1, #0]
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003da4:	2304      	movs	r3, #4
 8003da6:	421d      	tst	r5, r3
 8003da8:	d009      	beq.n	8003dbe <UART_RxISR_8BIT_FIFOEN+0xf6>
 8003daa:	9901      	ldr	r1, [sp, #4]
 8003dac:	07c9      	lsls	r1, r1, #31
 8003dae:	d506      	bpl.n	8003dbe <UART_RxISR_8BIT_FIFOEN+0xf6>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003db0:	6213      	str	r3, [r2, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003db2:	0022      	movs	r2, r4
 8003db4:	3290      	adds	r2, #144	@ 0x90
 8003db6:	6811      	ldr	r1, [r2, #0]
 8003db8:	3b02      	subs	r3, #2
 8003dba:	430b      	orrs	r3, r1
 8003dbc:	6013      	str	r3, [r2, #0]
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003dbe:	0027      	movs	r7, r4
 8003dc0:	3790      	adds	r7, #144	@ 0x90
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d004      	beq.n	8003dd2 <UART_RxISR_8BIT_FIFOEN+0x10a>
          HAL_UART_ErrorCallback(huart);
 8003dc8:	0020      	movs	r0, r4
 8003dca:	f7ff fcfc 	bl	80037c6 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	603b      	str	r3, [r7, #0]
      if (huart->RxXferCount == 0U)
 8003dd2:	8833      	ldrh	r3, [r6, #0]
 8003dd4:	b299      	uxth	r1, r3
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d000      	beq.n	8003ddc <UART_RxISR_8BIT_FIFOEN+0x114>
 8003dda:	e78d      	b.n	8003cf8 <UART_RxISR_8BIT_FIFOEN+0x30>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003ddc:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003de0:	3301      	adds	r3, #1
 8003de2:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003de6:	6820      	ldr	r0, [r4, #0]
 8003de8:	4f27      	ldr	r7, [pc, #156]	@ (8003e88 <UART_RxISR_8BIT_FIFOEN+0x1c0>)
 8003dea:	6802      	ldr	r2, [r0, #0]
 8003dec:	403a      	ands	r2, r7
 8003dee:	6002      	str	r2, [r0, #0]
 8003df0:	f386 8810 	msr	PRIMASK, r6
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003df4:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003df8:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003dfc:	6820      	ldr	r0, [r4, #0]
 8003dfe:	4f23      	ldr	r7, [pc, #140]	@ (8003e8c <UART_RxISR_8BIT_FIFOEN+0x1c4>)
 8003e00:	6882      	ldr	r2, [r0, #8]
 8003e02:	403a      	ands	r2, r7
 8003e04:	6082      	str	r2, [r0, #8]
 8003e06:	f386 8810 	msr	PRIMASK, r6
        huart->RxState = HAL_UART_STATE_READY;
 8003e0a:	0022      	movs	r2, r4
 8003e0c:	2020      	movs	r0, #32
 8003e0e:	328c      	adds	r2, #140	@ 0x8c
 8003e10:	6010      	str	r0, [r2, #0]
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003e12:	6822      	ldr	r2, [r4, #0]
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e14:	6721      	str	r1, [r4, #112]	@ 0x70
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003e16:	6852      	ldr	r2, [r2, #4]
        huart->RxISR = NULL;
 8003e18:	6761      	str	r1, [r4, #116]	@ 0x74
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003e1a:	0212      	lsls	r2, r2, #8
 8003e1c:	d50a      	bpl.n	8003e34 <UART_RxISR_8BIT_FIFOEN+0x16c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003e1e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e22:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003e26:	6822      	ldr	r2, [r4, #0]
 8003e28:	4819      	ldr	r0, [pc, #100]	@ (8003e90 <UART_RxISR_8BIT_FIFOEN+0x1c8>)
 8003e2a:	6813      	ldr	r3, [r2, #0]
 8003e2c:	4003      	ands	r3, r0
 8003e2e:	6013      	str	r3, [r2, #0]
 8003e30:	f381 8810 	msr	PRIMASK, r1
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e34:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d118      	bne.n	8003e6c <UART_RxISR_8BIT_FIFOEN+0x1a4>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	66e2      	str	r2, [r4, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003e3e:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e42:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e46:	6821      	ldr	r1, [r4, #0]
 8003e48:	330f      	adds	r3, #15
 8003e4a:	680a      	ldr	r2, [r1, #0]
 8003e4c:	439a      	bics	r2, r3
 8003e4e:	600a      	str	r2, [r1, #0]
 8003e50:	f380 8810 	msr	PRIMASK, r0
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003e54:	6822      	ldr	r2, [r4, #0]
 8003e56:	69d1      	ldr	r1, [r2, #28]
 8003e58:	4219      	tst	r1, r3
 8003e5a:	d000      	beq.n	8003e5e <UART_RxISR_8BIT_FIFOEN+0x196>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003e5c:	6213      	str	r3, [r2, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e5e:	0023      	movs	r3, r4
 8003e60:	335c      	adds	r3, #92	@ 0x5c
 8003e62:	0020      	movs	r0, r4
 8003e64:	8819      	ldrh	r1, [r3, #0]
 8003e66:	f7fd fe2f 	bl	8001ac8 <HAL_UARTEx_RxEventCallback>
 8003e6a:	e745      	b.n	8003cf8 <UART_RxISR_8BIT_FIFOEN+0x30>
          HAL_UART_RxCpltCallback(huart);
 8003e6c:	0020      	movs	r0, r4
 8003e6e:	f7fd fe11 	bl	8001a94 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003e72:	e741      	b.n	8003cf8 <UART_RxISR_8BIT_FIFOEN+0x30>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003e74:	2208      	movs	r2, #8
 8003e76:	6999      	ldr	r1, [r3, #24]
 8003e78:	430a      	orrs	r2, r1
 8003e7a:	619a      	str	r2, [r3, #24]
}
 8003e7c:	e763      	b.n	8003d46 <UART_RxISR_8BIT_FIFOEN+0x7e>
 8003e7e:	46c0      	nop			@ (mov r8, r8)
 8003e80:	efffffff 	.word	0xefffffff
 8003e84:	08003b1d 	.word	0x08003b1d
 8003e88:	fffffeff 	.word	0xfffffeff
 8003e8c:	effffffe 	.word	0xeffffffe
 8003e90:	fbffffff 	.word	0xfbffffff

08003e94 <UART_RxISR_16BIT_FIFOEN>:
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8003e94:	0003      	movs	r3, r0
{
 8003e96:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint16_t  uhMask = huart->Mask;
 8003e98:	3360      	adds	r3, #96	@ 0x60
 8003e9a:	881b      	ldrh	r3, [r3, #0]
{
 8003e9c:	b085      	sub	sp, #20
  uint16_t  uhMask = huart->Mask;
 8003e9e:	9302      	str	r3, [sp, #8]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8003ea0:	6803      	ldr	r3, [r0, #0]
{
 8003ea2:	0004      	movs	r4, r0
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8003ea4:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	9203      	str	r2, [sp, #12]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8003eaa:	689a      	ldr	r2, [r3, #8]
 8003eac:	9201      	str	r2, [sp, #4]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003eae:	0002      	movs	r2, r0
 8003eb0:	328c      	adds	r2, #140	@ 0x8c
 8003eb2:	6812      	ldr	r2, [r2, #0]
 8003eb4:	2a22      	cmp	r2, #34	@ 0x22
 8003eb6:	d000      	beq.n	8003eba <UART_RxISR_16BIT_FIFOEN+0x26>
 8003eb8:	e0c0      	b.n	800403c <UART_RxISR_16BIT_FIFOEN+0x1a8>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8003eba:	0003      	movs	r3, r0
 8003ebc:	3368      	adds	r3, #104	@ 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003ebe:	881b      	ldrh	r3, [r3, #0]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d002      	beq.n	8003eca <UART_RxISR_16BIT_FIFOEN+0x36>
 8003ec4:	2320      	movs	r3, #32
 8003ec6:	421d      	tst	r5, r3
 8003ec8:	d125      	bne.n	8003f16 <UART_RxISR_16BIT_FIFOEN+0x82>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8003eca:	0023      	movs	r3, r4
 8003ecc:	335e      	adds	r3, #94	@ 0x5e
 8003ece:	881b      	ldrh	r3, [r3, #0]
 8003ed0:	b29a      	uxth	r2, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d01d      	beq.n	8003f12 <UART_RxISR_16BIT_FIFOEN+0x7e>
 8003ed6:	0023      	movs	r3, r4
 8003ed8:	3368      	adds	r3, #104	@ 0x68
 8003eda:	881b      	ldrh	r3, [r3, #0]
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d918      	bls.n	8003f12 <UART_RxISR_16BIT_FIFOEN+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003ee0:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	f382 8810 	msr	PRIMASK, r2
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003eea:	6821      	ldr	r1, [r4, #0]
 8003eec:	4d56      	ldr	r5, [pc, #344]	@ (8004048 <UART_RxISR_16BIT_FIFOEN+0x1b4>)
 8003eee:	688b      	ldr	r3, [r1, #8]
 8003ef0:	402b      	ands	r3, r5
 8003ef2:	608b      	str	r3, [r1, #8]
 8003ef4:	f380 8810 	msr	PRIMASK, r0

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8003ef8:	4b54      	ldr	r3, [pc, #336]	@ (800404c <UART_RxISR_16BIT_FIFOEN+0x1b8>)
 8003efa:	6763      	str	r3, [r4, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003efc:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f00:	f382 8810 	msr	PRIMASK, r2

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003f04:	2320      	movs	r3, #32
 8003f06:	6822      	ldr	r2, [r4, #0]
 8003f08:	6810      	ldr	r0, [r2, #0]
 8003f0a:	4303      	orrs	r3, r0
 8003f0c:	6013      	str	r3, [r2, #0]
 8003f0e:	f381 8810 	msr	PRIMASK, r1
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003f12:	b005      	add	sp, #20
 8003f14:	bdf0      	pop	{r4, r5, r6, r7, pc}
      huart->RxXferCount--;
 8003f16:	0026      	movs	r6, r4
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003f18:	6823      	ldr	r3, [r4, #0]
      *tmp = (uint16_t)(uhdata & uhMask);
 8003f1a:	9802      	ldr	r0, [sp, #8]
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003f1c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003f1e:	6da2      	ldr	r2, [r4, #88]	@ 0x58
      *tmp = (uint16_t)(uhdata & uhMask);
 8003f20:	4001      	ands	r1, r0
 8003f22:	8011      	strh	r1, [r2, #0]
      huart->pRxBuffPtr += 2U;
 8003f24:	3202      	adds	r2, #2
 8003f26:	65a2      	str	r2, [r4, #88]	@ 0x58
      huart->RxXferCount--;
 8003f28:	365e      	adds	r6, #94	@ 0x5e
 8003f2a:	8832      	ldrh	r2, [r6, #0]
 8003f2c:	3a01      	subs	r2, #1
 8003f2e:	b292      	uxth	r2, r2
 8003f30:	8032      	strh	r2, [r6, #0]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8003f32:	2207      	movs	r2, #7
      isrflags = READ_REG(huart->Instance->ISR);
 8003f34:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8003f36:	4215      	tst	r5, r2
 8003f38:	d02f      	beq.n	8003f9a <UART_RxISR_16BIT_FIFOEN+0x106>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003f3a:	3a06      	subs	r2, #6
 8003f3c:	4215      	tst	r5, r2
 8003f3e:	d008      	beq.n	8003f52 <UART_RxISR_16BIT_FIFOEN+0xbe>
 8003f40:	9903      	ldr	r1, [sp, #12]
 8003f42:	05c9      	lsls	r1, r1, #23
 8003f44:	d505      	bpl.n	8003f52 <UART_RxISR_16BIT_FIFOEN+0xbe>
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f46:	0021      	movs	r1, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003f48:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f4a:	3190      	adds	r1, #144	@ 0x90
 8003f4c:	6808      	ldr	r0, [r1, #0]
 8003f4e:	4302      	orrs	r2, r0
 8003f50:	600a      	str	r2, [r1, #0]
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f52:	2202      	movs	r2, #2
 8003f54:	4215      	tst	r5, r2
 8003f56:	d009      	beq.n	8003f6c <UART_RxISR_16BIT_FIFOEN+0xd8>
 8003f58:	9901      	ldr	r1, [sp, #4]
 8003f5a:	07c9      	lsls	r1, r1, #31
 8003f5c:	d506      	bpl.n	8003f6c <UART_RxISR_16BIT_FIFOEN+0xd8>
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f5e:	0021      	movs	r1, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003f60:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f62:	3190      	adds	r1, #144	@ 0x90
 8003f64:	6808      	ldr	r0, [r1, #0]
 8003f66:	1892      	adds	r2, r2, r2
 8003f68:	4302      	orrs	r2, r0
 8003f6a:	600a      	str	r2, [r1, #0]
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f6c:	2204      	movs	r2, #4
 8003f6e:	4215      	tst	r5, r2
 8003f70:	d009      	beq.n	8003f86 <UART_RxISR_16BIT_FIFOEN+0xf2>
 8003f72:	9901      	ldr	r1, [sp, #4]
 8003f74:	07c9      	lsls	r1, r1, #31
 8003f76:	d506      	bpl.n	8003f86 <UART_RxISR_16BIT_FIFOEN+0xf2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003f78:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f7a:	0022      	movs	r2, r4
 8003f7c:	2302      	movs	r3, #2
 8003f7e:	3290      	adds	r2, #144	@ 0x90
 8003f80:	6811      	ldr	r1, [r2, #0]
 8003f82:	430b      	orrs	r3, r1
 8003f84:	6013      	str	r3, [r2, #0]
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f86:	0027      	movs	r7, r4
 8003f88:	3790      	adds	r7, #144	@ 0x90
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d004      	beq.n	8003f9a <UART_RxISR_16BIT_FIFOEN+0x106>
          HAL_UART_ErrorCallback(huart);
 8003f90:	0020      	movs	r0, r4
 8003f92:	f7ff fc18 	bl	80037c6 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f96:	2300      	movs	r3, #0
 8003f98:	603b      	str	r3, [r7, #0]
      if (huart->RxXferCount == 0U)
 8003f9a:	8833      	ldrh	r3, [r6, #0]
 8003f9c:	b299      	uxth	r1, r3
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d000      	beq.n	8003fa4 <UART_RxISR_16BIT_FIFOEN+0x110>
 8003fa2:	e78f      	b.n	8003ec4 <UART_RxISR_16BIT_FIFOEN+0x30>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003fa4:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fa8:	3301      	adds	r3, #1
 8003faa:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003fae:	6820      	ldr	r0, [r4, #0]
 8003fb0:	4f27      	ldr	r7, [pc, #156]	@ (8004050 <UART_RxISR_16BIT_FIFOEN+0x1bc>)
 8003fb2:	6802      	ldr	r2, [r0, #0]
 8003fb4:	403a      	ands	r2, r7
 8003fb6:	6002      	str	r2, [r0, #0]
 8003fb8:	f386 8810 	msr	PRIMASK, r6
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003fbc:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fc0:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003fc4:	6820      	ldr	r0, [r4, #0]
 8003fc6:	4f23      	ldr	r7, [pc, #140]	@ (8004054 <UART_RxISR_16BIT_FIFOEN+0x1c0>)
 8003fc8:	6882      	ldr	r2, [r0, #8]
 8003fca:	403a      	ands	r2, r7
 8003fcc:	6082      	str	r2, [r0, #8]
 8003fce:	f386 8810 	msr	PRIMASK, r6
        huart->RxState = HAL_UART_STATE_READY;
 8003fd2:	0022      	movs	r2, r4
 8003fd4:	2020      	movs	r0, #32
 8003fd6:	328c      	adds	r2, #140	@ 0x8c
 8003fd8:	6010      	str	r0, [r2, #0]
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003fda:	6822      	ldr	r2, [r4, #0]
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fdc:	6721      	str	r1, [r4, #112]	@ 0x70
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003fde:	6852      	ldr	r2, [r2, #4]
        huart->RxISR = NULL;
 8003fe0:	6761      	str	r1, [r4, #116]	@ 0x74
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003fe2:	0212      	lsls	r2, r2, #8
 8003fe4:	d50a      	bpl.n	8003ffc <UART_RxISR_16BIT_FIFOEN+0x168>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003fe6:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fea:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003fee:	6822      	ldr	r2, [r4, #0]
 8003ff0:	4819      	ldr	r0, [pc, #100]	@ (8004058 <UART_RxISR_16BIT_FIFOEN+0x1c4>)
 8003ff2:	6813      	ldr	r3, [r2, #0]
 8003ff4:	4003      	ands	r3, r0
 8003ff6:	6013      	str	r3, [r2, #0]
 8003ff8:	f381 8810 	msr	PRIMASK, r1
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ffc:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d118      	bne.n	8004034 <UART_RxISR_16BIT_FIFOEN+0x1a0>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004002:	2200      	movs	r2, #0
 8004004:	66e2      	str	r2, [r4, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004006:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800400a:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800400e:	6821      	ldr	r1, [r4, #0]
 8004010:	330f      	adds	r3, #15
 8004012:	680a      	ldr	r2, [r1, #0]
 8004014:	439a      	bics	r2, r3
 8004016:	600a      	str	r2, [r1, #0]
 8004018:	f380 8810 	msr	PRIMASK, r0
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800401c:	6822      	ldr	r2, [r4, #0]
 800401e:	69d1      	ldr	r1, [r2, #28]
 8004020:	4219      	tst	r1, r3
 8004022:	d000      	beq.n	8004026 <UART_RxISR_16BIT_FIFOEN+0x192>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004024:	6213      	str	r3, [r2, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004026:	0023      	movs	r3, r4
 8004028:	335c      	adds	r3, #92	@ 0x5c
 800402a:	0020      	movs	r0, r4
 800402c:	8819      	ldrh	r1, [r3, #0]
 800402e:	f7fd fd4b 	bl	8001ac8 <HAL_UARTEx_RxEventCallback>
 8004032:	e747      	b.n	8003ec4 <UART_RxISR_16BIT_FIFOEN+0x30>
          HAL_UART_RxCpltCallback(huart);
 8004034:	0020      	movs	r0, r4
 8004036:	f7fd fd2d 	bl	8001a94 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800403a:	e743      	b.n	8003ec4 <UART_RxISR_16BIT_FIFOEN+0x30>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800403c:	2208      	movs	r2, #8
 800403e:	6999      	ldr	r1, [r3, #24]
 8004040:	430a      	orrs	r2, r1
 8004042:	619a      	str	r2, [r3, #24]
}
 8004044:	e765      	b.n	8003f12 <UART_RxISR_16BIT_FIFOEN+0x7e>
 8004046:	46c0      	nop			@ (mov r8, r8)
 8004048:	efffffff 	.word	0xefffffff
 800404c:	08003bf5 	.word	0x08003bf5
 8004050:	fffffeff 	.word	0xfffffeff
 8004054:	effffffe 	.word	0xeffffffe
 8004058:	fbffffff 	.word	0xfbffffff

0800405c <UART_SetConfig>:
{
 800405c:	b570      	push	{r4, r5, r6, lr}
 800405e:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004060:	6925      	ldr	r5, [r4, #16]
 8004062:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004064:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004066:	4329      	orrs	r1, r5
 8004068:	6965      	ldr	r5, [r4, #20]
 800406a:	69c2      	ldr	r2, [r0, #28]
 800406c:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800406e:	6818      	ldr	r0, [r3, #0]
 8004070:	4d50      	ldr	r5, [pc, #320]	@ (80041b4 <UART_SetConfig+0x158>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004072:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004074:	4028      	ands	r0, r5
 8004076:	4301      	orrs	r1, r0
 8004078:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800407a:	6859      	ldr	r1, [r3, #4]
 800407c:	484e      	ldr	r0, [pc, #312]	@ (80041b8 <UART_SetConfig+0x15c>)
  tmpreg |= huart->Init.OneBitSampling;
 800407e:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004080:	4001      	ands	r1, r0
 8004082:	68e0      	ldr	r0, [r4, #12]
 8004084:	4301      	orrs	r1, r0
 8004086:	6059      	str	r1, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004088:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800408a:	6898      	ldr	r0, [r3, #8]
  tmpreg |= huart->Init.OneBitSampling;
 800408c:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800408e:	4d4b      	ldr	r5, [pc, #300]	@ (80041bc <UART_SetConfig+0x160>)
 8004090:	4028      	ands	r0, r5
 8004092:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004094:	200f      	movs	r0, #15
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004096:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004098:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800409a:	4381      	bics	r1, r0
 800409c:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800409e:	4301      	orrs	r1, r0
 80040a0:	62d9      	str	r1, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80040a2:	4947      	ldr	r1, [pc, #284]	@ (80041c0 <UART_SetConfig+0x164>)
 80040a4:	428b      	cmp	r3, r1
 80040a6:	d115      	bne.n	80040d4 <UART_SetConfig+0x78>
 80040a8:	2103      	movs	r1, #3
 80040aa:	4b46      	ldr	r3, [pc, #280]	@ (80041c4 <UART_SetConfig+0x168>)
 80040ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040ae:	400b      	ands	r3, r1
 80040b0:	3b01      	subs	r3, #1
 80040b2:	2b02      	cmp	r3, #2
 80040b4:	d86f      	bhi.n	8004196 <UART_SetConfig+0x13a>
 80040b6:	4944      	ldr	r1, [pc, #272]	@ (80041c8 <UART_SetConfig+0x16c>)
 80040b8:	5cc8      	ldrb	r0, [r1, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040ba:	2380      	movs	r3, #128	@ 0x80
 80040bc:	021b      	lsls	r3, r3, #8
 80040be:	429a      	cmp	r2, r3
 80040c0:	d137      	bne.n	8004132 <UART_SetConfig+0xd6>
    switch (clocksource)
 80040c2:	2808      	cmp	r0, #8
 80040c4:	d865      	bhi.n	8004192 <UART_SetConfig+0x136>
 80040c6:	f7fc f827 	bl	8000118 <__gnu_thumb1_case_uqi>
 80040ca:	646a      	.short	0x646a
 80040cc:	6431640b 	.word	0x6431640b
 80040d0:	6464      	.short	0x6464
 80040d2:	14          	.byte	0x14
 80040d3:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 80040d4:	493d      	ldr	r1, [pc, #244]	@ (80041cc <UART_SetConfig+0x170>)
 80040d6:	185b      	adds	r3, r3, r1
 80040d8:	1e59      	subs	r1, r3, #1
 80040da:	418b      	sbcs	r3, r1
 80040dc:	0118      	lsls	r0, r3, #4
 80040de:	e7ec      	b.n	80040ba <UART_SetConfig+0x5e>
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 80040e0:	4b38      	ldr	r3, [pc, #224]	@ (80041c4 <UART_SetConfig+0x168>)
 80040e2:	483b      	ldr	r0, [pc, #236]	@ (80041d0 <UART_SetConfig+0x174>)
 80040e4:	6819      	ldr	r1, [r3, #0]
 80040e6:	0609      	lsls	r1, r1, #24
 80040e8:	0f49      	lsrs	r1, r1, #29
 80040ea:	3101      	adds	r1, #1
 80040ec:	f7fc f828 	bl	8000140 <__udivsi3>
 80040f0:	0002      	movs	r2, r0
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80040f2:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80040f4:	4b37      	ldr	r3, [pc, #220]	@ (80041d4 <UART_SetConfig+0x178>)
 80040f6:	0049      	lsls	r1, r1, #1
 80040f8:	0010      	movs	r0, r2
 80040fa:	5ac9      	ldrh	r1, [r1, r3]
 80040fc:	f7fc f820 	bl	8000140 <__udivsi3>
 8004100:	6865      	ldr	r5, [r4, #4]
 8004102:	0040      	lsls	r0, r0, #1
 8004104:	086b      	lsrs	r3, r5, #1
 8004106:	18c0      	adds	r0, r0, r3
 8004108:	0029      	movs	r1, r5
 800410a:	f7fc f819 	bl	8000140 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800410e:	0002      	movs	r2, r0
 8004110:	4b31      	ldr	r3, [pc, #196]	@ (80041d8 <UART_SetConfig+0x17c>)
 8004112:	3a10      	subs	r2, #16
 8004114:	429a      	cmp	r2, r3
 8004116:	d83c      	bhi.n	8004192 <UART_SetConfig+0x136>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004118:	230f      	movs	r3, #15
 800411a:	0002      	movs	r2, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800411c:	0700      	lsls	r0, r0, #28
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800411e:	439a      	bics	r2, r3
 8004120:	b293      	uxth	r3, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004122:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 8004124:	6822      	ldr	r2, [r4, #0]
 8004126:	4303      	orrs	r3, r0
 8004128:	60d3      	str	r3, [r2, #12]
 800412a:	e03c      	b.n	80041a6 <UART_SetConfig+0x14a>
        pclk = HAL_RCC_GetSysClockFreq();
 800412c:	f7fe fdb4 	bl	8002c98 <HAL_RCC_GetSysClockFreq>
 8004130:	e037      	b.n	80041a2 <UART_SetConfig+0x146>
    switch (clocksource)
 8004132:	2808      	cmp	r0, #8
 8004134:	d82d      	bhi.n	8004192 <UART_SetConfig+0x136>
 8004136:	f7fb ffef 	bl	8000118 <__gnu_thumb1_case_uqi>
 800413a:	2c05      	.short	0x2c05
 800413c:	2c262c0a 	.word	0x2c262c0a
 8004140:	2c2c      	.short	0x2c2c
 8004142:	29          	.byte	0x29
 8004143:	00          	.byte	0x00
        pclk = HAL_RCC_GetPCLK1Freq();
 8004144:	f7fe fe80 	bl	8002e48 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8004148:	2800      	cmp	r0, #0
 800414a:	d02c      	beq.n	80041a6 <UART_SetConfig+0x14a>
 800414c:	e007      	b.n	800415e <UART_SetConfig+0x102>
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 800414e:	4b1d      	ldr	r3, [pc, #116]	@ (80041c4 <UART_SetConfig+0x168>)
 8004150:	481f      	ldr	r0, [pc, #124]	@ (80041d0 <UART_SetConfig+0x174>)
 8004152:	6819      	ldr	r1, [r3, #0]
 8004154:	0609      	lsls	r1, r1, #24
 8004156:	0f49      	lsrs	r1, r1, #29
 8004158:	3101      	adds	r1, #1
 800415a:	f7fb fff1 	bl	8000140 <__udivsi3>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800415e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8004160:	4b1c      	ldr	r3, [pc, #112]	@ (80041d4 <UART_SetConfig+0x178>)
 8004162:	0052      	lsls	r2, r2, #1
 8004164:	5ad1      	ldrh	r1, [r2, r3]
 8004166:	f7fb ffeb 	bl	8000140 <__udivsi3>
 800416a:	6865      	ldr	r5, [r4, #4]
 800416c:	086b      	lsrs	r3, r5, #1
 800416e:	18c0      	adds	r0, r0, r3
 8004170:	0029      	movs	r1, r5
 8004172:	f7fb ffe5 	bl	8000140 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004176:	0002      	movs	r2, r0
 8004178:	4b17      	ldr	r3, [pc, #92]	@ (80041d8 <UART_SetConfig+0x17c>)
 800417a:	3a10      	subs	r2, #16
 800417c:	429a      	cmp	r2, r3
 800417e:	d808      	bhi.n	8004192 <UART_SetConfig+0x136>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004180:	6823      	ldr	r3, [r4, #0]
 8004182:	60d8      	str	r0, [r3, #12]
 8004184:	e00f      	b.n	80041a6 <UART_SetConfig+0x14a>
        pclk = HAL_RCC_GetSysClockFreq();
 8004186:	f7fe fd87 	bl	8002c98 <HAL_RCC_GetSysClockFreq>
        break;
 800418a:	e7dd      	b.n	8004148 <UART_SetConfig+0xec>
    switch (clocksource)
 800418c:	2080      	movs	r0, #128	@ 0x80
 800418e:	0200      	lsls	r0, r0, #8
 8004190:	e7e5      	b.n	800415e <UART_SetConfig+0x102>
        ret = HAL_ERROR;
 8004192:	2001      	movs	r0, #1
 8004194:	e008      	b.n	80041a8 <UART_SetConfig+0x14c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004196:	2380      	movs	r3, #128	@ 0x80
 8004198:	021b      	lsls	r3, r3, #8
 800419a:	429a      	cmp	r2, r3
 800419c:	d1d2      	bne.n	8004144 <UART_SetConfig+0xe8>
        pclk = HAL_RCC_GetPCLK1Freq();
 800419e:	f7fe fe53 	bl	8002e48 <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 80041a2:	1e02      	subs	r2, r0, #0
    if (pclk != 0U)
 80041a4:	d1a5      	bne.n	80040f2 <UART_SetConfig+0x96>
    switch (clocksource)
 80041a6:	2000      	movs	r0, #0
  huart->NbRxDataToProcess = 1;
 80041a8:	4b0c      	ldr	r3, [pc, #48]	@ (80041dc <UART_SetConfig+0x180>)
 80041aa:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
 80041ac:	2300      	movs	r3, #0
 80041ae:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->TxISR = NULL;
 80041b0:	67a3      	str	r3, [r4, #120]	@ 0x78
}
 80041b2:	bd70      	pop	{r4, r5, r6, pc}
 80041b4:	cfff69f3 	.word	0xcfff69f3
 80041b8:	ffffcfff 	.word	0xffffcfff
 80041bc:	11fff4ff 	.word	0x11fff4ff
 80041c0:	40013800 	.word	0x40013800
 80041c4:	40021000 	.word	0x40021000
 80041c8:	0800592c 	.word	0x0800592c
 80041cc:	bfffbc00 	.word	0xbfffbc00
 80041d0:	02dc6c00 	.word	0x02dc6c00
 80041d4:	08005930 	.word	0x08005930
 80041d8:	0000ffef 	.word	0x0000ffef
 80041dc:	00010001 	.word	0x00010001

080041e0 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80041e0:	6a83      	ldr	r3, [r0, #40]	@ 0x28
{
 80041e2:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80041e4:	071a      	lsls	r2, r3, #28
 80041e6:	d506      	bpl.n	80041f6 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80041e8:	6801      	ldr	r1, [r0, #0]
 80041ea:	4c28      	ldr	r4, [pc, #160]	@ (800428c <UART_AdvFeatureConfig+0xac>)
 80041ec:	684a      	ldr	r2, [r1, #4]
 80041ee:	4022      	ands	r2, r4
 80041f0:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 80041f2:	4322      	orrs	r2, r4
 80041f4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80041f6:	07da      	lsls	r2, r3, #31
 80041f8:	d506      	bpl.n	8004208 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80041fa:	6801      	ldr	r1, [r0, #0]
 80041fc:	4c24      	ldr	r4, [pc, #144]	@ (8004290 <UART_AdvFeatureConfig+0xb0>)
 80041fe:	684a      	ldr	r2, [r1, #4]
 8004200:	4022      	ands	r2, r4
 8004202:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8004204:	4322      	orrs	r2, r4
 8004206:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004208:	079a      	lsls	r2, r3, #30
 800420a:	d506      	bpl.n	800421a <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800420c:	6801      	ldr	r1, [r0, #0]
 800420e:	4c21      	ldr	r4, [pc, #132]	@ (8004294 <UART_AdvFeatureConfig+0xb4>)
 8004210:	684a      	ldr	r2, [r1, #4]
 8004212:	4022      	ands	r2, r4
 8004214:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8004216:	4322      	orrs	r2, r4
 8004218:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800421a:	075a      	lsls	r2, r3, #29
 800421c:	d506      	bpl.n	800422c <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800421e:	6801      	ldr	r1, [r0, #0]
 8004220:	4c1d      	ldr	r4, [pc, #116]	@ (8004298 <UART_AdvFeatureConfig+0xb8>)
 8004222:	684a      	ldr	r2, [r1, #4]
 8004224:	4022      	ands	r2, r4
 8004226:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8004228:	4322      	orrs	r2, r4
 800422a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800422c:	06da      	lsls	r2, r3, #27
 800422e:	d506      	bpl.n	800423e <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004230:	6801      	ldr	r1, [r0, #0]
 8004232:	4c1a      	ldr	r4, [pc, #104]	@ (800429c <UART_AdvFeatureConfig+0xbc>)
 8004234:	688a      	ldr	r2, [r1, #8]
 8004236:	4022      	ands	r2, r4
 8004238:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 800423a:	4322      	orrs	r2, r4
 800423c:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800423e:	069a      	lsls	r2, r3, #26
 8004240:	d506      	bpl.n	8004250 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004242:	6801      	ldr	r1, [r0, #0]
 8004244:	4c16      	ldr	r4, [pc, #88]	@ (80042a0 <UART_AdvFeatureConfig+0xc0>)
 8004246:	688a      	ldr	r2, [r1, #8]
 8004248:	4022      	ands	r2, r4
 800424a:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 800424c:	4322      	orrs	r2, r4
 800424e:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004250:	065a      	lsls	r2, r3, #25
 8004252:	d510      	bpl.n	8004276 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004254:	6801      	ldr	r1, [r0, #0]
 8004256:	4d13      	ldr	r5, [pc, #76]	@ (80042a4 <UART_AdvFeatureConfig+0xc4>)
 8004258:	684a      	ldr	r2, [r1, #4]
 800425a:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 800425c:	402a      	ands	r2, r5
 800425e:	4322      	orrs	r2, r4
 8004260:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004262:	2280      	movs	r2, #128	@ 0x80
 8004264:	0352      	lsls	r2, r2, #13
 8004266:	4294      	cmp	r4, r2
 8004268:	d105      	bne.n	8004276 <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800426a:	684a      	ldr	r2, [r1, #4]
 800426c:	4c0e      	ldr	r4, [pc, #56]	@ (80042a8 <UART_AdvFeatureConfig+0xc8>)
 800426e:	4022      	ands	r2, r4
 8004270:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 8004272:	4322      	orrs	r2, r4
 8004274:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004276:	061b      	lsls	r3, r3, #24
 8004278:	d506      	bpl.n	8004288 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800427a:	6802      	ldr	r2, [r0, #0]
 800427c:	490b      	ldr	r1, [pc, #44]	@ (80042ac <UART_AdvFeatureConfig+0xcc>)
 800427e:	6853      	ldr	r3, [r2, #4]
 8004280:	400b      	ands	r3, r1
 8004282:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8004284:	430b      	orrs	r3, r1
 8004286:	6053      	str	r3, [r2, #4]
}
 8004288:	bd30      	pop	{r4, r5, pc}
 800428a:	46c0      	nop			@ (mov r8, r8)
 800428c:	ffff7fff 	.word	0xffff7fff
 8004290:	fffdffff 	.word	0xfffdffff
 8004294:	fffeffff 	.word	0xfffeffff
 8004298:	fffbffff 	.word	0xfffbffff
 800429c:	ffffefff 	.word	0xffffefff
 80042a0:	ffffdfff 	.word	0xffffdfff
 80042a4:	ffefffff 	.word	0xffefffff
 80042a8:	ff9fffff 	.word	0xff9fffff
 80042ac:	fff7ffff 	.word	0xfff7ffff

080042b0 <UART_WaitOnFlagUntilTimeout>:
{
 80042b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80042b2:	0004      	movs	r4, r0
 80042b4:	000d      	movs	r5, r1
 80042b6:	0017      	movs	r7, r2
 80042b8:	9300      	str	r3, [sp, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042ba:	6822      	ldr	r2, [r4, #0]
 80042bc:	69d3      	ldr	r3, [r2, #28]
 80042be:	402b      	ands	r3, r5
 80042c0:	1b5b      	subs	r3, r3, r5
 80042c2:	4259      	negs	r1, r3
 80042c4:	414b      	adcs	r3, r1
 80042c6:	42bb      	cmp	r3, r7
 80042c8:	d001      	beq.n	80042ce <UART_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 80042ca:	2000      	movs	r0, #0
 80042cc:	e021      	b.n	8004312 <UART_WaitOnFlagUntilTimeout+0x62>
    if (Timeout != HAL_MAX_DELAY)
 80042ce:	9b08      	ldr	r3, [sp, #32]
 80042d0:	3301      	adds	r3, #1
 80042d2:	d0f3      	beq.n	80042bc <UART_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042d4:	f7fe f954 	bl	8002580 <HAL_GetTick>
 80042d8:	9b00      	ldr	r3, [sp, #0]
 80042da:	1ac0      	subs	r0, r0, r3
 80042dc:	9b08      	ldr	r3, [sp, #32]
 80042de:	4298      	cmp	r0, r3
 80042e0:	d828      	bhi.n	8004334 <UART_WaitOnFlagUntilTimeout+0x84>
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d026      	beq.n	8004334 <UART_WaitOnFlagUntilTimeout+0x84>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80042e6:	6823      	ldr	r3, [r4, #0]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	0752      	lsls	r2, r2, #29
 80042ec:	d5e5      	bpl.n	80042ba <UART_WaitOnFlagUntilTimeout+0xa>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80042ee:	69da      	ldr	r2, [r3, #28]
 80042f0:	2608      	movs	r6, #8
 80042f2:	0011      	movs	r1, r2
 80042f4:	4031      	ands	r1, r6
 80042f6:	9101      	str	r1, [sp, #4]
 80042f8:	4232      	tst	r2, r6
 80042fa:	d00b      	beq.n	8004314 <UART_WaitOnFlagUntilTimeout+0x64>
          UART_EndRxTransfer(huart);
 80042fc:	0020      	movs	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80042fe:	621e      	str	r6, [r3, #32]
          UART_EndRxTransfer(huart);
 8004300:	f7ff fa2e 	bl	8003760 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004304:	0023      	movs	r3, r4
 8004306:	3390      	adds	r3, #144	@ 0x90
 8004308:	601e      	str	r6, [r3, #0]
          __HAL_UNLOCK(huart);
 800430a:	2300      	movs	r3, #0
          return HAL_ERROR;
 800430c:	2001      	movs	r0, #1
          __HAL_UNLOCK(huart);
 800430e:	3484      	adds	r4, #132	@ 0x84
 8004310:	7023      	strb	r3, [r4, #0]
}
 8004312:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004314:	2280      	movs	r2, #128	@ 0x80
 8004316:	69d9      	ldr	r1, [r3, #28]
 8004318:	0112      	lsls	r2, r2, #4
 800431a:	4211      	tst	r1, r2
 800431c:	d0cd      	beq.n	80042ba <UART_WaitOnFlagUntilTimeout+0xa>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800431e:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 8004320:	0020      	movs	r0, r4
 8004322:	f7ff fa1d 	bl	8003760 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004326:	0023      	movs	r3, r4
 8004328:	2220      	movs	r2, #32
 800432a:	3390      	adds	r3, #144	@ 0x90
 800432c:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(huart);
 800432e:	9b01      	ldr	r3, [sp, #4]
 8004330:	3484      	adds	r4, #132	@ 0x84
 8004332:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 8004334:	2003      	movs	r0, #3
 8004336:	e7ec      	b.n	8004312 <UART_WaitOnFlagUntilTimeout+0x62>

08004338 <HAL_UART_Transmit>:
{
 8004338:	b5f0      	push	{r4, r5, r6, r7, lr}
 800433a:	0017      	movs	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800433c:	0002      	movs	r2, r0
{
 800433e:	b087      	sub	sp, #28
  if (huart->gState == HAL_UART_STATE_READY)
 8004340:	3288      	adds	r2, #136	@ 0x88
{
 8004342:	9305      	str	r3, [sp, #20]
  if (huart->gState == HAL_UART_STATE_READY)
 8004344:	6813      	ldr	r3, [r2, #0]
{
 8004346:	0004      	movs	r4, r0
 8004348:	000d      	movs	r5, r1
    return HAL_BUSY;
 800434a:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 800434c:	2b20      	cmp	r3, #32
 800434e:	d139      	bne.n	80043c4 <HAL_UART_Transmit+0x8c>
      return  HAL_ERROR;
 8004350:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8004352:	2900      	cmp	r1, #0
 8004354:	d036      	beq.n	80043c4 <HAL_UART_Transmit+0x8c>
 8004356:	2f00      	cmp	r7, #0
 8004358:	d034      	beq.n	80043c4 <HAL_UART_Transmit+0x8c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800435a:	2380      	movs	r3, #128	@ 0x80
 800435c:	68a1      	ldr	r1, [r4, #8]
 800435e:	015b      	lsls	r3, r3, #5
 8004360:	4299      	cmp	r1, r3
 8004362:	d104      	bne.n	800436e <HAL_UART_Transmit+0x36>
 8004364:	6923      	ldr	r3, [r4, #16]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d101      	bne.n	800436e <HAL_UART_Transmit+0x36>
      if ((((uint32_t)pData) & 1U) != 0U)
 800436a:	4205      	tst	r5, r0
 800436c:	d12a      	bne.n	80043c4 <HAL_UART_Transmit+0x8c>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800436e:	0023      	movs	r3, r4
 8004370:	2600      	movs	r6, #0
 8004372:	3390      	adds	r3, #144	@ 0x90
 8004374:	601e      	str	r6, [r3, #0]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004376:	2321      	movs	r3, #33	@ 0x21
 8004378:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800437a:	f7fe f901 	bl	8002580 <HAL_GetTick>
    huart->TxXferSize  = Size;
 800437e:	0023      	movs	r3, r4
 8004380:	3354      	adds	r3, #84	@ 0x54
 8004382:	801f      	strh	r7, [r3, #0]
    huart->TxXferCount = Size;
 8004384:	3302      	adds	r3, #2
 8004386:	9303      	str	r3, [sp, #12]
 8004388:	801f      	strh	r7, [r3, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800438a:	2380      	movs	r3, #128	@ 0x80
 800438c:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 800438e:	9004      	str	r0, [sp, #16]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004390:	015b      	lsls	r3, r3, #5
 8004392:	429a      	cmp	r2, r3
 8004394:	d104      	bne.n	80043a0 <HAL_UART_Transmit+0x68>
 8004396:	6923      	ldr	r3, [r4, #16]
 8004398:	42b3      	cmp	r3, r6
 800439a:	d101      	bne.n	80043a0 <HAL_UART_Transmit+0x68>
 800439c:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 800439e:	001d      	movs	r5, r3
    while (huart->TxXferCount > 0U)
 80043a0:	0023      	movs	r3, r4
 80043a2:	3356      	adds	r3, #86	@ 0x56
 80043a4:	881b      	ldrh	r3, [r3, #0]
 80043a6:	b29a      	uxth	r2, r3
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d10d      	bne.n	80043c8 <HAL_UART_Transmit+0x90>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043ac:	9b05      	ldr	r3, [sp, #20]
 80043ae:	0020      	movs	r0, r4
 80043b0:	9300      	str	r3, [sp, #0]
 80043b2:	2140      	movs	r1, #64	@ 0x40
 80043b4:	9b04      	ldr	r3, [sp, #16]
 80043b6:	f7ff ff7b 	bl	80042b0 <UART_WaitOnFlagUntilTimeout>
 80043ba:	2320      	movs	r3, #32
 80043bc:	3488      	adds	r4, #136	@ 0x88
      huart->gState = HAL_UART_STATE_READY;
 80043be:	6023      	str	r3, [r4, #0]
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043c0:	2800      	cmp	r0, #0
 80043c2:	d10e      	bne.n	80043e2 <HAL_UART_Transmit+0xaa>
}
 80043c4:	b007      	add	sp, #28
 80043c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043c8:	9b05      	ldr	r3, [sp, #20]
 80043ca:	2200      	movs	r2, #0
 80043cc:	9300      	str	r3, [sp, #0]
 80043ce:	2180      	movs	r1, #128	@ 0x80
 80043d0:	0020      	movs	r0, r4
 80043d2:	9b04      	ldr	r3, [sp, #16]
 80043d4:	f7ff ff6c 	bl	80042b0 <UART_WaitOnFlagUntilTimeout>
 80043d8:	2800      	cmp	r0, #0
 80043da:	d004      	beq.n	80043e6 <HAL_UART_Transmit+0xae>
        huart->gState = HAL_UART_STATE_READY;
 80043dc:	2320      	movs	r3, #32
 80043de:	3488      	adds	r4, #136	@ 0x88
 80043e0:	6023      	str	r3, [r4, #0]
        return HAL_TIMEOUT;
 80043e2:	2003      	movs	r0, #3
 80043e4:	e7ee      	b.n	80043c4 <HAL_UART_Transmit+0x8c>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043e6:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 80043e8:	2d00      	cmp	r5, #0
 80043ea:	d10b      	bne.n	8004404 <HAL_UART_Transmit+0xcc>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043ec:	8833      	ldrh	r3, [r6, #0]
        pdata16bits++;
 80043ee:	3602      	adds	r6, #2
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043f0:	05db      	lsls	r3, r3, #23
 80043f2:	0ddb      	lsrs	r3, r3, #23
 80043f4:	6293      	str	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 80043f6:	9b03      	ldr	r3, [sp, #12]
 80043f8:	9a03      	ldr	r2, [sp, #12]
 80043fa:	881b      	ldrh	r3, [r3, #0]
 80043fc:	3b01      	subs	r3, #1
 80043fe:	b29b      	uxth	r3, r3
 8004400:	8013      	strh	r3, [r2, #0]
 8004402:	e7cd      	b.n	80043a0 <HAL_UART_Transmit+0x68>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004404:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 8004406:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004408:	6293      	str	r3, [r2, #40]	@ 0x28
        pdata8bits++;
 800440a:	e7f4      	b.n	80043f6 <HAL_UART_Transmit+0xbe>

0800440c <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800440c:	0003      	movs	r3, r0
{
 800440e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004410:	2600      	movs	r6, #0
{
 8004412:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004414:	3390      	adds	r3, #144	@ 0x90
 8004416:	601e      	str	r6, [r3, #0]
  tickstart = HAL_GetTick();
 8004418:	f7fe f8b2 	bl	8002580 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800441c:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800441e:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	071b      	lsls	r3, r3, #28
 8004424:	d51f      	bpl.n	8004466 <UART_CheckIdleState+0x5a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004426:	2180      	movs	r1, #128	@ 0x80
 8004428:	4b28      	ldr	r3, [pc, #160]	@ (80044cc <UART_CheckIdleState+0xc0>)
 800442a:	0032      	movs	r2, r6
 800442c:	9300      	str	r3, [sp, #0]
 800442e:	0389      	lsls	r1, r1, #14
 8004430:	0003      	movs	r3, r0
 8004432:	0020      	movs	r0, r4
 8004434:	f7ff ff3c 	bl	80042b0 <UART_WaitOnFlagUntilTimeout>
 8004438:	42b0      	cmp	r0, r6
 800443a:	d014      	beq.n	8004466 <UART_CheckIdleState+0x5a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800443c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004440:	2301      	movs	r3, #1
 8004442:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004446:	2080      	movs	r0, #128	@ 0x80
 8004448:	6822      	ldr	r2, [r4, #0]
 800444a:	6813      	ldr	r3, [r2, #0]
 800444c:	4383      	bics	r3, r0
 800444e:	6013      	str	r3, [r2, #0]
 8004450:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 8004454:	0023      	movs	r3, r4
 8004456:	2220      	movs	r2, #32
 8004458:	3388      	adds	r3, #136	@ 0x88
 800445a:	601a      	str	r2, [r3, #0]
      return HAL_TIMEOUT;
 800445c:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 800445e:	2300      	movs	r3, #0
 8004460:	3484      	adds	r4, #132	@ 0x84
 8004462:	7023      	strb	r3, [r4, #0]
}
 8004464:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004466:	0026      	movs	r6, r4
 8004468:	6823      	ldr	r3, [r4, #0]
 800446a:	368c      	adds	r6, #140	@ 0x8c
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	075b      	lsls	r3, r3, #29
 8004470:	d523      	bpl.n	80044ba <UART_CheckIdleState+0xae>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004472:	2180      	movs	r1, #128	@ 0x80
 8004474:	4b15      	ldr	r3, [pc, #84]	@ (80044cc <UART_CheckIdleState+0xc0>)
 8004476:	2200      	movs	r2, #0
 8004478:	9300      	str	r3, [sp, #0]
 800447a:	0020      	movs	r0, r4
 800447c:	002b      	movs	r3, r5
 800447e:	03c9      	lsls	r1, r1, #15
 8004480:	f7ff ff16 	bl	80042b0 <UART_WaitOnFlagUntilTimeout>
 8004484:	2800      	cmp	r0, #0
 8004486:	d018      	beq.n	80044ba <UART_CheckIdleState+0xae>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004488:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800448c:	2201      	movs	r2, #1
 800448e:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004492:	6821      	ldr	r1, [r4, #0]
 8004494:	4d0e      	ldr	r5, [pc, #56]	@ (80044d0 <UART_CheckIdleState+0xc4>)
 8004496:	680b      	ldr	r3, [r1, #0]
 8004498:	402b      	ands	r3, r5
 800449a:	600b      	str	r3, [r1, #0]
 800449c:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80044a0:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044a4:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044a8:	6821      	ldr	r1, [r4, #0]
 80044aa:	688b      	ldr	r3, [r1, #8]
 80044ac:	4393      	bics	r3, r2
 80044ae:	608b      	str	r3, [r1, #8]
 80044b0:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 80044b4:	2320      	movs	r3, #32
 80044b6:	6033      	str	r3, [r6, #0]
      return HAL_TIMEOUT;
 80044b8:	e7d0      	b.n	800445c <UART_CheckIdleState+0x50>
  huart->gState = HAL_UART_STATE_READY;
 80044ba:	0023      	movs	r3, r4
 80044bc:	2220      	movs	r2, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044be:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80044c0:	3388      	adds	r3, #136	@ 0x88
 80044c2:	601a      	str	r2, [r3, #0]
  huart->RxState = HAL_UART_STATE_READY;
 80044c4:	6032      	str	r2, [r6, #0]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044c6:	66e0      	str	r0, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044c8:	6720      	str	r0, [r4, #112]	@ 0x70
  return HAL_OK;
 80044ca:	e7c8      	b.n	800445e <UART_CheckIdleState+0x52>
 80044cc:	01ffffff 	.word	0x01ffffff
 80044d0:	fffffedf 	.word	0xfffffedf

080044d4 <HAL_UART_Init>:
{
 80044d4:	b570      	push	{r4, r5, r6, lr}
 80044d6:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 80044d8:	d101      	bne.n	80044de <HAL_UART_Init+0xa>
    return HAL_ERROR;
 80044da:	2001      	movs	r0, #1
}
 80044dc:	bd70      	pop	{r4, r5, r6, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 80044de:	0005      	movs	r5, r0
 80044e0:	3588      	adds	r5, #136	@ 0x88
 80044e2:	682b      	ldr	r3, [r5, #0]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d104      	bne.n	80044f2 <HAL_UART_Init+0x1e>
    huart->Lock = HAL_UNLOCKED;
 80044e8:	0002      	movs	r2, r0
 80044ea:	3284      	adds	r2, #132	@ 0x84
 80044ec:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 80044ee:	f7fd ff27 	bl	8002340 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80044f2:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 80044f4:	2101      	movs	r1, #1
 80044f6:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80044f8:	602b      	str	r3, [r5, #0]
  __HAL_UART_DISABLE(huart);
 80044fa:	6813      	ldr	r3, [r2, #0]
 80044fc:	438b      	bics	r3, r1
 80044fe:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004500:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004502:	2b00      	cmp	r3, #0
 8004504:	d002      	beq.n	800450c <HAL_UART_Init+0x38>
    UART_AdvFeatureConfig(huart);
 8004506:	0020      	movs	r0, r4
 8004508:	f7ff fe6a 	bl	80041e0 <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 800450c:	0020      	movs	r0, r4
 800450e:	f7ff fda5 	bl	800405c <UART_SetConfig>
 8004512:	2801      	cmp	r0, #1
 8004514:	d0e1      	beq.n	80044da <HAL_UART_Init+0x6>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004516:	6823      	ldr	r3, [r4, #0]
 8004518:	4907      	ldr	r1, [pc, #28]	@ (8004538 <HAL_UART_Init+0x64>)
 800451a:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 800451c:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800451e:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004520:	212a      	movs	r1, #42	@ 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004522:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004524:	689a      	ldr	r2, [r3, #8]
 8004526:	438a      	bics	r2, r1
 8004528:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800452a:	2201      	movs	r2, #1
 800452c:	6819      	ldr	r1, [r3, #0]
 800452e:	430a      	orrs	r2, r1
 8004530:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8004532:	f7ff ff6b 	bl	800440c <UART_CheckIdleState>
 8004536:	e7d1      	b.n	80044dc <HAL_UART_Init+0x8>
 8004538:	ffffb7ff 	.word	0xffffb7ff

0800453c <UART_Start_Receive_IT>:
  huart->RxXferSize  = Size;
 800453c:	0003      	movs	r3, r0
 800453e:	335c      	adds	r3, #92	@ 0x5c
{
 8004540:	b570      	push	{r4, r5, r6, lr}
  huart->pRxBuffPtr  = pData;
 8004542:	6581      	str	r1, [r0, #88]	@ 0x58
  UART_MASK_COMPUTATION(huart);
 8004544:	2480      	movs	r4, #128	@ 0x80
  huart->RxXferSize  = Size;
 8004546:	801a      	strh	r2, [r3, #0]
  huart->RxXferCount = Size;
 8004548:	805a      	strh	r2, [r3, #2]
  huart->RxISR       = NULL;
 800454a:	2300      	movs	r3, #0
  UART_MASK_COMPUTATION(huart);
 800454c:	6881      	ldr	r1, [r0, #8]
  huart->RxISR       = NULL;
 800454e:	6743      	str	r3, [r0, #116]	@ 0x74
  UART_MASK_COMPUTATION(huart);
 8004550:	0164      	lsls	r4, r4, #5
 8004552:	42a1      	cmp	r1, r4
 8004554:	d14e      	bne.n	80045f4 <UART_Start_Receive_IT+0xb8>
 8004556:	6903      	ldr	r3, [r0, #16]
 8004558:	1e59      	subs	r1, r3, #1
 800455a:	418b      	sbcs	r3, r1
 800455c:	21ff      	movs	r1, #255	@ 0xff
 800455e:	425b      	negs	r3, r3
 8004560:	438b      	bics	r3, r1
 8004562:	493c      	ldr	r1, [pc, #240]	@ (8004654 <UART_Start_Receive_IT+0x118>)
 8004564:	185b      	adds	r3, r3, r1
 8004566:	0001      	movs	r1, r0
 8004568:	3160      	adds	r1, #96	@ 0x60
 800456a:	800b      	strh	r3, [r1, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800456c:	0003      	movs	r3, r0
 800456e:	2100      	movs	r1, #0
 8004570:	3390      	adds	r3, #144	@ 0x90
 8004572:	6019      	str	r1, [r3, #0]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004574:	3122      	adds	r1, #34	@ 0x22
 8004576:	3b04      	subs	r3, #4
 8004578:	6019      	str	r1, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800457a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800457e:	2301      	movs	r3, #1
 8004580:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004584:	6801      	ldr	r1, [r0, #0]
 8004586:	688d      	ldr	r5, [r1, #8]
 8004588:	432b      	orrs	r3, r5
 800458a:	608b      	str	r3, [r1, #8]
 800458c:	f384 8810 	msr	PRIMASK, r4
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004590:	2580      	movs	r5, #128	@ 0x80
 8004592:	2180      	movs	r1, #128	@ 0x80
 8004594:	6e46      	ldr	r6, [r0, #100]	@ 0x64
 8004596:	6884      	ldr	r4, [r0, #8]
 8004598:	6903      	ldr	r3, [r0, #16]
 800459a:	05ad      	lsls	r5, r5, #22
 800459c:	0149      	lsls	r1, r1, #5
 800459e:	42ae      	cmp	r6, r5
 80045a0:	d13a      	bne.n	8004618 <UART_Start_Receive_IT+0xdc>
 80045a2:	0005      	movs	r5, r0
 80045a4:	3568      	adds	r5, #104	@ 0x68
 80045a6:	882d      	ldrh	r5, [r5, #0]
 80045a8:	4295      	cmp	r5, r2
 80045aa:	d835      	bhi.n	8004618 <UART_Start_Receive_IT+0xdc>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80045ac:	4a2a      	ldr	r2, [pc, #168]	@ (8004658 <UART_Start_Receive_IT+0x11c>)
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045ae:	428c      	cmp	r4, r1
 80045b0:	d102      	bne.n	80045b8 <UART_Start_Receive_IT+0x7c>
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d100      	bne.n	80045b8 <UART_Start_Receive_IT+0x7c>
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80045b6:	4a29      	ldr	r2, [pc, #164]	@ (800465c <UART_Start_Receive_IT+0x120>)
 80045b8:	6742      	str	r2, [r0, #116]	@ 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d00b      	beq.n	80045d6 <UART_Start_Receive_IT+0x9a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80045be:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045c2:	2301      	movs	r3, #1
 80045c4:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80045c8:	6802      	ldr	r2, [r0, #0]
 80045ca:	33ff      	adds	r3, #255	@ 0xff
 80045cc:	6814      	ldr	r4, [r2, #0]
 80045ce:	4323      	orrs	r3, r4
 80045d0:	6013      	str	r3, [r2, #0]
 80045d2:	f381 8810 	msr	PRIMASK, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80045d6:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045da:	2301      	movs	r3, #1
 80045dc:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80045e0:	2380      	movs	r3, #128	@ 0x80
 80045e2:	6802      	ldr	r2, [r0, #0]
 80045e4:	055b      	lsls	r3, r3, #21
 80045e6:	6890      	ldr	r0, [r2, #8]
 80045e8:	4303      	orrs	r3, r0
 80045ea:	6093      	str	r3, [r2, #8]
 80045ec:	f381 8810 	msr	PRIMASK, r1
}
 80045f0:	2000      	movs	r0, #0
 80045f2:	bd70      	pop	{r4, r5, r6, pc}
  UART_MASK_COMPUTATION(huart);
 80045f4:	2900      	cmp	r1, #0
 80045f6:	d105      	bne.n	8004604 <UART_Start_Receive_IT+0xc8>
 80045f8:	6901      	ldr	r1, [r0, #16]
 80045fa:	237f      	movs	r3, #127	@ 0x7f
 80045fc:	2900      	cmp	r1, #0
 80045fe:	d1b2      	bne.n	8004566 <UART_Start_Receive_IT+0x2a>
 8004600:	3380      	adds	r3, #128	@ 0x80
 8004602:	e7b0      	b.n	8004566 <UART_Start_Receive_IT+0x2a>
 8004604:	2480      	movs	r4, #128	@ 0x80
 8004606:	0564      	lsls	r4, r4, #21
 8004608:	42a1      	cmp	r1, r4
 800460a:	d1ac      	bne.n	8004566 <UART_Start_Receive_IT+0x2a>
 800460c:	6901      	ldr	r1, [r0, #16]
 800460e:	233f      	movs	r3, #63	@ 0x3f
 8004610:	2900      	cmp	r1, #0
 8004612:	d1a8      	bne.n	8004566 <UART_Start_Receive_IT+0x2a>
 8004614:	3340      	adds	r3, #64	@ 0x40
 8004616:	e7a6      	b.n	8004566 <UART_Start_Receive_IT+0x2a>
      huart->RxISR = UART_RxISR_8BIT;
 8004618:	4a11      	ldr	r2, [pc, #68]	@ (8004660 <UART_Start_Receive_IT+0x124>)
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800461a:	428c      	cmp	r4, r1
 800461c:	d102      	bne.n	8004624 <UART_Start_Receive_IT+0xe8>
 800461e:	2b00      	cmp	r3, #0
 8004620:	d100      	bne.n	8004624 <UART_Start_Receive_IT+0xe8>
      huart->RxISR = UART_RxISR_16BIT;
 8004622:	4a10      	ldr	r2, [pc, #64]	@ (8004664 <UART_Start_Receive_IT+0x128>)
 8004624:	6742      	str	r2, [r0, #116]	@ 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004626:	2201      	movs	r2, #1
 8004628:	2b00      	cmp	r3, #0
 800462a:	d00a      	beq.n	8004642 <UART_Start_Receive_IT+0x106>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800462c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004630:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8004634:	2390      	movs	r3, #144	@ 0x90
 8004636:	6802      	ldr	r2, [r0, #0]
 8004638:	005b      	lsls	r3, r3, #1
 800463a:	6810      	ldr	r0, [r2, #0]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800463c:	4303      	orrs	r3, r0
 800463e:	6013      	str	r3, [r2, #0]
 8004640:	e7d4      	b.n	80045ec <UART_Start_Receive_IT+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004642:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004646:	f382 8810 	msr	PRIMASK, r2
 800464a:	6802      	ldr	r2, [r0, #0]
 800464c:	2320      	movs	r3, #32
 800464e:	6810      	ldr	r0, [r2, #0]
 8004650:	e7f4      	b.n	800463c <UART_Start_Receive_IT+0x100>
 8004652:	46c0      	nop			@ (mov r8, r8)
 8004654:	000001ff 	.word	0x000001ff
 8004658:	08003cc9 	.word	0x08003cc9
 800465c:	08003e95 	.word	0x08003e95
 8004660:	08003b1d 	.word	0x08003b1d
 8004664:	08003bf5 	.word	0x08003bf5

08004668 <HAL_UART_Receive_IT>:
{
 8004668:	0003      	movs	r3, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 800466a:	308c      	adds	r0, #140	@ 0x8c
{
 800466c:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 800466e:	6804      	ldr	r4, [r0, #0]
    return HAL_BUSY;
 8004670:	2002      	movs	r0, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 8004672:	2c20      	cmp	r4, #32
 8004674:	d125      	bne.n	80046c2 <HAL_UART_Receive_IT+0x5a>
      return HAL_ERROR;
 8004676:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8004678:	2900      	cmp	r1, #0
 800467a:	d022      	beq.n	80046c2 <HAL_UART_Receive_IT+0x5a>
 800467c:	2a00      	cmp	r2, #0
 800467e:	d020      	beq.n	80046c2 <HAL_UART_Receive_IT+0x5a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004680:	2080      	movs	r0, #128	@ 0x80
 8004682:	689c      	ldr	r4, [r3, #8]
 8004684:	0140      	lsls	r0, r0, #5
 8004686:	4284      	cmp	r4, r0
 8004688:	d105      	bne.n	8004696 <HAL_UART_Receive_IT+0x2e>
 800468a:	6918      	ldr	r0, [r3, #16]
 800468c:	2800      	cmp	r0, #0
 800468e:	d102      	bne.n	8004696 <HAL_UART_Receive_IT+0x2e>
      return HAL_ERROR;
 8004690:	3001      	adds	r0, #1
      if ((((uint32_t)pData) & 1U) != 0U)
 8004692:	4201      	tst	r1, r0
 8004694:	d115      	bne.n	80046c2 <HAL_UART_Receive_IT+0x5a>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004696:	2000      	movs	r0, #0
 8004698:	66d8      	str	r0, [r3, #108]	@ 0x6c
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800469a:	6818      	ldr	r0, [r3, #0]
 800469c:	6840      	ldr	r0, [r0, #4]
 800469e:	0200      	lsls	r0, r0, #8
 80046a0:	d50c      	bpl.n	80046bc <HAL_UART_Receive_IT+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80046a2:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046a6:	2001      	movs	r0, #1
 80046a8:	f380 8810 	msr	PRIMASK, r0
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80046ac:	2080      	movs	r0, #128	@ 0x80
 80046ae:	681c      	ldr	r4, [r3, #0]
 80046b0:	04c0      	lsls	r0, r0, #19
 80046b2:	6826      	ldr	r6, [r4, #0]
 80046b4:	4330      	orrs	r0, r6
 80046b6:	6020      	str	r0, [r4, #0]
 80046b8:	f385 8810 	msr	PRIMASK, r5
    return (UART_Start_Receive_IT(huart, pData, Size));
 80046bc:	0018      	movs	r0, r3
 80046be:	f7ff ff3d 	bl	800453c <UART_Start_Receive_IT>
}
 80046c2:	bd70      	pop	{r4, r5, r6, pc}

080046c4 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80046c4:	4770      	bx	lr

080046c6 <HAL_UARTEx_RxFifoFullCallback>:
/**
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
 80046c6:	4770      	bx	lr

080046c8 <HAL_UARTEx_TxFifoEmptyCallback>:
/**
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
 80046c8:	4770      	bx	lr
	...

080046cc <__assert_func>:
 80046cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80046ce:	0014      	movs	r4, r2
 80046d0:	001a      	movs	r2, r3
 80046d2:	4b09      	ldr	r3, [pc, #36]	@ (80046f8 <__assert_func+0x2c>)
 80046d4:	0005      	movs	r5, r0
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	000e      	movs	r6, r1
 80046da:	68d8      	ldr	r0, [r3, #12]
 80046dc:	4b07      	ldr	r3, [pc, #28]	@ (80046fc <__assert_func+0x30>)
 80046de:	2c00      	cmp	r4, #0
 80046e0:	d101      	bne.n	80046e6 <__assert_func+0x1a>
 80046e2:	4b07      	ldr	r3, [pc, #28]	@ (8004700 <__assert_func+0x34>)
 80046e4:	001c      	movs	r4, r3
 80046e6:	4907      	ldr	r1, [pc, #28]	@ (8004704 <__assert_func+0x38>)
 80046e8:	9301      	str	r3, [sp, #4]
 80046ea:	9402      	str	r4, [sp, #8]
 80046ec:	002b      	movs	r3, r5
 80046ee:	9600      	str	r6, [sp, #0]
 80046f0:	f000 f8b2 	bl	8004858 <fiprintf>
 80046f4:	f000 f911 	bl	800491a <abort>
 80046f8:	2000001c 	.word	0x2000001c
 80046fc:	08005948 	.word	0x08005948
 8004700:	080056b8 	.word	0x080056b8
 8004704:	08005955 	.word	0x08005955

08004708 <std>:
 8004708:	2300      	movs	r3, #0
 800470a:	b510      	push	{r4, lr}
 800470c:	0004      	movs	r4, r0
 800470e:	6003      	str	r3, [r0, #0]
 8004710:	6043      	str	r3, [r0, #4]
 8004712:	6083      	str	r3, [r0, #8]
 8004714:	8181      	strh	r1, [r0, #12]
 8004716:	6643      	str	r3, [r0, #100]	@ 0x64
 8004718:	81c2      	strh	r2, [r0, #14]
 800471a:	6103      	str	r3, [r0, #16]
 800471c:	6143      	str	r3, [r0, #20]
 800471e:	6183      	str	r3, [r0, #24]
 8004720:	0019      	movs	r1, r3
 8004722:	2208      	movs	r2, #8
 8004724:	305c      	adds	r0, #92	@ 0x5c
 8004726:	f000 f8c3 	bl	80048b0 <memset>
 800472a:	4b0b      	ldr	r3, [pc, #44]	@ (8004758 <std+0x50>)
 800472c:	6224      	str	r4, [r4, #32]
 800472e:	6263      	str	r3, [r4, #36]	@ 0x24
 8004730:	4b0a      	ldr	r3, [pc, #40]	@ (800475c <std+0x54>)
 8004732:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004734:	4b0a      	ldr	r3, [pc, #40]	@ (8004760 <std+0x58>)
 8004736:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004738:	4b0a      	ldr	r3, [pc, #40]	@ (8004764 <std+0x5c>)
 800473a:	6323      	str	r3, [r4, #48]	@ 0x30
 800473c:	4b0a      	ldr	r3, [pc, #40]	@ (8004768 <std+0x60>)
 800473e:	429c      	cmp	r4, r3
 8004740:	d005      	beq.n	800474e <std+0x46>
 8004742:	4b0a      	ldr	r3, [pc, #40]	@ (800476c <std+0x64>)
 8004744:	429c      	cmp	r4, r3
 8004746:	d002      	beq.n	800474e <std+0x46>
 8004748:	4b09      	ldr	r3, [pc, #36]	@ (8004770 <std+0x68>)
 800474a:	429c      	cmp	r4, r3
 800474c:	d103      	bne.n	8004756 <std+0x4e>
 800474e:	0020      	movs	r0, r4
 8004750:	3058      	adds	r0, #88	@ 0x58
 8004752:	f000 f8df 	bl	8004914 <__retarget_lock_init_recursive>
 8004756:	bd10      	pop	{r4, pc}
 8004758:	08005175 	.word	0x08005175
 800475c:	0800519d 	.word	0x0800519d
 8004760:	080051d5 	.word	0x080051d5
 8004764:	08005201 	.word	0x08005201
 8004768:	20000280 	.word	0x20000280
 800476c:	200002e8 	.word	0x200002e8
 8004770:	20000350 	.word	0x20000350

08004774 <stdio_exit_handler>:
 8004774:	b510      	push	{r4, lr}
 8004776:	4a03      	ldr	r2, [pc, #12]	@ (8004784 <stdio_exit_handler+0x10>)
 8004778:	4903      	ldr	r1, [pc, #12]	@ (8004788 <stdio_exit_handler+0x14>)
 800477a:	4804      	ldr	r0, [pc, #16]	@ (800478c <stdio_exit_handler+0x18>)
 800477c:	f000 f87c 	bl	8004878 <_fwalk_sglue>
 8004780:	bd10      	pop	{r4, pc}
 8004782:	46c0      	nop			@ (mov r8, r8)
 8004784:	20000010 	.word	0x20000010
 8004788:	080050fd 	.word	0x080050fd
 800478c:	20000020 	.word	0x20000020

08004790 <cleanup_stdio>:
 8004790:	6841      	ldr	r1, [r0, #4]
 8004792:	4b0b      	ldr	r3, [pc, #44]	@ (80047c0 <cleanup_stdio+0x30>)
 8004794:	b510      	push	{r4, lr}
 8004796:	0004      	movs	r4, r0
 8004798:	4299      	cmp	r1, r3
 800479a:	d001      	beq.n	80047a0 <cleanup_stdio+0x10>
 800479c:	f000 fcae 	bl	80050fc <_fflush_r>
 80047a0:	68a1      	ldr	r1, [r4, #8]
 80047a2:	4b08      	ldr	r3, [pc, #32]	@ (80047c4 <cleanup_stdio+0x34>)
 80047a4:	4299      	cmp	r1, r3
 80047a6:	d002      	beq.n	80047ae <cleanup_stdio+0x1e>
 80047a8:	0020      	movs	r0, r4
 80047aa:	f000 fca7 	bl	80050fc <_fflush_r>
 80047ae:	68e1      	ldr	r1, [r4, #12]
 80047b0:	4b05      	ldr	r3, [pc, #20]	@ (80047c8 <cleanup_stdio+0x38>)
 80047b2:	4299      	cmp	r1, r3
 80047b4:	d002      	beq.n	80047bc <cleanup_stdio+0x2c>
 80047b6:	0020      	movs	r0, r4
 80047b8:	f000 fca0 	bl	80050fc <_fflush_r>
 80047bc:	bd10      	pop	{r4, pc}
 80047be:	46c0      	nop			@ (mov r8, r8)
 80047c0:	20000280 	.word	0x20000280
 80047c4:	200002e8 	.word	0x200002e8
 80047c8:	20000350 	.word	0x20000350

080047cc <global_stdio_init.part.0>:
 80047cc:	b510      	push	{r4, lr}
 80047ce:	4b09      	ldr	r3, [pc, #36]	@ (80047f4 <global_stdio_init.part.0+0x28>)
 80047d0:	4a09      	ldr	r2, [pc, #36]	@ (80047f8 <global_stdio_init.part.0+0x2c>)
 80047d2:	2104      	movs	r1, #4
 80047d4:	601a      	str	r2, [r3, #0]
 80047d6:	4809      	ldr	r0, [pc, #36]	@ (80047fc <global_stdio_init.part.0+0x30>)
 80047d8:	2200      	movs	r2, #0
 80047da:	f7ff ff95 	bl	8004708 <std>
 80047de:	2201      	movs	r2, #1
 80047e0:	2109      	movs	r1, #9
 80047e2:	4807      	ldr	r0, [pc, #28]	@ (8004800 <global_stdio_init.part.0+0x34>)
 80047e4:	f7ff ff90 	bl	8004708 <std>
 80047e8:	2202      	movs	r2, #2
 80047ea:	2112      	movs	r1, #18
 80047ec:	4805      	ldr	r0, [pc, #20]	@ (8004804 <global_stdio_init.part.0+0x38>)
 80047ee:	f7ff ff8b 	bl	8004708 <std>
 80047f2:	bd10      	pop	{r4, pc}
 80047f4:	200003b8 	.word	0x200003b8
 80047f8:	08004775 	.word	0x08004775
 80047fc:	20000280 	.word	0x20000280
 8004800:	200002e8 	.word	0x200002e8
 8004804:	20000350 	.word	0x20000350

08004808 <__sfp_lock_acquire>:
 8004808:	b510      	push	{r4, lr}
 800480a:	4802      	ldr	r0, [pc, #8]	@ (8004814 <__sfp_lock_acquire+0xc>)
 800480c:	f000 f883 	bl	8004916 <__retarget_lock_acquire_recursive>
 8004810:	bd10      	pop	{r4, pc}
 8004812:	46c0      	nop			@ (mov r8, r8)
 8004814:	200003bd 	.word	0x200003bd

08004818 <__sfp_lock_release>:
 8004818:	b510      	push	{r4, lr}
 800481a:	4802      	ldr	r0, [pc, #8]	@ (8004824 <__sfp_lock_release+0xc>)
 800481c:	f000 f87c 	bl	8004918 <__retarget_lock_release_recursive>
 8004820:	bd10      	pop	{r4, pc}
 8004822:	46c0      	nop			@ (mov r8, r8)
 8004824:	200003bd 	.word	0x200003bd

08004828 <__sinit>:
 8004828:	b510      	push	{r4, lr}
 800482a:	0004      	movs	r4, r0
 800482c:	f7ff ffec 	bl	8004808 <__sfp_lock_acquire>
 8004830:	6a23      	ldr	r3, [r4, #32]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d002      	beq.n	800483c <__sinit+0x14>
 8004836:	f7ff ffef 	bl	8004818 <__sfp_lock_release>
 800483a:	bd10      	pop	{r4, pc}
 800483c:	4b04      	ldr	r3, [pc, #16]	@ (8004850 <__sinit+0x28>)
 800483e:	6223      	str	r3, [r4, #32]
 8004840:	4b04      	ldr	r3, [pc, #16]	@ (8004854 <__sinit+0x2c>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d1f6      	bne.n	8004836 <__sinit+0xe>
 8004848:	f7ff ffc0 	bl	80047cc <global_stdio_init.part.0>
 800484c:	e7f3      	b.n	8004836 <__sinit+0xe>
 800484e:	46c0      	nop			@ (mov r8, r8)
 8004850:	08004791 	.word	0x08004791
 8004854:	200003b8 	.word	0x200003b8

08004858 <fiprintf>:
 8004858:	b40e      	push	{r1, r2, r3}
 800485a:	b517      	push	{r0, r1, r2, r4, lr}
 800485c:	4c05      	ldr	r4, [pc, #20]	@ (8004874 <fiprintf+0x1c>)
 800485e:	ab05      	add	r3, sp, #20
 8004860:	cb04      	ldmia	r3!, {r2}
 8004862:	0001      	movs	r1, r0
 8004864:	6820      	ldr	r0, [r4, #0]
 8004866:	9301      	str	r3, [sp, #4]
 8004868:	f000 f886 	bl	8004978 <_vfiprintf_r>
 800486c:	bc1e      	pop	{r1, r2, r3, r4}
 800486e:	bc08      	pop	{r3}
 8004870:	b003      	add	sp, #12
 8004872:	4718      	bx	r3
 8004874:	2000001c 	.word	0x2000001c

08004878 <_fwalk_sglue>:
 8004878:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800487a:	0014      	movs	r4, r2
 800487c:	2600      	movs	r6, #0
 800487e:	9000      	str	r0, [sp, #0]
 8004880:	9101      	str	r1, [sp, #4]
 8004882:	68a5      	ldr	r5, [r4, #8]
 8004884:	6867      	ldr	r7, [r4, #4]
 8004886:	3f01      	subs	r7, #1
 8004888:	d504      	bpl.n	8004894 <_fwalk_sglue+0x1c>
 800488a:	6824      	ldr	r4, [r4, #0]
 800488c:	2c00      	cmp	r4, #0
 800488e:	d1f8      	bne.n	8004882 <_fwalk_sglue+0xa>
 8004890:	0030      	movs	r0, r6
 8004892:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004894:	89ab      	ldrh	r3, [r5, #12]
 8004896:	2b01      	cmp	r3, #1
 8004898:	d908      	bls.n	80048ac <_fwalk_sglue+0x34>
 800489a:	220e      	movs	r2, #14
 800489c:	5eab      	ldrsh	r3, [r5, r2]
 800489e:	3301      	adds	r3, #1
 80048a0:	d004      	beq.n	80048ac <_fwalk_sglue+0x34>
 80048a2:	0029      	movs	r1, r5
 80048a4:	9800      	ldr	r0, [sp, #0]
 80048a6:	9b01      	ldr	r3, [sp, #4]
 80048a8:	4798      	blx	r3
 80048aa:	4306      	orrs	r6, r0
 80048ac:	3568      	adds	r5, #104	@ 0x68
 80048ae:	e7ea      	b.n	8004886 <_fwalk_sglue+0xe>

080048b0 <memset>:
 80048b0:	0003      	movs	r3, r0
 80048b2:	1882      	adds	r2, r0, r2
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d100      	bne.n	80048ba <memset+0xa>
 80048b8:	4770      	bx	lr
 80048ba:	7019      	strb	r1, [r3, #0]
 80048bc:	3301      	adds	r3, #1
 80048be:	e7f9      	b.n	80048b4 <memset+0x4>

080048c0 <__errno>:
 80048c0:	4b01      	ldr	r3, [pc, #4]	@ (80048c8 <__errno+0x8>)
 80048c2:	6818      	ldr	r0, [r3, #0]
 80048c4:	4770      	bx	lr
 80048c6:	46c0      	nop			@ (mov r8, r8)
 80048c8:	2000001c 	.word	0x2000001c

080048cc <__libc_init_array>:
 80048cc:	b570      	push	{r4, r5, r6, lr}
 80048ce:	2600      	movs	r6, #0
 80048d0:	4c0c      	ldr	r4, [pc, #48]	@ (8004904 <__libc_init_array+0x38>)
 80048d2:	4d0d      	ldr	r5, [pc, #52]	@ (8004908 <__libc_init_array+0x3c>)
 80048d4:	1b64      	subs	r4, r4, r5
 80048d6:	10a4      	asrs	r4, r4, #2
 80048d8:	42a6      	cmp	r6, r4
 80048da:	d109      	bne.n	80048f0 <__libc_init_array+0x24>
 80048dc:	2600      	movs	r6, #0
 80048de:	f000 fec5 	bl	800566c <_init>
 80048e2:	4c0a      	ldr	r4, [pc, #40]	@ (800490c <__libc_init_array+0x40>)
 80048e4:	4d0a      	ldr	r5, [pc, #40]	@ (8004910 <__libc_init_array+0x44>)
 80048e6:	1b64      	subs	r4, r4, r5
 80048e8:	10a4      	asrs	r4, r4, #2
 80048ea:	42a6      	cmp	r6, r4
 80048ec:	d105      	bne.n	80048fa <__libc_init_array+0x2e>
 80048ee:	bd70      	pop	{r4, r5, r6, pc}
 80048f0:	00b3      	lsls	r3, r6, #2
 80048f2:	58eb      	ldr	r3, [r5, r3]
 80048f4:	4798      	blx	r3
 80048f6:	3601      	adds	r6, #1
 80048f8:	e7ee      	b.n	80048d8 <__libc_init_array+0xc>
 80048fa:	00b3      	lsls	r3, r6, #2
 80048fc:	58eb      	ldr	r3, [r5, r3]
 80048fe:	4798      	blx	r3
 8004900:	3601      	adds	r6, #1
 8004902:	e7f2      	b.n	80048ea <__libc_init_array+0x1e>
 8004904:	080059b8 	.word	0x080059b8
 8004908:	080059b8 	.word	0x080059b8
 800490c:	080059bc 	.word	0x080059bc
 8004910:	080059b8 	.word	0x080059b8

08004914 <__retarget_lock_init_recursive>:
 8004914:	4770      	bx	lr

08004916 <__retarget_lock_acquire_recursive>:
 8004916:	4770      	bx	lr

08004918 <__retarget_lock_release_recursive>:
 8004918:	4770      	bx	lr

0800491a <abort>:
 800491a:	2006      	movs	r0, #6
 800491c:	b510      	push	{r4, lr}
 800491e:	f000 fdf5 	bl	800550c <raise>
 8004922:	2001      	movs	r0, #1
 8004924:	f7fd fd6e 	bl	8002404 <_exit>

08004928 <__sfputc_r>:
 8004928:	6893      	ldr	r3, [r2, #8]
 800492a:	b510      	push	{r4, lr}
 800492c:	3b01      	subs	r3, #1
 800492e:	6093      	str	r3, [r2, #8]
 8004930:	2b00      	cmp	r3, #0
 8004932:	da04      	bge.n	800493e <__sfputc_r+0x16>
 8004934:	6994      	ldr	r4, [r2, #24]
 8004936:	42a3      	cmp	r3, r4
 8004938:	db07      	blt.n	800494a <__sfputc_r+0x22>
 800493a:	290a      	cmp	r1, #10
 800493c:	d005      	beq.n	800494a <__sfputc_r+0x22>
 800493e:	6813      	ldr	r3, [r2, #0]
 8004940:	1c58      	adds	r0, r3, #1
 8004942:	6010      	str	r0, [r2, #0]
 8004944:	7019      	strb	r1, [r3, #0]
 8004946:	0008      	movs	r0, r1
 8004948:	bd10      	pop	{r4, pc}
 800494a:	f000 fc5f 	bl	800520c <__swbuf_r>
 800494e:	0001      	movs	r1, r0
 8004950:	e7f9      	b.n	8004946 <__sfputc_r+0x1e>

08004952 <__sfputs_r>:
 8004952:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004954:	0006      	movs	r6, r0
 8004956:	000f      	movs	r7, r1
 8004958:	0014      	movs	r4, r2
 800495a:	18d5      	adds	r5, r2, r3
 800495c:	42ac      	cmp	r4, r5
 800495e:	d101      	bne.n	8004964 <__sfputs_r+0x12>
 8004960:	2000      	movs	r0, #0
 8004962:	e007      	b.n	8004974 <__sfputs_r+0x22>
 8004964:	7821      	ldrb	r1, [r4, #0]
 8004966:	003a      	movs	r2, r7
 8004968:	0030      	movs	r0, r6
 800496a:	f7ff ffdd 	bl	8004928 <__sfputc_r>
 800496e:	3401      	adds	r4, #1
 8004970:	1c43      	adds	r3, r0, #1
 8004972:	d1f3      	bne.n	800495c <__sfputs_r+0xa>
 8004974:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004978 <_vfiprintf_r>:
 8004978:	b5f0      	push	{r4, r5, r6, r7, lr}
 800497a:	b0a1      	sub	sp, #132	@ 0x84
 800497c:	000f      	movs	r7, r1
 800497e:	0015      	movs	r5, r2
 8004980:	001e      	movs	r6, r3
 8004982:	9003      	str	r0, [sp, #12]
 8004984:	2800      	cmp	r0, #0
 8004986:	d004      	beq.n	8004992 <_vfiprintf_r+0x1a>
 8004988:	6a03      	ldr	r3, [r0, #32]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d101      	bne.n	8004992 <_vfiprintf_r+0x1a>
 800498e:	f7ff ff4b 	bl	8004828 <__sinit>
 8004992:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004994:	07db      	lsls	r3, r3, #31
 8004996:	d405      	bmi.n	80049a4 <_vfiprintf_r+0x2c>
 8004998:	89bb      	ldrh	r3, [r7, #12]
 800499a:	059b      	lsls	r3, r3, #22
 800499c:	d402      	bmi.n	80049a4 <_vfiprintf_r+0x2c>
 800499e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80049a0:	f7ff ffb9 	bl	8004916 <__retarget_lock_acquire_recursive>
 80049a4:	89bb      	ldrh	r3, [r7, #12]
 80049a6:	071b      	lsls	r3, r3, #28
 80049a8:	d502      	bpl.n	80049b0 <_vfiprintf_r+0x38>
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d113      	bne.n	80049d8 <_vfiprintf_r+0x60>
 80049b0:	0039      	movs	r1, r7
 80049b2:	9803      	ldr	r0, [sp, #12]
 80049b4:	f000 fc6c 	bl	8005290 <__swsetup_r>
 80049b8:	2800      	cmp	r0, #0
 80049ba:	d00d      	beq.n	80049d8 <_vfiprintf_r+0x60>
 80049bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80049be:	07db      	lsls	r3, r3, #31
 80049c0:	d503      	bpl.n	80049ca <_vfiprintf_r+0x52>
 80049c2:	2001      	movs	r0, #1
 80049c4:	4240      	negs	r0, r0
 80049c6:	b021      	add	sp, #132	@ 0x84
 80049c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049ca:	89bb      	ldrh	r3, [r7, #12]
 80049cc:	059b      	lsls	r3, r3, #22
 80049ce:	d4f8      	bmi.n	80049c2 <_vfiprintf_r+0x4a>
 80049d0:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80049d2:	f7ff ffa1 	bl	8004918 <__retarget_lock_release_recursive>
 80049d6:	e7f4      	b.n	80049c2 <_vfiprintf_r+0x4a>
 80049d8:	2300      	movs	r3, #0
 80049da:	ac08      	add	r4, sp, #32
 80049dc:	6163      	str	r3, [r4, #20]
 80049de:	3320      	adds	r3, #32
 80049e0:	7663      	strb	r3, [r4, #25]
 80049e2:	3310      	adds	r3, #16
 80049e4:	76a3      	strb	r3, [r4, #26]
 80049e6:	9607      	str	r6, [sp, #28]
 80049e8:	002e      	movs	r6, r5
 80049ea:	7833      	ldrb	r3, [r6, #0]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d001      	beq.n	80049f4 <_vfiprintf_r+0x7c>
 80049f0:	2b25      	cmp	r3, #37	@ 0x25
 80049f2:	d148      	bne.n	8004a86 <_vfiprintf_r+0x10e>
 80049f4:	1b73      	subs	r3, r6, r5
 80049f6:	9305      	str	r3, [sp, #20]
 80049f8:	42ae      	cmp	r6, r5
 80049fa:	d00b      	beq.n	8004a14 <_vfiprintf_r+0x9c>
 80049fc:	002a      	movs	r2, r5
 80049fe:	0039      	movs	r1, r7
 8004a00:	9803      	ldr	r0, [sp, #12]
 8004a02:	f7ff ffa6 	bl	8004952 <__sfputs_r>
 8004a06:	3001      	adds	r0, #1
 8004a08:	d100      	bne.n	8004a0c <_vfiprintf_r+0x94>
 8004a0a:	e0ae      	b.n	8004b6a <_vfiprintf_r+0x1f2>
 8004a0c:	6963      	ldr	r3, [r4, #20]
 8004a0e:	9a05      	ldr	r2, [sp, #20]
 8004a10:	189b      	adds	r3, r3, r2
 8004a12:	6163      	str	r3, [r4, #20]
 8004a14:	7833      	ldrb	r3, [r6, #0]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d100      	bne.n	8004a1c <_vfiprintf_r+0xa4>
 8004a1a:	e0a6      	b.n	8004b6a <_vfiprintf_r+0x1f2>
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	2300      	movs	r3, #0
 8004a20:	4252      	negs	r2, r2
 8004a22:	6062      	str	r2, [r4, #4]
 8004a24:	a904      	add	r1, sp, #16
 8004a26:	3254      	adds	r2, #84	@ 0x54
 8004a28:	1852      	adds	r2, r2, r1
 8004a2a:	1c75      	adds	r5, r6, #1
 8004a2c:	6023      	str	r3, [r4, #0]
 8004a2e:	60e3      	str	r3, [r4, #12]
 8004a30:	60a3      	str	r3, [r4, #8]
 8004a32:	7013      	strb	r3, [r2, #0]
 8004a34:	65a3      	str	r3, [r4, #88]	@ 0x58
 8004a36:	4b59      	ldr	r3, [pc, #356]	@ (8004b9c <_vfiprintf_r+0x224>)
 8004a38:	2205      	movs	r2, #5
 8004a3a:	0018      	movs	r0, r3
 8004a3c:	7829      	ldrb	r1, [r5, #0]
 8004a3e:	9305      	str	r3, [sp, #20]
 8004a40:	f000 fdbe 	bl	80055c0 <memchr>
 8004a44:	1c6e      	adds	r6, r5, #1
 8004a46:	2800      	cmp	r0, #0
 8004a48:	d11f      	bne.n	8004a8a <_vfiprintf_r+0x112>
 8004a4a:	6822      	ldr	r2, [r4, #0]
 8004a4c:	06d3      	lsls	r3, r2, #27
 8004a4e:	d504      	bpl.n	8004a5a <_vfiprintf_r+0xe2>
 8004a50:	2353      	movs	r3, #83	@ 0x53
 8004a52:	a904      	add	r1, sp, #16
 8004a54:	185b      	adds	r3, r3, r1
 8004a56:	2120      	movs	r1, #32
 8004a58:	7019      	strb	r1, [r3, #0]
 8004a5a:	0713      	lsls	r3, r2, #28
 8004a5c:	d504      	bpl.n	8004a68 <_vfiprintf_r+0xf0>
 8004a5e:	2353      	movs	r3, #83	@ 0x53
 8004a60:	a904      	add	r1, sp, #16
 8004a62:	185b      	adds	r3, r3, r1
 8004a64:	212b      	movs	r1, #43	@ 0x2b
 8004a66:	7019      	strb	r1, [r3, #0]
 8004a68:	782b      	ldrb	r3, [r5, #0]
 8004a6a:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a6c:	d016      	beq.n	8004a9c <_vfiprintf_r+0x124>
 8004a6e:	002e      	movs	r6, r5
 8004a70:	2100      	movs	r1, #0
 8004a72:	200a      	movs	r0, #10
 8004a74:	68e3      	ldr	r3, [r4, #12]
 8004a76:	7832      	ldrb	r2, [r6, #0]
 8004a78:	1c75      	adds	r5, r6, #1
 8004a7a:	3a30      	subs	r2, #48	@ 0x30
 8004a7c:	2a09      	cmp	r2, #9
 8004a7e:	d950      	bls.n	8004b22 <_vfiprintf_r+0x1aa>
 8004a80:	2900      	cmp	r1, #0
 8004a82:	d111      	bne.n	8004aa8 <_vfiprintf_r+0x130>
 8004a84:	e017      	b.n	8004ab6 <_vfiprintf_r+0x13e>
 8004a86:	3601      	adds	r6, #1
 8004a88:	e7af      	b.n	80049ea <_vfiprintf_r+0x72>
 8004a8a:	9b05      	ldr	r3, [sp, #20]
 8004a8c:	6822      	ldr	r2, [r4, #0]
 8004a8e:	1ac0      	subs	r0, r0, r3
 8004a90:	2301      	movs	r3, #1
 8004a92:	4083      	lsls	r3, r0
 8004a94:	4313      	orrs	r3, r2
 8004a96:	0035      	movs	r5, r6
 8004a98:	6023      	str	r3, [r4, #0]
 8004a9a:	e7cc      	b.n	8004a36 <_vfiprintf_r+0xbe>
 8004a9c:	9b07      	ldr	r3, [sp, #28]
 8004a9e:	1d19      	adds	r1, r3, #4
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	9107      	str	r1, [sp, #28]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	db01      	blt.n	8004aac <_vfiprintf_r+0x134>
 8004aa8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004aaa:	e004      	b.n	8004ab6 <_vfiprintf_r+0x13e>
 8004aac:	425b      	negs	r3, r3
 8004aae:	60e3      	str	r3, [r4, #12]
 8004ab0:	2302      	movs	r3, #2
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	6023      	str	r3, [r4, #0]
 8004ab6:	7833      	ldrb	r3, [r6, #0]
 8004ab8:	2b2e      	cmp	r3, #46	@ 0x2e
 8004aba:	d10c      	bne.n	8004ad6 <_vfiprintf_r+0x15e>
 8004abc:	7873      	ldrb	r3, [r6, #1]
 8004abe:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ac0:	d134      	bne.n	8004b2c <_vfiprintf_r+0x1b4>
 8004ac2:	9b07      	ldr	r3, [sp, #28]
 8004ac4:	3602      	adds	r6, #2
 8004ac6:	1d1a      	adds	r2, r3, #4
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	9207      	str	r2, [sp, #28]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	da01      	bge.n	8004ad4 <_vfiprintf_r+0x15c>
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	425b      	negs	r3, r3
 8004ad4:	9309      	str	r3, [sp, #36]	@ 0x24
 8004ad6:	4d32      	ldr	r5, [pc, #200]	@ (8004ba0 <_vfiprintf_r+0x228>)
 8004ad8:	2203      	movs	r2, #3
 8004ada:	0028      	movs	r0, r5
 8004adc:	7831      	ldrb	r1, [r6, #0]
 8004ade:	f000 fd6f 	bl	80055c0 <memchr>
 8004ae2:	2800      	cmp	r0, #0
 8004ae4:	d006      	beq.n	8004af4 <_vfiprintf_r+0x17c>
 8004ae6:	2340      	movs	r3, #64	@ 0x40
 8004ae8:	1b40      	subs	r0, r0, r5
 8004aea:	4083      	lsls	r3, r0
 8004aec:	6822      	ldr	r2, [r4, #0]
 8004aee:	3601      	adds	r6, #1
 8004af0:	4313      	orrs	r3, r2
 8004af2:	6023      	str	r3, [r4, #0]
 8004af4:	7831      	ldrb	r1, [r6, #0]
 8004af6:	2206      	movs	r2, #6
 8004af8:	482a      	ldr	r0, [pc, #168]	@ (8004ba4 <_vfiprintf_r+0x22c>)
 8004afa:	1c75      	adds	r5, r6, #1
 8004afc:	7621      	strb	r1, [r4, #24]
 8004afe:	f000 fd5f 	bl	80055c0 <memchr>
 8004b02:	2800      	cmp	r0, #0
 8004b04:	d040      	beq.n	8004b88 <_vfiprintf_r+0x210>
 8004b06:	4b28      	ldr	r3, [pc, #160]	@ (8004ba8 <_vfiprintf_r+0x230>)
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d122      	bne.n	8004b52 <_vfiprintf_r+0x1da>
 8004b0c:	2207      	movs	r2, #7
 8004b0e:	9b07      	ldr	r3, [sp, #28]
 8004b10:	3307      	adds	r3, #7
 8004b12:	4393      	bics	r3, r2
 8004b14:	3308      	adds	r3, #8
 8004b16:	9307      	str	r3, [sp, #28]
 8004b18:	6963      	ldr	r3, [r4, #20]
 8004b1a:	9a04      	ldr	r2, [sp, #16]
 8004b1c:	189b      	adds	r3, r3, r2
 8004b1e:	6163      	str	r3, [r4, #20]
 8004b20:	e762      	b.n	80049e8 <_vfiprintf_r+0x70>
 8004b22:	4343      	muls	r3, r0
 8004b24:	002e      	movs	r6, r5
 8004b26:	2101      	movs	r1, #1
 8004b28:	189b      	adds	r3, r3, r2
 8004b2a:	e7a4      	b.n	8004a76 <_vfiprintf_r+0xfe>
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	200a      	movs	r0, #10
 8004b30:	0019      	movs	r1, r3
 8004b32:	3601      	adds	r6, #1
 8004b34:	6063      	str	r3, [r4, #4]
 8004b36:	7832      	ldrb	r2, [r6, #0]
 8004b38:	1c75      	adds	r5, r6, #1
 8004b3a:	3a30      	subs	r2, #48	@ 0x30
 8004b3c:	2a09      	cmp	r2, #9
 8004b3e:	d903      	bls.n	8004b48 <_vfiprintf_r+0x1d0>
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d0c8      	beq.n	8004ad6 <_vfiprintf_r+0x15e>
 8004b44:	9109      	str	r1, [sp, #36]	@ 0x24
 8004b46:	e7c6      	b.n	8004ad6 <_vfiprintf_r+0x15e>
 8004b48:	4341      	muls	r1, r0
 8004b4a:	002e      	movs	r6, r5
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	1889      	adds	r1, r1, r2
 8004b50:	e7f1      	b.n	8004b36 <_vfiprintf_r+0x1be>
 8004b52:	aa07      	add	r2, sp, #28
 8004b54:	9200      	str	r2, [sp, #0]
 8004b56:	0021      	movs	r1, r4
 8004b58:	003a      	movs	r2, r7
 8004b5a:	4b14      	ldr	r3, [pc, #80]	@ (8004bac <_vfiprintf_r+0x234>)
 8004b5c:	9803      	ldr	r0, [sp, #12]
 8004b5e:	e000      	b.n	8004b62 <_vfiprintf_r+0x1ea>
 8004b60:	bf00      	nop
 8004b62:	9004      	str	r0, [sp, #16]
 8004b64:	9b04      	ldr	r3, [sp, #16]
 8004b66:	3301      	adds	r3, #1
 8004b68:	d1d6      	bne.n	8004b18 <_vfiprintf_r+0x1a0>
 8004b6a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b6c:	07db      	lsls	r3, r3, #31
 8004b6e:	d405      	bmi.n	8004b7c <_vfiprintf_r+0x204>
 8004b70:	89bb      	ldrh	r3, [r7, #12]
 8004b72:	059b      	lsls	r3, r3, #22
 8004b74:	d402      	bmi.n	8004b7c <_vfiprintf_r+0x204>
 8004b76:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004b78:	f7ff fece 	bl	8004918 <__retarget_lock_release_recursive>
 8004b7c:	89bb      	ldrh	r3, [r7, #12]
 8004b7e:	065b      	lsls	r3, r3, #25
 8004b80:	d500      	bpl.n	8004b84 <_vfiprintf_r+0x20c>
 8004b82:	e71e      	b.n	80049c2 <_vfiprintf_r+0x4a>
 8004b84:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8004b86:	e71e      	b.n	80049c6 <_vfiprintf_r+0x4e>
 8004b88:	aa07      	add	r2, sp, #28
 8004b8a:	9200      	str	r2, [sp, #0]
 8004b8c:	0021      	movs	r1, r4
 8004b8e:	003a      	movs	r2, r7
 8004b90:	4b06      	ldr	r3, [pc, #24]	@ (8004bac <_vfiprintf_r+0x234>)
 8004b92:	9803      	ldr	r0, [sp, #12]
 8004b94:	f000 f91e 	bl	8004dd4 <_printf_i>
 8004b98:	e7e3      	b.n	8004b62 <_vfiprintf_r+0x1ea>
 8004b9a:	46c0      	nop			@ (mov r8, r8)
 8004b9c:	08005984 	.word	0x08005984
 8004ba0:	0800598a 	.word	0x0800598a
 8004ba4:	0800598e 	.word	0x0800598e
 8004ba8:	00000000 	.word	0x00000000
 8004bac:	08004953 	.word	0x08004953

08004bb0 <sbrk_aligned>:
 8004bb0:	b570      	push	{r4, r5, r6, lr}
 8004bb2:	4e0f      	ldr	r6, [pc, #60]	@ (8004bf0 <sbrk_aligned+0x40>)
 8004bb4:	000d      	movs	r5, r1
 8004bb6:	6831      	ldr	r1, [r6, #0]
 8004bb8:	0004      	movs	r4, r0
 8004bba:	2900      	cmp	r1, #0
 8004bbc:	d102      	bne.n	8004bc4 <sbrk_aligned+0x14>
 8004bbe:	f000 fcd9 	bl	8005574 <_sbrk_r>
 8004bc2:	6030      	str	r0, [r6, #0]
 8004bc4:	0029      	movs	r1, r5
 8004bc6:	0020      	movs	r0, r4
 8004bc8:	f000 fcd4 	bl	8005574 <_sbrk_r>
 8004bcc:	1c43      	adds	r3, r0, #1
 8004bce:	d103      	bne.n	8004bd8 <sbrk_aligned+0x28>
 8004bd0:	2501      	movs	r5, #1
 8004bd2:	426d      	negs	r5, r5
 8004bd4:	0028      	movs	r0, r5
 8004bd6:	bd70      	pop	{r4, r5, r6, pc}
 8004bd8:	2303      	movs	r3, #3
 8004bda:	1cc5      	adds	r5, r0, #3
 8004bdc:	439d      	bics	r5, r3
 8004bde:	42a8      	cmp	r0, r5
 8004be0:	d0f8      	beq.n	8004bd4 <sbrk_aligned+0x24>
 8004be2:	1a29      	subs	r1, r5, r0
 8004be4:	0020      	movs	r0, r4
 8004be6:	f000 fcc5 	bl	8005574 <_sbrk_r>
 8004bea:	3001      	adds	r0, #1
 8004bec:	d1f2      	bne.n	8004bd4 <sbrk_aligned+0x24>
 8004bee:	e7ef      	b.n	8004bd0 <sbrk_aligned+0x20>
 8004bf0:	200003c0 	.word	0x200003c0

08004bf4 <_malloc_r>:
 8004bf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004bf6:	2203      	movs	r2, #3
 8004bf8:	1ccb      	adds	r3, r1, #3
 8004bfa:	4393      	bics	r3, r2
 8004bfc:	3308      	adds	r3, #8
 8004bfe:	0005      	movs	r5, r0
 8004c00:	001f      	movs	r7, r3
 8004c02:	2b0c      	cmp	r3, #12
 8004c04:	d234      	bcs.n	8004c70 <_malloc_r+0x7c>
 8004c06:	270c      	movs	r7, #12
 8004c08:	42b9      	cmp	r1, r7
 8004c0a:	d833      	bhi.n	8004c74 <_malloc_r+0x80>
 8004c0c:	0028      	movs	r0, r5
 8004c0e:	f000 faa1 	bl	8005154 <__malloc_lock>
 8004c12:	4e37      	ldr	r6, [pc, #220]	@ (8004cf0 <_malloc_r+0xfc>)
 8004c14:	6833      	ldr	r3, [r6, #0]
 8004c16:	001c      	movs	r4, r3
 8004c18:	2c00      	cmp	r4, #0
 8004c1a:	d12f      	bne.n	8004c7c <_malloc_r+0x88>
 8004c1c:	0039      	movs	r1, r7
 8004c1e:	0028      	movs	r0, r5
 8004c20:	f7ff ffc6 	bl	8004bb0 <sbrk_aligned>
 8004c24:	0004      	movs	r4, r0
 8004c26:	1c43      	adds	r3, r0, #1
 8004c28:	d15f      	bne.n	8004cea <_malloc_r+0xf6>
 8004c2a:	6834      	ldr	r4, [r6, #0]
 8004c2c:	9400      	str	r4, [sp, #0]
 8004c2e:	9b00      	ldr	r3, [sp, #0]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d14a      	bne.n	8004cca <_malloc_r+0xd6>
 8004c34:	2c00      	cmp	r4, #0
 8004c36:	d052      	beq.n	8004cde <_malloc_r+0xea>
 8004c38:	6823      	ldr	r3, [r4, #0]
 8004c3a:	0028      	movs	r0, r5
 8004c3c:	18e3      	adds	r3, r4, r3
 8004c3e:	9900      	ldr	r1, [sp, #0]
 8004c40:	9301      	str	r3, [sp, #4]
 8004c42:	f000 fc97 	bl	8005574 <_sbrk_r>
 8004c46:	9b01      	ldr	r3, [sp, #4]
 8004c48:	4283      	cmp	r3, r0
 8004c4a:	d148      	bne.n	8004cde <_malloc_r+0xea>
 8004c4c:	6823      	ldr	r3, [r4, #0]
 8004c4e:	0028      	movs	r0, r5
 8004c50:	1aff      	subs	r7, r7, r3
 8004c52:	0039      	movs	r1, r7
 8004c54:	f7ff ffac 	bl	8004bb0 <sbrk_aligned>
 8004c58:	3001      	adds	r0, #1
 8004c5a:	d040      	beq.n	8004cde <_malloc_r+0xea>
 8004c5c:	6823      	ldr	r3, [r4, #0]
 8004c5e:	19db      	adds	r3, r3, r7
 8004c60:	6023      	str	r3, [r4, #0]
 8004c62:	6833      	ldr	r3, [r6, #0]
 8004c64:	685a      	ldr	r2, [r3, #4]
 8004c66:	2a00      	cmp	r2, #0
 8004c68:	d133      	bne.n	8004cd2 <_malloc_r+0xde>
 8004c6a:	9b00      	ldr	r3, [sp, #0]
 8004c6c:	6033      	str	r3, [r6, #0]
 8004c6e:	e019      	b.n	8004ca4 <_malloc_r+0xb0>
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	dac9      	bge.n	8004c08 <_malloc_r+0x14>
 8004c74:	230c      	movs	r3, #12
 8004c76:	602b      	str	r3, [r5, #0]
 8004c78:	2000      	movs	r0, #0
 8004c7a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004c7c:	6821      	ldr	r1, [r4, #0]
 8004c7e:	1bc9      	subs	r1, r1, r7
 8004c80:	d420      	bmi.n	8004cc4 <_malloc_r+0xd0>
 8004c82:	290b      	cmp	r1, #11
 8004c84:	d90a      	bls.n	8004c9c <_malloc_r+0xa8>
 8004c86:	19e2      	adds	r2, r4, r7
 8004c88:	6027      	str	r7, [r4, #0]
 8004c8a:	42a3      	cmp	r3, r4
 8004c8c:	d104      	bne.n	8004c98 <_malloc_r+0xa4>
 8004c8e:	6032      	str	r2, [r6, #0]
 8004c90:	6863      	ldr	r3, [r4, #4]
 8004c92:	6011      	str	r1, [r2, #0]
 8004c94:	6053      	str	r3, [r2, #4]
 8004c96:	e005      	b.n	8004ca4 <_malloc_r+0xb0>
 8004c98:	605a      	str	r2, [r3, #4]
 8004c9a:	e7f9      	b.n	8004c90 <_malloc_r+0x9c>
 8004c9c:	6862      	ldr	r2, [r4, #4]
 8004c9e:	42a3      	cmp	r3, r4
 8004ca0:	d10e      	bne.n	8004cc0 <_malloc_r+0xcc>
 8004ca2:	6032      	str	r2, [r6, #0]
 8004ca4:	0028      	movs	r0, r5
 8004ca6:	f000 fa5d 	bl	8005164 <__malloc_unlock>
 8004caa:	0020      	movs	r0, r4
 8004cac:	2207      	movs	r2, #7
 8004cae:	300b      	adds	r0, #11
 8004cb0:	1d23      	adds	r3, r4, #4
 8004cb2:	4390      	bics	r0, r2
 8004cb4:	1ac2      	subs	r2, r0, r3
 8004cb6:	4298      	cmp	r0, r3
 8004cb8:	d0df      	beq.n	8004c7a <_malloc_r+0x86>
 8004cba:	1a1b      	subs	r3, r3, r0
 8004cbc:	50a3      	str	r3, [r4, r2]
 8004cbe:	e7dc      	b.n	8004c7a <_malloc_r+0x86>
 8004cc0:	605a      	str	r2, [r3, #4]
 8004cc2:	e7ef      	b.n	8004ca4 <_malloc_r+0xb0>
 8004cc4:	0023      	movs	r3, r4
 8004cc6:	6864      	ldr	r4, [r4, #4]
 8004cc8:	e7a6      	b.n	8004c18 <_malloc_r+0x24>
 8004cca:	9c00      	ldr	r4, [sp, #0]
 8004ccc:	6863      	ldr	r3, [r4, #4]
 8004cce:	9300      	str	r3, [sp, #0]
 8004cd0:	e7ad      	b.n	8004c2e <_malloc_r+0x3a>
 8004cd2:	001a      	movs	r2, r3
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	42a3      	cmp	r3, r4
 8004cd8:	d1fb      	bne.n	8004cd2 <_malloc_r+0xde>
 8004cda:	2300      	movs	r3, #0
 8004cdc:	e7da      	b.n	8004c94 <_malloc_r+0xa0>
 8004cde:	230c      	movs	r3, #12
 8004ce0:	0028      	movs	r0, r5
 8004ce2:	602b      	str	r3, [r5, #0]
 8004ce4:	f000 fa3e 	bl	8005164 <__malloc_unlock>
 8004ce8:	e7c6      	b.n	8004c78 <_malloc_r+0x84>
 8004cea:	6007      	str	r7, [r0, #0]
 8004cec:	e7da      	b.n	8004ca4 <_malloc_r+0xb0>
 8004cee:	46c0      	nop			@ (mov r8, r8)
 8004cf0:	200003c4 	.word	0x200003c4

08004cf4 <_printf_common>:
 8004cf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004cf6:	0016      	movs	r6, r2
 8004cf8:	9301      	str	r3, [sp, #4]
 8004cfa:	688a      	ldr	r2, [r1, #8]
 8004cfc:	690b      	ldr	r3, [r1, #16]
 8004cfe:	000c      	movs	r4, r1
 8004d00:	9000      	str	r0, [sp, #0]
 8004d02:	4293      	cmp	r3, r2
 8004d04:	da00      	bge.n	8004d08 <_printf_common+0x14>
 8004d06:	0013      	movs	r3, r2
 8004d08:	0022      	movs	r2, r4
 8004d0a:	6033      	str	r3, [r6, #0]
 8004d0c:	3243      	adds	r2, #67	@ 0x43
 8004d0e:	7812      	ldrb	r2, [r2, #0]
 8004d10:	2a00      	cmp	r2, #0
 8004d12:	d001      	beq.n	8004d18 <_printf_common+0x24>
 8004d14:	3301      	adds	r3, #1
 8004d16:	6033      	str	r3, [r6, #0]
 8004d18:	6823      	ldr	r3, [r4, #0]
 8004d1a:	069b      	lsls	r3, r3, #26
 8004d1c:	d502      	bpl.n	8004d24 <_printf_common+0x30>
 8004d1e:	6833      	ldr	r3, [r6, #0]
 8004d20:	3302      	adds	r3, #2
 8004d22:	6033      	str	r3, [r6, #0]
 8004d24:	6822      	ldr	r2, [r4, #0]
 8004d26:	2306      	movs	r3, #6
 8004d28:	0015      	movs	r5, r2
 8004d2a:	401d      	ands	r5, r3
 8004d2c:	421a      	tst	r2, r3
 8004d2e:	d027      	beq.n	8004d80 <_printf_common+0x8c>
 8004d30:	0023      	movs	r3, r4
 8004d32:	3343      	adds	r3, #67	@ 0x43
 8004d34:	781b      	ldrb	r3, [r3, #0]
 8004d36:	1e5a      	subs	r2, r3, #1
 8004d38:	4193      	sbcs	r3, r2
 8004d3a:	6822      	ldr	r2, [r4, #0]
 8004d3c:	0692      	lsls	r2, r2, #26
 8004d3e:	d430      	bmi.n	8004da2 <_printf_common+0xae>
 8004d40:	0022      	movs	r2, r4
 8004d42:	9901      	ldr	r1, [sp, #4]
 8004d44:	9800      	ldr	r0, [sp, #0]
 8004d46:	9d08      	ldr	r5, [sp, #32]
 8004d48:	3243      	adds	r2, #67	@ 0x43
 8004d4a:	47a8      	blx	r5
 8004d4c:	3001      	adds	r0, #1
 8004d4e:	d025      	beq.n	8004d9c <_printf_common+0xa8>
 8004d50:	2206      	movs	r2, #6
 8004d52:	6823      	ldr	r3, [r4, #0]
 8004d54:	2500      	movs	r5, #0
 8004d56:	4013      	ands	r3, r2
 8004d58:	2b04      	cmp	r3, #4
 8004d5a:	d105      	bne.n	8004d68 <_printf_common+0x74>
 8004d5c:	6833      	ldr	r3, [r6, #0]
 8004d5e:	68e5      	ldr	r5, [r4, #12]
 8004d60:	1aed      	subs	r5, r5, r3
 8004d62:	43eb      	mvns	r3, r5
 8004d64:	17db      	asrs	r3, r3, #31
 8004d66:	401d      	ands	r5, r3
 8004d68:	68a3      	ldr	r3, [r4, #8]
 8004d6a:	6922      	ldr	r2, [r4, #16]
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	dd01      	ble.n	8004d74 <_printf_common+0x80>
 8004d70:	1a9b      	subs	r3, r3, r2
 8004d72:	18ed      	adds	r5, r5, r3
 8004d74:	2600      	movs	r6, #0
 8004d76:	42b5      	cmp	r5, r6
 8004d78:	d120      	bne.n	8004dbc <_printf_common+0xc8>
 8004d7a:	2000      	movs	r0, #0
 8004d7c:	e010      	b.n	8004da0 <_printf_common+0xac>
 8004d7e:	3501      	adds	r5, #1
 8004d80:	68e3      	ldr	r3, [r4, #12]
 8004d82:	6832      	ldr	r2, [r6, #0]
 8004d84:	1a9b      	subs	r3, r3, r2
 8004d86:	42ab      	cmp	r3, r5
 8004d88:	ddd2      	ble.n	8004d30 <_printf_common+0x3c>
 8004d8a:	0022      	movs	r2, r4
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	9901      	ldr	r1, [sp, #4]
 8004d90:	9800      	ldr	r0, [sp, #0]
 8004d92:	9f08      	ldr	r7, [sp, #32]
 8004d94:	3219      	adds	r2, #25
 8004d96:	47b8      	blx	r7
 8004d98:	3001      	adds	r0, #1
 8004d9a:	d1f0      	bne.n	8004d7e <_printf_common+0x8a>
 8004d9c:	2001      	movs	r0, #1
 8004d9e:	4240      	negs	r0, r0
 8004da0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004da2:	2030      	movs	r0, #48	@ 0x30
 8004da4:	18e1      	adds	r1, r4, r3
 8004da6:	3143      	adds	r1, #67	@ 0x43
 8004da8:	7008      	strb	r0, [r1, #0]
 8004daa:	0021      	movs	r1, r4
 8004dac:	1c5a      	adds	r2, r3, #1
 8004dae:	3145      	adds	r1, #69	@ 0x45
 8004db0:	7809      	ldrb	r1, [r1, #0]
 8004db2:	18a2      	adds	r2, r4, r2
 8004db4:	3243      	adds	r2, #67	@ 0x43
 8004db6:	3302      	adds	r3, #2
 8004db8:	7011      	strb	r1, [r2, #0]
 8004dba:	e7c1      	b.n	8004d40 <_printf_common+0x4c>
 8004dbc:	0022      	movs	r2, r4
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	9901      	ldr	r1, [sp, #4]
 8004dc2:	9800      	ldr	r0, [sp, #0]
 8004dc4:	9f08      	ldr	r7, [sp, #32]
 8004dc6:	321a      	adds	r2, #26
 8004dc8:	47b8      	blx	r7
 8004dca:	3001      	adds	r0, #1
 8004dcc:	d0e6      	beq.n	8004d9c <_printf_common+0xa8>
 8004dce:	3601      	adds	r6, #1
 8004dd0:	e7d1      	b.n	8004d76 <_printf_common+0x82>
	...

08004dd4 <_printf_i>:
 8004dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004dd6:	b08b      	sub	sp, #44	@ 0x2c
 8004dd8:	9206      	str	r2, [sp, #24]
 8004dda:	000a      	movs	r2, r1
 8004ddc:	3243      	adds	r2, #67	@ 0x43
 8004dde:	9307      	str	r3, [sp, #28]
 8004de0:	9005      	str	r0, [sp, #20]
 8004de2:	9203      	str	r2, [sp, #12]
 8004de4:	7e0a      	ldrb	r2, [r1, #24]
 8004de6:	000c      	movs	r4, r1
 8004de8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004dea:	2a78      	cmp	r2, #120	@ 0x78
 8004dec:	d809      	bhi.n	8004e02 <_printf_i+0x2e>
 8004dee:	2a62      	cmp	r2, #98	@ 0x62
 8004df0:	d80b      	bhi.n	8004e0a <_printf_i+0x36>
 8004df2:	2a00      	cmp	r2, #0
 8004df4:	d100      	bne.n	8004df8 <_printf_i+0x24>
 8004df6:	e0bc      	b.n	8004f72 <_printf_i+0x19e>
 8004df8:	497b      	ldr	r1, [pc, #492]	@ (8004fe8 <_printf_i+0x214>)
 8004dfa:	9104      	str	r1, [sp, #16]
 8004dfc:	2a58      	cmp	r2, #88	@ 0x58
 8004dfe:	d100      	bne.n	8004e02 <_printf_i+0x2e>
 8004e00:	e090      	b.n	8004f24 <_printf_i+0x150>
 8004e02:	0025      	movs	r5, r4
 8004e04:	3542      	adds	r5, #66	@ 0x42
 8004e06:	702a      	strb	r2, [r5, #0]
 8004e08:	e022      	b.n	8004e50 <_printf_i+0x7c>
 8004e0a:	0010      	movs	r0, r2
 8004e0c:	3863      	subs	r0, #99	@ 0x63
 8004e0e:	2815      	cmp	r0, #21
 8004e10:	d8f7      	bhi.n	8004e02 <_printf_i+0x2e>
 8004e12:	f7fb f98b 	bl	800012c <__gnu_thumb1_case_shi>
 8004e16:	0016      	.short	0x0016
 8004e18:	fff6001f 	.word	0xfff6001f
 8004e1c:	fff6fff6 	.word	0xfff6fff6
 8004e20:	001ffff6 	.word	0x001ffff6
 8004e24:	fff6fff6 	.word	0xfff6fff6
 8004e28:	fff6fff6 	.word	0xfff6fff6
 8004e2c:	003600a1 	.word	0x003600a1
 8004e30:	fff60080 	.word	0xfff60080
 8004e34:	00b2fff6 	.word	0x00b2fff6
 8004e38:	0036fff6 	.word	0x0036fff6
 8004e3c:	fff6fff6 	.word	0xfff6fff6
 8004e40:	0084      	.short	0x0084
 8004e42:	0025      	movs	r5, r4
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	3542      	adds	r5, #66	@ 0x42
 8004e48:	1d11      	adds	r1, r2, #4
 8004e4a:	6019      	str	r1, [r3, #0]
 8004e4c:	6813      	ldr	r3, [r2, #0]
 8004e4e:	702b      	strb	r3, [r5, #0]
 8004e50:	2301      	movs	r3, #1
 8004e52:	e0a0      	b.n	8004f96 <_printf_i+0x1c2>
 8004e54:	6818      	ldr	r0, [r3, #0]
 8004e56:	6809      	ldr	r1, [r1, #0]
 8004e58:	1d02      	adds	r2, r0, #4
 8004e5a:	060d      	lsls	r5, r1, #24
 8004e5c:	d50b      	bpl.n	8004e76 <_printf_i+0xa2>
 8004e5e:	6806      	ldr	r6, [r0, #0]
 8004e60:	601a      	str	r2, [r3, #0]
 8004e62:	2e00      	cmp	r6, #0
 8004e64:	da03      	bge.n	8004e6e <_printf_i+0x9a>
 8004e66:	232d      	movs	r3, #45	@ 0x2d
 8004e68:	9a03      	ldr	r2, [sp, #12]
 8004e6a:	4276      	negs	r6, r6
 8004e6c:	7013      	strb	r3, [r2, #0]
 8004e6e:	4b5e      	ldr	r3, [pc, #376]	@ (8004fe8 <_printf_i+0x214>)
 8004e70:	270a      	movs	r7, #10
 8004e72:	9304      	str	r3, [sp, #16]
 8004e74:	e018      	b.n	8004ea8 <_printf_i+0xd4>
 8004e76:	6806      	ldr	r6, [r0, #0]
 8004e78:	601a      	str	r2, [r3, #0]
 8004e7a:	0649      	lsls	r1, r1, #25
 8004e7c:	d5f1      	bpl.n	8004e62 <_printf_i+0x8e>
 8004e7e:	b236      	sxth	r6, r6
 8004e80:	e7ef      	b.n	8004e62 <_printf_i+0x8e>
 8004e82:	6808      	ldr	r0, [r1, #0]
 8004e84:	6819      	ldr	r1, [r3, #0]
 8004e86:	c940      	ldmia	r1!, {r6}
 8004e88:	0605      	lsls	r5, r0, #24
 8004e8a:	d402      	bmi.n	8004e92 <_printf_i+0xbe>
 8004e8c:	0640      	lsls	r0, r0, #25
 8004e8e:	d500      	bpl.n	8004e92 <_printf_i+0xbe>
 8004e90:	b2b6      	uxth	r6, r6
 8004e92:	6019      	str	r1, [r3, #0]
 8004e94:	4b54      	ldr	r3, [pc, #336]	@ (8004fe8 <_printf_i+0x214>)
 8004e96:	270a      	movs	r7, #10
 8004e98:	9304      	str	r3, [sp, #16]
 8004e9a:	2a6f      	cmp	r2, #111	@ 0x6f
 8004e9c:	d100      	bne.n	8004ea0 <_printf_i+0xcc>
 8004e9e:	3f02      	subs	r7, #2
 8004ea0:	0023      	movs	r3, r4
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	3343      	adds	r3, #67	@ 0x43
 8004ea6:	701a      	strb	r2, [r3, #0]
 8004ea8:	6863      	ldr	r3, [r4, #4]
 8004eaa:	60a3      	str	r3, [r4, #8]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	db03      	blt.n	8004eb8 <_printf_i+0xe4>
 8004eb0:	2104      	movs	r1, #4
 8004eb2:	6822      	ldr	r2, [r4, #0]
 8004eb4:	438a      	bics	r2, r1
 8004eb6:	6022      	str	r2, [r4, #0]
 8004eb8:	2e00      	cmp	r6, #0
 8004eba:	d102      	bne.n	8004ec2 <_printf_i+0xee>
 8004ebc:	9d03      	ldr	r5, [sp, #12]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d00c      	beq.n	8004edc <_printf_i+0x108>
 8004ec2:	9d03      	ldr	r5, [sp, #12]
 8004ec4:	0030      	movs	r0, r6
 8004ec6:	0039      	movs	r1, r7
 8004ec8:	f7fb f9c0 	bl	800024c <__aeabi_uidivmod>
 8004ecc:	9b04      	ldr	r3, [sp, #16]
 8004ece:	3d01      	subs	r5, #1
 8004ed0:	5c5b      	ldrb	r3, [r3, r1]
 8004ed2:	702b      	strb	r3, [r5, #0]
 8004ed4:	0033      	movs	r3, r6
 8004ed6:	0006      	movs	r6, r0
 8004ed8:	429f      	cmp	r7, r3
 8004eda:	d9f3      	bls.n	8004ec4 <_printf_i+0xf0>
 8004edc:	2f08      	cmp	r7, #8
 8004ede:	d109      	bne.n	8004ef4 <_printf_i+0x120>
 8004ee0:	6823      	ldr	r3, [r4, #0]
 8004ee2:	07db      	lsls	r3, r3, #31
 8004ee4:	d506      	bpl.n	8004ef4 <_printf_i+0x120>
 8004ee6:	6862      	ldr	r2, [r4, #4]
 8004ee8:	6923      	ldr	r3, [r4, #16]
 8004eea:	429a      	cmp	r2, r3
 8004eec:	dc02      	bgt.n	8004ef4 <_printf_i+0x120>
 8004eee:	2330      	movs	r3, #48	@ 0x30
 8004ef0:	3d01      	subs	r5, #1
 8004ef2:	702b      	strb	r3, [r5, #0]
 8004ef4:	9b03      	ldr	r3, [sp, #12]
 8004ef6:	1b5b      	subs	r3, r3, r5
 8004ef8:	6123      	str	r3, [r4, #16]
 8004efa:	9b07      	ldr	r3, [sp, #28]
 8004efc:	0021      	movs	r1, r4
 8004efe:	9300      	str	r3, [sp, #0]
 8004f00:	9805      	ldr	r0, [sp, #20]
 8004f02:	9b06      	ldr	r3, [sp, #24]
 8004f04:	aa09      	add	r2, sp, #36	@ 0x24
 8004f06:	f7ff fef5 	bl	8004cf4 <_printf_common>
 8004f0a:	3001      	adds	r0, #1
 8004f0c:	d148      	bne.n	8004fa0 <_printf_i+0x1cc>
 8004f0e:	2001      	movs	r0, #1
 8004f10:	4240      	negs	r0, r0
 8004f12:	b00b      	add	sp, #44	@ 0x2c
 8004f14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f16:	2220      	movs	r2, #32
 8004f18:	6809      	ldr	r1, [r1, #0]
 8004f1a:	430a      	orrs	r2, r1
 8004f1c:	6022      	str	r2, [r4, #0]
 8004f1e:	2278      	movs	r2, #120	@ 0x78
 8004f20:	4932      	ldr	r1, [pc, #200]	@ (8004fec <_printf_i+0x218>)
 8004f22:	9104      	str	r1, [sp, #16]
 8004f24:	0021      	movs	r1, r4
 8004f26:	3145      	adds	r1, #69	@ 0x45
 8004f28:	700a      	strb	r2, [r1, #0]
 8004f2a:	6819      	ldr	r1, [r3, #0]
 8004f2c:	6822      	ldr	r2, [r4, #0]
 8004f2e:	c940      	ldmia	r1!, {r6}
 8004f30:	0610      	lsls	r0, r2, #24
 8004f32:	d402      	bmi.n	8004f3a <_printf_i+0x166>
 8004f34:	0650      	lsls	r0, r2, #25
 8004f36:	d500      	bpl.n	8004f3a <_printf_i+0x166>
 8004f38:	b2b6      	uxth	r6, r6
 8004f3a:	6019      	str	r1, [r3, #0]
 8004f3c:	07d3      	lsls	r3, r2, #31
 8004f3e:	d502      	bpl.n	8004f46 <_printf_i+0x172>
 8004f40:	2320      	movs	r3, #32
 8004f42:	4313      	orrs	r3, r2
 8004f44:	6023      	str	r3, [r4, #0]
 8004f46:	2e00      	cmp	r6, #0
 8004f48:	d001      	beq.n	8004f4e <_printf_i+0x17a>
 8004f4a:	2710      	movs	r7, #16
 8004f4c:	e7a8      	b.n	8004ea0 <_printf_i+0xcc>
 8004f4e:	2220      	movs	r2, #32
 8004f50:	6823      	ldr	r3, [r4, #0]
 8004f52:	4393      	bics	r3, r2
 8004f54:	6023      	str	r3, [r4, #0]
 8004f56:	e7f8      	b.n	8004f4a <_printf_i+0x176>
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	680d      	ldr	r5, [r1, #0]
 8004f5c:	1d10      	adds	r0, r2, #4
 8004f5e:	6949      	ldr	r1, [r1, #20]
 8004f60:	6018      	str	r0, [r3, #0]
 8004f62:	6813      	ldr	r3, [r2, #0]
 8004f64:	062e      	lsls	r6, r5, #24
 8004f66:	d501      	bpl.n	8004f6c <_printf_i+0x198>
 8004f68:	6019      	str	r1, [r3, #0]
 8004f6a:	e002      	b.n	8004f72 <_printf_i+0x19e>
 8004f6c:	066d      	lsls	r5, r5, #25
 8004f6e:	d5fb      	bpl.n	8004f68 <_printf_i+0x194>
 8004f70:	8019      	strh	r1, [r3, #0]
 8004f72:	2300      	movs	r3, #0
 8004f74:	9d03      	ldr	r5, [sp, #12]
 8004f76:	6123      	str	r3, [r4, #16]
 8004f78:	e7bf      	b.n	8004efa <_printf_i+0x126>
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	1d11      	adds	r1, r2, #4
 8004f7e:	6019      	str	r1, [r3, #0]
 8004f80:	6815      	ldr	r5, [r2, #0]
 8004f82:	2100      	movs	r1, #0
 8004f84:	0028      	movs	r0, r5
 8004f86:	6862      	ldr	r2, [r4, #4]
 8004f88:	f000 fb1a 	bl	80055c0 <memchr>
 8004f8c:	2800      	cmp	r0, #0
 8004f8e:	d001      	beq.n	8004f94 <_printf_i+0x1c0>
 8004f90:	1b40      	subs	r0, r0, r5
 8004f92:	6060      	str	r0, [r4, #4]
 8004f94:	6863      	ldr	r3, [r4, #4]
 8004f96:	6123      	str	r3, [r4, #16]
 8004f98:	2300      	movs	r3, #0
 8004f9a:	9a03      	ldr	r2, [sp, #12]
 8004f9c:	7013      	strb	r3, [r2, #0]
 8004f9e:	e7ac      	b.n	8004efa <_printf_i+0x126>
 8004fa0:	002a      	movs	r2, r5
 8004fa2:	6923      	ldr	r3, [r4, #16]
 8004fa4:	9906      	ldr	r1, [sp, #24]
 8004fa6:	9805      	ldr	r0, [sp, #20]
 8004fa8:	9d07      	ldr	r5, [sp, #28]
 8004faa:	47a8      	blx	r5
 8004fac:	3001      	adds	r0, #1
 8004fae:	d0ae      	beq.n	8004f0e <_printf_i+0x13a>
 8004fb0:	6823      	ldr	r3, [r4, #0]
 8004fb2:	079b      	lsls	r3, r3, #30
 8004fb4:	d415      	bmi.n	8004fe2 <_printf_i+0x20e>
 8004fb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004fb8:	68e0      	ldr	r0, [r4, #12]
 8004fba:	4298      	cmp	r0, r3
 8004fbc:	daa9      	bge.n	8004f12 <_printf_i+0x13e>
 8004fbe:	0018      	movs	r0, r3
 8004fc0:	e7a7      	b.n	8004f12 <_printf_i+0x13e>
 8004fc2:	0022      	movs	r2, r4
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	9906      	ldr	r1, [sp, #24]
 8004fc8:	9805      	ldr	r0, [sp, #20]
 8004fca:	9e07      	ldr	r6, [sp, #28]
 8004fcc:	3219      	adds	r2, #25
 8004fce:	47b0      	blx	r6
 8004fd0:	3001      	adds	r0, #1
 8004fd2:	d09c      	beq.n	8004f0e <_printf_i+0x13a>
 8004fd4:	3501      	adds	r5, #1
 8004fd6:	68e3      	ldr	r3, [r4, #12]
 8004fd8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004fda:	1a9b      	subs	r3, r3, r2
 8004fdc:	42ab      	cmp	r3, r5
 8004fde:	dcf0      	bgt.n	8004fc2 <_printf_i+0x1ee>
 8004fe0:	e7e9      	b.n	8004fb6 <_printf_i+0x1e2>
 8004fe2:	2500      	movs	r5, #0
 8004fe4:	e7f7      	b.n	8004fd6 <_printf_i+0x202>
 8004fe6:	46c0      	nop			@ (mov r8, r8)
 8004fe8:	08005995 	.word	0x08005995
 8004fec:	080059a6 	.word	0x080059a6

08004ff0 <__sflush_r>:
 8004ff0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004ff2:	220c      	movs	r2, #12
 8004ff4:	5e8b      	ldrsh	r3, [r1, r2]
 8004ff6:	0005      	movs	r5, r0
 8004ff8:	000c      	movs	r4, r1
 8004ffa:	071a      	lsls	r2, r3, #28
 8004ffc:	d456      	bmi.n	80050ac <__sflush_r+0xbc>
 8004ffe:	684a      	ldr	r2, [r1, #4]
 8005000:	2a00      	cmp	r2, #0
 8005002:	dc02      	bgt.n	800500a <__sflush_r+0x1a>
 8005004:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8005006:	2a00      	cmp	r2, #0
 8005008:	dd4e      	ble.n	80050a8 <__sflush_r+0xb8>
 800500a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800500c:	2f00      	cmp	r7, #0
 800500e:	d04b      	beq.n	80050a8 <__sflush_r+0xb8>
 8005010:	2200      	movs	r2, #0
 8005012:	2080      	movs	r0, #128	@ 0x80
 8005014:	682e      	ldr	r6, [r5, #0]
 8005016:	602a      	str	r2, [r5, #0]
 8005018:	001a      	movs	r2, r3
 800501a:	0140      	lsls	r0, r0, #5
 800501c:	6a21      	ldr	r1, [r4, #32]
 800501e:	4002      	ands	r2, r0
 8005020:	4203      	tst	r3, r0
 8005022:	d033      	beq.n	800508c <__sflush_r+0x9c>
 8005024:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005026:	89a3      	ldrh	r3, [r4, #12]
 8005028:	075b      	lsls	r3, r3, #29
 800502a:	d506      	bpl.n	800503a <__sflush_r+0x4a>
 800502c:	6863      	ldr	r3, [r4, #4]
 800502e:	1ad2      	subs	r2, r2, r3
 8005030:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005032:	2b00      	cmp	r3, #0
 8005034:	d001      	beq.n	800503a <__sflush_r+0x4a>
 8005036:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005038:	1ad2      	subs	r2, r2, r3
 800503a:	2300      	movs	r3, #0
 800503c:	0028      	movs	r0, r5
 800503e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8005040:	6a21      	ldr	r1, [r4, #32]
 8005042:	47b8      	blx	r7
 8005044:	89a2      	ldrh	r2, [r4, #12]
 8005046:	1c43      	adds	r3, r0, #1
 8005048:	d106      	bne.n	8005058 <__sflush_r+0x68>
 800504a:	6829      	ldr	r1, [r5, #0]
 800504c:	291d      	cmp	r1, #29
 800504e:	d846      	bhi.n	80050de <__sflush_r+0xee>
 8005050:	4b29      	ldr	r3, [pc, #164]	@ (80050f8 <__sflush_r+0x108>)
 8005052:	410b      	asrs	r3, r1
 8005054:	07db      	lsls	r3, r3, #31
 8005056:	d442      	bmi.n	80050de <__sflush_r+0xee>
 8005058:	2300      	movs	r3, #0
 800505a:	6063      	str	r3, [r4, #4]
 800505c:	6923      	ldr	r3, [r4, #16]
 800505e:	6023      	str	r3, [r4, #0]
 8005060:	04d2      	lsls	r2, r2, #19
 8005062:	d505      	bpl.n	8005070 <__sflush_r+0x80>
 8005064:	1c43      	adds	r3, r0, #1
 8005066:	d102      	bne.n	800506e <__sflush_r+0x7e>
 8005068:	682b      	ldr	r3, [r5, #0]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d100      	bne.n	8005070 <__sflush_r+0x80>
 800506e:	6560      	str	r0, [r4, #84]	@ 0x54
 8005070:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005072:	602e      	str	r6, [r5, #0]
 8005074:	2900      	cmp	r1, #0
 8005076:	d017      	beq.n	80050a8 <__sflush_r+0xb8>
 8005078:	0023      	movs	r3, r4
 800507a:	3344      	adds	r3, #68	@ 0x44
 800507c:	4299      	cmp	r1, r3
 800507e:	d002      	beq.n	8005086 <__sflush_r+0x96>
 8005080:	0028      	movs	r0, r5
 8005082:	f000 faa9 	bl	80055d8 <_free_r>
 8005086:	2300      	movs	r3, #0
 8005088:	6363      	str	r3, [r4, #52]	@ 0x34
 800508a:	e00d      	b.n	80050a8 <__sflush_r+0xb8>
 800508c:	2301      	movs	r3, #1
 800508e:	0028      	movs	r0, r5
 8005090:	47b8      	blx	r7
 8005092:	0002      	movs	r2, r0
 8005094:	1c43      	adds	r3, r0, #1
 8005096:	d1c6      	bne.n	8005026 <__sflush_r+0x36>
 8005098:	682b      	ldr	r3, [r5, #0]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d0c3      	beq.n	8005026 <__sflush_r+0x36>
 800509e:	2b1d      	cmp	r3, #29
 80050a0:	d001      	beq.n	80050a6 <__sflush_r+0xb6>
 80050a2:	2b16      	cmp	r3, #22
 80050a4:	d11a      	bne.n	80050dc <__sflush_r+0xec>
 80050a6:	602e      	str	r6, [r5, #0]
 80050a8:	2000      	movs	r0, #0
 80050aa:	e01e      	b.n	80050ea <__sflush_r+0xfa>
 80050ac:	690e      	ldr	r6, [r1, #16]
 80050ae:	2e00      	cmp	r6, #0
 80050b0:	d0fa      	beq.n	80050a8 <__sflush_r+0xb8>
 80050b2:	680f      	ldr	r7, [r1, #0]
 80050b4:	600e      	str	r6, [r1, #0]
 80050b6:	1bba      	subs	r2, r7, r6
 80050b8:	9201      	str	r2, [sp, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	079b      	lsls	r3, r3, #30
 80050be:	d100      	bne.n	80050c2 <__sflush_r+0xd2>
 80050c0:	694a      	ldr	r2, [r1, #20]
 80050c2:	60a2      	str	r2, [r4, #8]
 80050c4:	9b01      	ldr	r3, [sp, #4]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	ddee      	ble.n	80050a8 <__sflush_r+0xb8>
 80050ca:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80050cc:	0032      	movs	r2, r6
 80050ce:	001f      	movs	r7, r3
 80050d0:	0028      	movs	r0, r5
 80050d2:	9b01      	ldr	r3, [sp, #4]
 80050d4:	6a21      	ldr	r1, [r4, #32]
 80050d6:	47b8      	blx	r7
 80050d8:	2800      	cmp	r0, #0
 80050da:	dc07      	bgt.n	80050ec <__sflush_r+0xfc>
 80050dc:	89a2      	ldrh	r2, [r4, #12]
 80050de:	2340      	movs	r3, #64	@ 0x40
 80050e0:	2001      	movs	r0, #1
 80050e2:	4313      	orrs	r3, r2
 80050e4:	b21b      	sxth	r3, r3
 80050e6:	81a3      	strh	r3, [r4, #12]
 80050e8:	4240      	negs	r0, r0
 80050ea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80050ec:	9b01      	ldr	r3, [sp, #4]
 80050ee:	1836      	adds	r6, r6, r0
 80050f0:	1a1b      	subs	r3, r3, r0
 80050f2:	9301      	str	r3, [sp, #4]
 80050f4:	e7e6      	b.n	80050c4 <__sflush_r+0xd4>
 80050f6:	46c0      	nop			@ (mov r8, r8)
 80050f8:	dfbffffe 	.word	0xdfbffffe

080050fc <_fflush_r>:
 80050fc:	690b      	ldr	r3, [r1, #16]
 80050fe:	b570      	push	{r4, r5, r6, lr}
 8005100:	0005      	movs	r5, r0
 8005102:	000c      	movs	r4, r1
 8005104:	2b00      	cmp	r3, #0
 8005106:	d102      	bne.n	800510e <_fflush_r+0x12>
 8005108:	2500      	movs	r5, #0
 800510a:	0028      	movs	r0, r5
 800510c:	bd70      	pop	{r4, r5, r6, pc}
 800510e:	2800      	cmp	r0, #0
 8005110:	d004      	beq.n	800511c <_fflush_r+0x20>
 8005112:	6a03      	ldr	r3, [r0, #32]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d101      	bne.n	800511c <_fflush_r+0x20>
 8005118:	f7ff fb86 	bl	8004828 <__sinit>
 800511c:	220c      	movs	r2, #12
 800511e:	5ea3      	ldrsh	r3, [r4, r2]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d0f1      	beq.n	8005108 <_fflush_r+0xc>
 8005124:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005126:	07d2      	lsls	r2, r2, #31
 8005128:	d404      	bmi.n	8005134 <_fflush_r+0x38>
 800512a:	059b      	lsls	r3, r3, #22
 800512c:	d402      	bmi.n	8005134 <_fflush_r+0x38>
 800512e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005130:	f7ff fbf1 	bl	8004916 <__retarget_lock_acquire_recursive>
 8005134:	0028      	movs	r0, r5
 8005136:	0021      	movs	r1, r4
 8005138:	f7ff ff5a 	bl	8004ff0 <__sflush_r>
 800513c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800513e:	0005      	movs	r5, r0
 8005140:	07db      	lsls	r3, r3, #31
 8005142:	d4e2      	bmi.n	800510a <_fflush_r+0xe>
 8005144:	89a3      	ldrh	r3, [r4, #12]
 8005146:	059b      	lsls	r3, r3, #22
 8005148:	d4df      	bmi.n	800510a <_fflush_r+0xe>
 800514a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800514c:	f7ff fbe4 	bl	8004918 <__retarget_lock_release_recursive>
 8005150:	e7db      	b.n	800510a <_fflush_r+0xe>
	...

08005154 <__malloc_lock>:
 8005154:	b510      	push	{r4, lr}
 8005156:	4802      	ldr	r0, [pc, #8]	@ (8005160 <__malloc_lock+0xc>)
 8005158:	f7ff fbdd 	bl	8004916 <__retarget_lock_acquire_recursive>
 800515c:	bd10      	pop	{r4, pc}
 800515e:	46c0      	nop			@ (mov r8, r8)
 8005160:	200003bc 	.word	0x200003bc

08005164 <__malloc_unlock>:
 8005164:	b510      	push	{r4, lr}
 8005166:	4802      	ldr	r0, [pc, #8]	@ (8005170 <__malloc_unlock+0xc>)
 8005168:	f7ff fbd6 	bl	8004918 <__retarget_lock_release_recursive>
 800516c:	bd10      	pop	{r4, pc}
 800516e:	46c0      	nop			@ (mov r8, r8)
 8005170:	200003bc 	.word	0x200003bc

08005174 <__sread>:
 8005174:	b570      	push	{r4, r5, r6, lr}
 8005176:	000c      	movs	r4, r1
 8005178:	250e      	movs	r5, #14
 800517a:	5f49      	ldrsh	r1, [r1, r5]
 800517c:	f000 f9d0 	bl	8005520 <_read_r>
 8005180:	2800      	cmp	r0, #0
 8005182:	db03      	blt.n	800518c <__sread+0x18>
 8005184:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8005186:	181b      	adds	r3, r3, r0
 8005188:	6563      	str	r3, [r4, #84]	@ 0x54
 800518a:	bd70      	pop	{r4, r5, r6, pc}
 800518c:	89a3      	ldrh	r3, [r4, #12]
 800518e:	4a02      	ldr	r2, [pc, #8]	@ (8005198 <__sread+0x24>)
 8005190:	4013      	ands	r3, r2
 8005192:	81a3      	strh	r3, [r4, #12]
 8005194:	e7f9      	b.n	800518a <__sread+0x16>
 8005196:	46c0      	nop			@ (mov r8, r8)
 8005198:	ffffefff 	.word	0xffffefff

0800519c <__swrite>:
 800519c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800519e:	001f      	movs	r7, r3
 80051a0:	898b      	ldrh	r3, [r1, #12]
 80051a2:	0005      	movs	r5, r0
 80051a4:	000c      	movs	r4, r1
 80051a6:	0016      	movs	r6, r2
 80051a8:	05db      	lsls	r3, r3, #23
 80051aa:	d505      	bpl.n	80051b8 <__swrite+0x1c>
 80051ac:	230e      	movs	r3, #14
 80051ae:	5ec9      	ldrsh	r1, [r1, r3]
 80051b0:	2200      	movs	r2, #0
 80051b2:	2302      	movs	r3, #2
 80051b4:	f000 f96c 	bl	8005490 <_lseek_r>
 80051b8:	89a3      	ldrh	r3, [r4, #12]
 80051ba:	4a05      	ldr	r2, [pc, #20]	@ (80051d0 <__swrite+0x34>)
 80051bc:	0028      	movs	r0, r5
 80051be:	4013      	ands	r3, r2
 80051c0:	81a3      	strh	r3, [r4, #12]
 80051c2:	0032      	movs	r2, r6
 80051c4:	230e      	movs	r3, #14
 80051c6:	5ee1      	ldrsh	r1, [r4, r3]
 80051c8:	003b      	movs	r3, r7
 80051ca:	f000 f9e5 	bl	8005598 <_write_r>
 80051ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051d0:	ffffefff 	.word	0xffffefff

080051d4 <__sseek>:
 80051d4:	b570      	push	{r4, r5, r6, lr}
 80051d6:	000c      	movs	r4, r1
 80051d8:	250e      	movs	r5, #14
 80051da:	5f49      	ldrsh	r1, [r1, r5]
 80051dc:	f000 f958 	bl	8005490 <_lseek_r>
 80051e0:	89a3      	ldrh	r3, [r4, #12]
 80051e2:	1c42      	adds	r2, r0, #1
 80051e4:	d103      	bne.n	80051ee <__sseek+0x1a>
 80051e6:	4a05      	ldr	r2, [pc, #20]	@ (80051fc <__sseek+0x28>)
 80051e8:	4013      	ands	r3, r2
 80051ea:	81a3      	strh	r3, [r4, #12]
 80051ec:	bd70      	pop	{r4, r5, r6, pc}
 80051ee:	2280      	movs	r2, #128	@ 0x80
 80051f0:	0152      	lsls	r2, r2, #5
 80051f2:	4313      	orrs	r3, r2
 80051f4:	81a3      	strh	r3, [r4, #12]
 80051f6:	6560      	str	r0, [r4, #84]	@ 0x54
 80051f8:	e7f8      	b.n	80051ec <__sseek+0x18>
 80051fa:	46c0      	nop			@ (mov r8, r8)
 80051fc:	ffffefff 	.word	0xffffefff

08005200 <__sclose>:
 8005200:	b510      	push	{r4, lr}
 8005202:	230e      	movs	r3, #14
 8005204:	5ec9      	ldrsh	r1, [r1, r3]
 8005206:	f000 f90d 	bl	8005424 <_close_r>
 800520a:	bd10      	pop	{r4, pc}

0800520c <__swbuf_r>:
 800520c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800520e:	0006      	movs	r6, r0
 8005210:	000d      	movs	r5, r1
 8005212:	0014      	movs	r4, r2
 8005214:	2800      	cmp	r0, #0
 8005216:	d004      	beq.n	8005222 <__swbuf_r+0x16>
 8005218:	6a03      	ldr	r3, [r0, #32]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d101      	bne.n	8005222 <__swbuf_r+0x16>
 800521e:	f7ff fb03 	bl	8004828 <__sinit>
 8005222:	69a3      	ldr	r3, [r4, #24]
 8005224:	60a3      	str	r3, [r4, #8]
 8005226:	89a3      	ldrh	r3, [r4, #12]
 8005228:	071b      	lsls	r3, r3, #28
 800522a:	d502      	bpl.n	8005232 <__swbuf_r+0x26>
 800522c:	6923      	ldr	r3, [r4, #16]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d109      	bne.n	8005246 <__swbuf_r+0x3a>
 8005232:	0021      	movs	r1, r4
 8005234:	0030      	movs	r0, r6
 8005236:	f000 f82b 	bl	8005290 <__swsetup_r>
 800523a:	2800      	cmp	r0, #0
 800523c:	d003      	beq.n	8005246 <__swbuf_r+0x3a>
 800523e:	2501      	movs	r5, #1
 8005240:	426d      	negs	r5, r5
 8005242:	0028      	movs	r0, r5
 8005244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005246:	6923      	ldr	r3, [r4, #16]
 8005248:	6820      	ldr	r0, [r4, #0]
 800524a:	b2ef      	uxtb	r7, r5
 800524c:	1ac0      	subs	r0, r0, r3
 800524e:	6963      	ldr	r3, [r4, #20]
 8005250:	b2ed      	uxtb	r5, r5
 8005252:	4283      	cmp	r3, r0
 8005254:	dc05      	bgt.n	8005262 <__swbuf_r+0x56>
 8005256:	0021      	movs	r1, r4
 8005258:	0030      	movs	r0, r6
 800525a:	f7ff ff4f 	bl	80050fc <_fflush_r>
 800525e:	2800      	cmp	r0, #0
 8005260:	d1ed      	bne.n	800523e <__swbuf_r+0x32>
 8005262:	68a3      	ldr	r3, [r4, #8]
 8005264:	3001      	adds	r0, #1
 8005266:	3b01      	subs	r3, #1
 8005268:	60a3      	str	r3, [r4, #8]
 800526a:	6823      	ldr	r3, [r4, #0]
 800526c:	1c5a      	adds	r2, r3, #1
 800526e:	6022      	str	r2, [r4, #0]
 8005270:	701f      	strb	r7, [r3, #0]
 8005272:	6963      	ldr	r3, [r4, #20]
 8005274:	4283      	cmp	r3, r0
 8005276:	d004      	beq.n	8005282 <__swbuf_r+0x76>
 8005278:	89a3      	ldrh	r3, [r4, #12]
 800527a:	07db      	lsls	r3, r3, #31
 800527c:	d5e1      	bpl.n	8005242 <__swbuf_r+0x36>
 800527e:	2d0a      	cmp	r5, #10
 8005280:	d1df      	bne.n	8005242 <__swbuf_r+0x36>
 8005282:	0021      	movs	r1, r4
 8005284:	0030      	movs	r0, r6
 8005286:	f7ff ff39 	bl	80050fc <_fflush_r>
 800528a:	2800      	cmp	r0, #0
 800528c:	d0d9      	beq.n	8005242 <__swbuf_r+0x36>
 800528e:	e7d6      	b.n	800523e <__swbuf_r+0x32>

08005290 <__swsetup_r>:
 8005290:	4b2d      	ldr	r3, [pc, #180]	@ (8005348 <__swsetup_r+0xb8>)
 8005292:	b570      	push	{r4, r5, r6, lr}
 8005294:	0005      	movs	r5, r0
 8005296:	6818      	ldr	r0, [r3, #0]
 8005298:	000c      	movs	r4, r1
 800529a:	2800      	cmp	r0, #0
 800529c:	d004      	beq.n	80052a8 <__swsetup_r+0x18>
 800529e:	6a03      	ldr	r3, [r0, #32]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d101      	bne.n	80052a8 <__swsetup_r+0x18>
 80052a4:	f7ff fac0 	bl	8004828 <__sinit>
 80052a8:	230c      	movs	r3, #12
 80052aa:	5ee2      	ldrsh	r2, [r4, r3]
 80052ac:	0713      	lsls	r3, r2, #28
 80052ae:	d423      	bmi.n	80052f8 <__swsetup_r+0x68>
 80052b0:	06d3      	lsls	r3, r2, #27
 80052b2:	d407      	bmi.n	80052c4 <__swsetup_r+0x34>
 80052b4:	2309      	movs	r3, #9
 80052b6:	602b      	str	r3, [r5, #0]
 80052b8:	2340      	movs	r3, #64	@ 0x40
 80052ba:	2001      	movs	r0, #1
 80052bc:	4313      	orrs	r3, r2
 80052be:	81a3      	strh	r3, [r4, #12]
 80052c0:	4240      	negs	r0, r0
 80052c2:	e03a      	b.n	800533a <__swsetup_r+0xaa>
 80052c4:	0752      	lsls	r2, r2, #29
 80052c6:	d513      	bpl.n	80052f0 <__swsetup_r+0x60>
 80052c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80052ca:	2900      	cmp	r1, #0
 80052cc:	d008      	beq.n	80052e0 <__swsetup_r+0x50>
 80052ce:	0023      	movs	r3, r4
 80052d0:	3344      	adds	r3, #68	@ 0x44
 80052d2:	4299      	cmp	r1, r3
 80052d4:	d002      	beq.n	80052dc <__swsetup_r+0x4c>
 80052d6:	0028      	movs	r0, r5
 80052d8:	f000 f97e 	bl	80055d8 <_free_r>
 80052dc:	2300      	movs	r3, #0
 80052de:	6363      	str	r3, [r4, #52]	@ 0x34
 80052e0:	2224      	movs	r2, #36	@ 0x24
 80052e2:	89a3      	ldrh	r3, [r4, #12]
 80052e4:	4393      	bics	r3, r2
 80052e6:	81a3      	strh	r3, [r4, #12]
 80052e8:	2300      	movs	r3, #0
 80052ea:	6063      	str	r3, [r4, #4]
 80052ec:	6923      	ldr	r3, [r4, #16]
 80052ee:	6023      	str	r3, [r4, #0]
 80052f0:	2308      	movs	r3, #8
 80052f2:	89a2      	ldrh	r2, [r4, #12]
 80052f4:	4313      	orrs	r3, r2
 80052f6:	81a3      	strh	r3, [r4, #12]
 80052f8:	6923      	ldr	r3, [r4, #16]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d10b      	bne.n	8005316 <__swsetup_r+0x86>
 80052fe:	21a0      	movs	r1, #160	@ 0xa0
 8005300:	2280      	movs	r2, #128	@ 0x80
 8005302:	89a3      	ldrh	r3, [r4, #12]
 8005304:	0089      	lsls	r1, r1, #2
 8005306:	0092      	lsls	r2, r2, #2
 8005308:	400b      	ands	r3, r1
 800530a:	4293      	cmp	r3, r2
 800530c:	d003      	beq.n	8005316 <__swsetup_r+0x86>
 800530e:	0021      	movs	r1, r4
 8005310:	0028      	movs	r0, r5
 8005312:	f000 f845 	bl	80053a0 <__smakebuf_r>
 8005316:	230c      	movs	r3, #12
 8005318:	5ee2      	ldrsh	r2, [r4, r3]
 800531a:	2101      	movs	r1, #1
 800531c:	0013      	movs	r3, r2
 800531e:	400b      	ands	r3, r1
 8005320:	420a      	tst	r2, r1
 8005322:	d00b      	beq.n	800533c <__swsetup_r+0xac>
 8005324:	2300      	movs	r3, #0
 8005326:	60a3      	str	r3, [r4, #8]
 8005328:	6963      	ldr	r3, [r4, #20]
 800532a:	425b      	negs	r3, r3
 800532c:	61a3      	str	r3, [r4, #24]
 800532e:	2000      	movs	r0, #0
 8005330:	6923      	ldr	r3, [r4, #16]
 8005332:	4283      	cmp	r3, r0
 8005334:	d101      	bne.n	800533a <__swsetup_r+0xaa>
 8005336:	0613      	lsls	r3, r2, #24
 8005338:	d4be      	bmi.n	80052b8 <__swsetup_r+0x28>
 800533a:	bd70      	pop	{r4, r5, r6, pc}
 800533c:	0791      	lsls	r1, r2, #30
 800533e:	d400      	bmi.n	8005342 <__swsetup_r+0xb2>
 8005340:	6963      	ldr	r3, [r4, #20]
 8005342:	60a3      	str	r3, [r4, #8]
 8005344:	e7f3      	b.n	800532e <__swsetup_r+0x9e>
 8005346:	46c0      	nop			@ (mov r8, r8)
 8005348:	2000001c 	.word	0x2000001c

0800534c <__swhatbuf_r>:
 800534c:	b570      	push	{r4, r5, r6, lr}
 800534e:	000e      	movs	r6, r1
 8005350:	001d      	movs	r5, r3
 8005352:	230e      	movs	r3, #14
 8005354:	5ec9      	ldrsh	r1, [r1, r3]
 8005356:	0014      	movs	r4, r2
 8005358:	b096      	sub	sp, #88	@ 0x58
 800535a:	2900      	cmp	r1, #0
 800535c:	da0c      	bge.n	8005378 <__swhatbuf_r+0x2c>
 800535e:	89b2      	ldrh	r2, [r6, #12]
 8005360:	2380      	movs	r3, #128	@ 0x80
 8005362:	0011      	movs	r1, r2
 8005364:	4019      	ands	r1, r3
 8005366:	421a      	tst	r2, r3
 8005368:	d114      	bne.n	8005394 <__swhatbuf_r+0x48>
 800536a:	2380      	movs	r3, #128	@ 0x80
 800536c:	00db      	lsls	r3, r3, #3
 800536e:	2000      	movs	r0, #0
 8005370:	6029      	str	r1, [r5, #0]
 8005372:	6023      	str	r3, [r4, #0]
 8005374:	b016      	add	sp, #88	@ 0x58
 8005376:	bd70      	pop	{r4, r5, r6, pc}
 8005378:	466a      	mov	r2, sp
 800537a:	f000 f865 	bl	8005448 <_fstat_r>
 800537e:	2800      	cmp	r0, #0
 8005380:	dbed      	blt.n	800535e <__swhatbuf_r+0x12>
 8005382:	23f0      	movs	r3, #240	@ 0xf0
 8005384:	9901      	ldr	r1, [sp, #4]
 8005386:	021b      	lsls	r3, r3, #8
 8005388:	4019      	ands	r1, r3
 800538a:	4b04      	ldr	r3, [pc, #16]	@ (800539c <__swhatbuf_r+0x50>)
 800538c:	18c9      	adds	r1, r1, r3
 800538e:	424b      	negs	r3, r1
 8005390:	4159      	adcs	r1, r3
 8005392:	e7ea      	b.n	800536a <__swhatbuf_r+0x1e>
 8005394:	2100      	movs	r1, #0
 8005396:	2340      	movs	r3, #64	@ 0x40
 8005398:	e7e9      	b.n	800536e <__swhatbuf_r+0x22>
 800539a:	46c0      	nop			@ (mov r8, r8)
 800539c:	ffffe000 	.word	0xffffe000

080053a0 <__smakebuf_r>:
 80053a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053a2:	2602      	movs	r6, #2
 80053a4:	898b      	ldrh	r3, [r1, #12]
 80053a6:	0005      	movs	r5, r0
 80053a8:	000c      	movs	r4, r1
 80053aa:	b085      	sub	sp, #20
 80053ac:	4233      	tst	r3, r6
 80053ae:	d007      	beq.n	80053c0 <__smakebuf_r+0x20>
 80053b0:	0023      	movs	r3, r4
 80053b2:	3347      	adds	r3, #71	@ 0x47
 80053b4:	6023      	str	r3, [r4, #0]
 80053b6:	6123      	str	r3, [r4, #16]
 80053b8:	2301      	movs	r3, #1
 80053ba:	6163      	str	r3, [r4, #20]
 80053bc:	b005      	add	sp, #20
 80053be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053c0:	ab03      	add	r3, sp, #12
 80053c2:	aa02      	add	r2, sp, #8
 80053c4:	f7ff ffc2 	bl	800534c <__swhatbuf_r>
 80053c8:	9f02      	ldr	r7, [sp, #8]
 80053ca:	9001      	str	r0, [sp, #4]
 80053cc:	0039      	movs	r1, r7
 80053ce:	0028      	movs	r0, r5
 80053d0:	f7ff fc10 	bl	8004bf4 <_malloc_r>
 80053d4:	2800      	cmp	r0, #0
 80053d6:	d108      	bne.n	80053ea <__smakebuf_r+0x4a>
 80053d8:	220c      	movs	r2, #12
 80053da:	5ea3      	ldrsh	r3, [r4, r2]
 80053dc:	059a      	lsls	r2, r3, #22
 80053de:	d4ed      	bmi.n	80053bc <__smakebuf_r+0x1c>
 80053e0:	2203      	movs	r2, #3
 80053e2:	4393      	bics	r3, r2
 80053e4:	431e      	orrs	r6, r3
 80053e6:	81a6      	strh	r6, [r4, #12]
 80053e8:	e7e2      	b.n	80053b0 <__smakebuf_r+0x10>
 80053ea:	2380      	movs	r3, #128	@ 0x80
 80053ec:	89a2      	ldrh	r2, [r4, #12]
 80053ee:	6020      	str	r0, [r4, #0]
 80053f0:	4313      	orrs	r3, r2
 80053f2:	81a3      	strh	r3, [r4, #12]
 80053f4:	9b03      	ldr	r3, [sp, #12]
 80053f6:	6120      	str	r0, [r4, #16]
 80053f8:	6167      	str	r7, [r4, #20]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d00c      	beq.n	8005418 <__smakebuf_r+0x78>
 80053fe:	0028      	movs	r0, r5
 8005400:	230e      	movs	r3, #14
 8005402:	5ee1      	ldrsh	r1, [r4, r3]
 8005404:	f000 f832 	bl	800546c <_isatty_r>
 8005408:	2800      	cmp	r0, #0
 800540a:	d005      	beq.n	8005418 <__smakebuf_r+0x78>
 800540c:	2303      	movs	r3, #3
 800540e:	89a2      	ldrh	r2, [r4, #12]
 8005410:	439a      	bics	r2, r3
 8005412:	3b02      	subs	r3, #2
 8005414:	4313      	orrs	r3, r2
 8005416:	81a3      	strh	r3, [r4, #12]
 8005418:	89a3      	ldrh	r3, [r4, #12]
 800541a:	9a01      	ldr	r2, [sp, #4]
 800541c:	4313      	orrs	r3, r2
 800541e:	81a3      	strh	r3, [r4, #12]
 8005420:	e7cc      	b.n	80053bc <__smakebuf_r+0x1c>
	...

08005424 <_close_r>:
 8005424:	2300      	movs	r3, #0
 8005426:	b570      	push	{r4, r5, r6, lr}
 8005428:	4d06      	ldr	r5, [pc, #24]	@ (8005444 <_close_r+0x20>)
 800542a:	0004      	movs	r4, r0
 800542c:	0008      	movs	r0, r1
 800542e:	602b      	str	r3, [r5, #0]
 8005430:	f7fd f808 	bl	8002444 <_close>
 8005434:	1c43      	adds	r3, r0, #1
 8005436:	d103      	bne.n	8005440 <_close_r+0x1c>
 8005438:	682b      	ldr	r3, [r5, #0]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d000      	beq.n	8005440 <_close_r+0x1c>
 800543e:	6023      	str	r3, [r4, #0]
 8005440:	bd70      	pop	{r4, r5, r6, pc}
 8005442:	46c0      	nop			@ (mov r8, r8)
 8005444:	200003c8 	.word	0x200003c8

08005448 <_fstat_r>:
 8005448:	2300      	movs	r3, #0
 800544a:	b570      	push	{r4, r5, r6, lr}
 800544c:	4d06      	ldr	r5, [pc, #24]	@ (8005468 <_fstat_r+0x20>)
 800544e:	0004      	movs	r4, r0
 8005450:	0008      	movs	r0, r1
 8005452:	0011      	movs	r1, r2
 8005454:	602b      	str	r3, [r5, #0]
 8005456:	f7fc fff8 	bl	800244a <_fstat>
 800545a:	1c43      	adds	r3, r0, #1
 800545c:	d103      	bne.n	8005466 <_fstat_r+0x1e>
 800545e:	682b      	ldr	r3, [r5, #0]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d000      	beq.n	8005466 <_fstat_r+0x1e>
 8005464:	6023      	str	r3, [r4, #0]
 8005466:	bd70      	pop	{r4, r5, r6, pc}
 8005468:	200003c8 	.word	0x200003c8

0800546c <_isatty_r>:
 800546c:	2300      	movs	r3, #0
 800546e:	b570      	push	{r4, r5, r6, lr}
 8005470:	4d06      	ldr	r5, [pc, #24]	@ (800548c <_isatty_r+0x20>)
 8005472:	0004      	movs	r4, r0
 8005474:	0008      	movs	r0, r1
 8005476:	602b      	str	r3, [r5, #0]
 8005478:	f7fc ffec 	bl	8002454 <_isatty>
 800547c:	1c43      	adds	r3, r0, #1
 800547e:	d103      	bne.n	8005488 <_isatty_r+0x1c>
 8005480:	682b      	ldr	r3, [r5, #0]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d000      	beq.n	8005488 <_isatty_r+0x1c>
 8005486:	6023      	str	r3, [r4, #0]
 8005488:	bd70      	pop	{r4, r5, r6, pc}
 800548a:	46c0      	nop			@ (mov r8, r8)
 800548c:	200003c8 	.word	0x200003c8

08005490 <_lseek_r>:
 8005490:	b570      	push	{r4, r5, r6, lr}
 8005492:	0004      	movs	r4, r0
 8005494:	0008      	movs	r0, r1
 8005496:	0011      	movs	r1, r2
 8005498:	001a      	movs	r2, r3
 800549a:	2300      	movs	r3, #0
 800549c:	4d05      	ldr	r5, [pc, #20]	@ (80054b4 <_lseek_r+0x24>)
 800549e:	602b      	str	r3, [r5, #0]
 80054a0:	f7fc ffda 	bl	8002458 <_lseek>
 80054a4:	1c43      	adds	r3, r0, #1
 80054a6:	d103      	bne.n	80054b0 <_lseek_r+0x20>
 80054a8:	682b      	ldr	r3, [r5, #0]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d000      	beq.n	80054b0 <_lseek_r+0x20>
 80054ae:	6023      	str	r3, [r4, #0]
 80054b0:	bd70      	pop	{r4, r5, r6, pc}
 80054b2:	46c0      	nop			@ (mov r8, r8)
 80054b4:	200003c8 	.word	0x200003c8

080054b8 <_raise_r>:
 80054b8:	b570      	push	{r4, r5, r6, lr}
 80054ba:	0004      	movs	r4, r0
 80054bc:	000d      	movs	r5, r1
 80054be:	291f      	cmp	r1, #31
 80054c0:	d904      	bls.n	80054cc <_raise_r+0x14>
 80054c2:	2316      	movs	r3, #22
 80054c4:	6003      	str	r3, [r0, #0]
 80054c6:	2001      	movs	r0, #1
 80054c8:	4240      	negs	r0, r0
 80054ca:	bd70      	pop	{r4, r5, r6, pc}
 80054cc:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d004      	beq.n	80054dc <_raise_r+0x24>
 80054d2:	008a      	lsls	r2, r1, #2
 80054d4:	189b      	adds	r3, r3, r2
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	2a00      	cmp	r2, #0
 80054da:	d108      	bne.n	80054ee <_raise_r+0x36>
 80054dc:	0020      	movs	r0, r4
 80054de:	f000 f845 	bl	800556c <_getpid_r>
 80054e2:	002a      	movs	r2, r5
 80054e4:	0001      	movs	r1, r0
 80054e6:	0020      	movs	r0, r4
 80054e8:	f000 f82e 	bl	8005548 <_kill_r>
 80054ec:	e7ed      	b.n	80054ca <_raise_r+0x12>
 80054ee:	2a01      	cmp	r2, #1
 80054f0:	d009      	beq.n	8005506 <_raise_r+0x4e>
 80054f2:	1c51      	adds	r1, r2, #1
 80054f4:	d103      	bne.n	80054fe <_raise_r+0x46>
 80054f6:	2316      	movs	r3, #22
 80054f8:	6003      	str	r3, [r0, #0]
 80054fa:	2001      	movs	r0, #1
 80054fc:	e7e5      	b.n	80054ca <_raise_r+0x12>
 80054fe:	2100      	movs	r1, #0
 8005500:	0028      	movs	r0, r5
 8005502:	6019      	str	r1, [r3, #0]
 8005504:	4790      	blx	r2
 8005506:	2000      	movs	r0, #0
 8005508:	e7df      	b.n	80054ca <_raise_r+0x12>
	...

0800550c <raise>:
 800550c:	b510      	push	{r4, lr}
 800550e:	4b03      	ldr	r3, [pc, #12]	@ (800551c <raise+0x10>)
 8005510:	0001      	movs	r1, r0
 8005512:	6818      	ldr	r0, [r3, #0]
 8005514:	f7ff ffd0 	bl	80054b8 <_raise_r>
 8005518:	bd10      	pop	{r4, pc}
 800551a:	46c0      	nop			@ (mov r8, r8)
 800551c:	2000001c 	.word	0x2000001c

08005520 <_read_r>:
 8005520:	b570      	push	{r4, r5, r6, lr}
 8005522:	0004      	movs	r4, r0
 8005524:	0008      	movs	r0, r1
 8005526:	0011      	movs	r1, r2
 8005528:	001a      	movs	r2, r3
 800552a:	2300      	movs	r3, #0
 800552c:	4d05      	ldr	r5, [pc, #20]	@ (8005544 <_read_r+0x24>)
 800552e:	602b      	str	r3, [r5, #0]
 8005530:	f7fc ff6e 	bl	8002410 <_read>
 8005534:	1c43      	adds	r3, r0, #1
 8005536:	d103      	bne.n	8005540 <_read_r+0x20>
 8005538:	682b      	ldr	r3, [r5, #0]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d000      	beq.n	8005540 <_read_r+0x20>
 800553e:	6023      	str	r3, [r4, #0]
 8005540:	bd70      	pop	{r4, r5, r6, pc}
 8005542:	46c0      	nop			@ (mov r8, r8)
 8005544:	200003c8 	.word	0x200003c8

08005548 <_kill_r>:
 8005548:	2300      	movs	r3, #0
 800554a:	b570      	push	{r4, r5, r6, lr}
 800554c:	4d06      	ldr	r5, [pc, #24]	@ (8005568 <_kill_r+0x20>)
 800554e:	0004      	movs	r4, r0
 8005550:	0008      	movs	r0, r1
 8005552:	0011      	movs	r1, r2
 8005554:	602b      	str	r3, [r5, #0]
 8005556:	f7fc ff4d 	bl	80023f4 <_kill>
 800555a:	1c43      	adds	r3, r0, #1
 800555c:	d103      	bne.n	8005566 <_kill_r+0x1e>
 800555e:	682b      	ldr	r3, [r5, #0]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d000      	beq.n	8005566 <_kill_r+0x1e>
 8005564:	6023      	str	r3, [r4, #0]
 8005566:	bd70      	pop	{r4, r5, r6, pc}
 8005568:	200003c8 	.word	0x200003c8

0800556c <_getpid_r>:
 800556c:	b510      	push	{r4, lr}
 800556e:	f7fc ff3f 	bl	80023f0 <_getpid>
 8005572:	bd10      	pop	{r4, pc}

08005574 <_sbrk_r>:
 8005574:	2300      	movs	r3, #0
 8005576:	b570      	push	{r4, r5, r6, lr}
 8005578:	4d06      	ldr	r5, [pc, #24]	@ (8005594 <_sbrk_r+0x20>)
 800557a:	0004      	movs	r4, r0
 800557c:	0008      	movs	r0, r1
 800557e:	602b      	str	r3, [r5, #0]
 8005580:	f7fc ff6c 	bl	800245c <_sbrk>
 8005584:	1c43      	adds	r3, r0, #1
 8005586:	d103      	bne.n	8005590 <_sbrk_r+0x1c>
 8005588:	682b      	ldr	r3, [r5, #0]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d000      	beq.n	8005590 <_sbrk_r+0x1c>
 800558e:	6023      	str	r3, [r4, #0]
 8005590:	bd70      	pop	{r4, r5, r6, pc}
 8005592:	46c0      	nop			@ (mov r8, r8)
 8005594:	200003c8 	.word	0x200003c8

08005598 <_write_r>:
 8005598:	b570      	push	{r4, r5, r6, lr}
 800559a:	0004      	movs	r4, r0
 800559c:	0008      	movs	r0, r1
 800559e:	0011      	movs	r1, r2
 80055a0:	001a      	movs	r2, r3
 80055a2:	2300      	movs	r3, #0
 80055a4:	4d05      	ldr	r5, [pc, #20]	@ (80055bc <_write_r+0x24>)
 80055a6:	602b      	str	r3, [r5, #0]
 80055a8:	f7fc ff3f 	bl	800242a <_write>
 80055ac:	1c43      	adds	r3, r0, #1
 80055ae:	d103      	bne.n	80055b8 <_write_r+0x20>
 80055b0:	682b      	ldr	r3, [r5, #0]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d000      	beq.n	80055b8 <_write_r+0x20>
 80055b6:	6023      	str	r3, [r4, #0]
 80055b8:	bd70      	pop	{r4, r5, r6, pc}
 80055ba:	46c0      	nop			@ (mov r8, r8)
 80055bc:	200003c8 	.word	0x200003c8

080055c0 <memchr>:
 80055c0:	b2c9      	uxtb	r1, r1
 80055c2:	1882      	adds	r2, r0, r2
 80055c4:	4290      	cmp	r0, r2
 80055c6:	d101      	bne.n	80055cc <memchr+0xc>
 80055c8:	2000      	movs	r0, #0
 80055ca:	4770      	bx	lr
 80055cc:	7803      	ldrb	r3, [r0, #0]
 80055ce:	428b      	cmp	r3, r1
 80055d0:	d0fb      	beq.n	80055ca <memchr+0xa>
 80055d2:	3001      	adds	r0, #1
 80055d4:	e7f6      	b.n	80055c4 <memchr+0x4>
	...

080055d8 <_free_r>:
 80055d8:	b570      	push	{r4, r5, r6, lr}
 80055da:	0005      	movs	r5, r0
 80055dc:	1e0c      	subs	r4, r1, #0
 80055de:	d010      	beq.n	8005602 <_free_r+0x2a>
 80055e0:	3c04      	subs	r4, #4
 80055e2:	6823      	ldr	r3, [r4, #0]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	da00      	bge.n	80055ea <_free_r+0x12>
 80055e8:	18e4      	adds	r4, r4, r3
 80055ea:	0028      	movs	r0, r5
 80055ec:	f7ff fdb2 	bl	8005154 <__malloc_lock>
 80055f0:	4a1d      	ldr	r2, [pc, #116]	@ (8005668 <_free_r+0x90>)
 80055f2:	6813      	ldr	r3, [r2, #0]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d105      	bne.n	8005604 <_free_r+0x2c>
 80055f8:	6063      	str	r3, [r4, #4]
 80055fa:	6014      	str	r4, [r2, #0]
 80055fc:	0028      	movs	r0, r5
 80055fe:	f7ff fdb1 	bl	8005164 <__malloc_unlock>
 8005602:	bd70      	pop	{r4, r5, r6, pc}
 8005604:	42a3      	cmp	r3, r4
 8005606:	d908      	bls.n	800561a <_free_r+0x42>
 8005608:	6820      	ldr	r0, [r4, #0]
 800560a:	1821      	adds	r1, r4, r0
 800560c:	428b      	cmp	r3, r1
 800560e:	d1f3      	bne.n	80055f8 <_free_r+0x20>
 8005610:	6819      	ldr	r1, [r3, #0]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	1809      	adds	r1, r1, r0
 8005616:	6021      	str	r1, [r4, #0]
 8005618:	e7ee      	b.n	80055f8 <_free_r+0x20>
 800561a:	001a      	movs	r2, r3
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d001      	beq.n	8005626 <_free_r+0x4e>
 8005622:	42a3      	cmp	r3, r4
 8005624:	d9f9      	bls.n	800561a <_free_r+0x42>
 8005626:	6811      	ldr	r1, [r2, #0]
 8005628:	1850      	adds	r0, r2, r1
 800562a:	42a0      	cmp	r0, r4
 800562c:	d10b      	bne.n	8005646 <_free_r+0x6e>
 800562e:	6820      	ldr	r0, [r4, #0]
 8005630:	1809      	adds	r1, r1, r0
 8005632:	1850      	adds	r0, r2, r1
 8005634:	6011      	str	r1, [r2, #0]
 8005636:	4283      	cmp	r3, r0
 8005638:	d1e0      	bne.n	80055fc <_free_r+0x24>
 800563a:	6818      	ldr	r0, [r3, #0]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	1841      	adds	r1, r0, r1
 8005640:	6011      	str	r1, [r2, #0]
 8005642:	6053      	str	r3, [r2, #4]
 8005644:	e7da      	b.n	80055fc <_free_r+0x24>
 8005646:	42a0      	cmp	r0, r4
 8005648:	d902      	bls.n	8005650 <_free_r+0x78>
 800564a:	230c      	movs	r3, #12
 800564c:	602b      	str	r3, [r5, #0]
 800564e:	e7d5      	b.n	80055fc <_free_r+0x24>
 8005650:	6820      	ldr	r0, [r4, #0]
 8005652:	1821      	adds	r1, r4, r0
 8005654:	428b      	cmp	r3, r1
 8005656:	d103      	bne.n	8005660 <_free_r+0x88>
 8005658:	6819      	ldr	r1, [r3, #0]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	1809      	adds	r1, r1, r0
 800565e:	6021      	str	r1, [r4, #0]
 8005660:	6063      	str	r3, [r4, #4]
 8005662:	6054      	str	r4, [r2, #4]
 8005664:	e7ca      	b.n	80055fc <_free_r+0x24>
 8005666:	46c0      	nop			@ (mov r8, r8)
 8005668:	200003c4 	.word	0x200003c4

0800566c <_init>:
 800566c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800566e:	46c0      	nop			@ (mov r8, r8)
 8005670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005672:	bc08      	pop	{r3}
 8005674:	469e      	mov	lr, r3
 8005676:	4770      	bx	lr

08005678 <_fini>:
 8005678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800567a:	46c0      	nop			@ (mov r8, r8)
 800567c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800567e:	bc08      	pop	{r3}
 8005680:	469e      	mov	lr, r3
 8005682:	4770      	bx	lr
